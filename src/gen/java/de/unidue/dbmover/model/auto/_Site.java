package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Site was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Site extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> REDIRECT = Property.create("redirect", Long.class);
    public static final Property<String> PRIMARY_LOCALE = Property.create("primaryLocale", String.class);
    public static final Property<Short> MIN_PASSWORD_LENGTH = Property.create("minPasswordLength", Short.class);
    public static final Property<String> INSTALLED_LOCALES = Property.create("installedLocales", String.class);
    public static final Property<String> SUPPORTED_LOCALES = Property.create("supportedLocales", String.class);
    public static final Property<String> ORIGINAL_STYLE_FILE_NAME = Property.create("originalStyleFileName", String.class);

    protected long redirect;
    protected String primaryLocale;
    protected short minPasswordLength;
    protected String installedLocales;
    protected String supportedLocales;
    protected String originalStyleFileName;


    public void setRedirect(long redirect) {
        beforePropertyWrite("redirect", this.redirect, redirect);
        this.redirect = redirect;
    }

    public long getRedirect() {
        beforePropertyRead("redirect");
        return this.redirect;
    }

    public void setPrimaryLocale(String primaryLocale) {
        beforePropertyWrite("primaryLocale", this.primaryLocale, primaryLocale);
        this.primaryLocale = primaryLocale;
    }

    public String getPrimaryLocale() {
        beforePropertyRead("primaryLocale");
        return this.primaryLocale;
    }

    public void setMinPasswordLength(short minPasswordLength) {
        beforePropertyWrite("minPasswordLength", this.minPasswordLength, minPasswordLength);
        this.minPasswordLength = minPasswordLength;
    }

    public short getMinPasswordLength() {
        beforePropertyRead("minPasswordLength");
        return this.minPasswordLength;
    }

    public void setInstalledLocales(String installedLocales) {
        beforePropertyWrite("installedLocales", this.installedLocales, installedLocales);
        this.installedLocales = installedLocales;
    }

    public String getInstalledLocales() {
        beforePropertyRead("installedLocales");
        return this.installedLocales;
    }

    public void setSupportedLocales(String supportedLocales) {
        beforePropertyWrite("supportedLocales", this.supportedLocales, supportedLocales);
        this.supportedLocales = supportedLocales;
    }

    public String getSupportedLocales() {
        beforePropertyRead("supportedLocales");
        return this.supportedLocales;
    }

    public void setOriginalStyleFileName(String originalStyleFileName) {
        beforePropertyWrite("originalStyleFileName", this.originalStyleFileName, originalStyleFileName);
        this.originalStyleFileName = originalStyleFileName;
    }

    public String getOriginalStyleFileName() {
        beforePropertyRead("originalStyleFileName");
        return this.originalStyleFileName;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "redirect":
                return this.redirect;
            case "primaryLocale":
                return this.primaryLocale;
            case "minPasswordLength":
                return this.minPasswordLength;
            case "installedLocales":
                return this.installedLocales;
            case "supportedLocales":
                return this.supportedLocales;
            case "originalStyleFileName":
                return this.originalStyleFileName;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "redirect":
                this.redirect = val == null ? 0 : (long)val;
                break;
            case "primaryLocale":
                this.primaryLocale = (String)val;
                break;
            case "minPasswordLength":
                this.minPasswordLength = val == null ? 0 : (short)val;
                break;
            case "installedLocales":
                this.installedLocales = (String)val;
                break;
            case "supportedLocales":
                this.supportedLocales = (String)val;
                break;
            case "originalStyleFileName":
                this.originalStyleFileName = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.redirect);
        out.writeObject(this.primaryLocale);
        out.writeShort(this.minPasswordLength);
        out.writeObject(this.installedLocales);
        out.writeObject(this.supportedLocales);
        out.writeObject(this.originalStyleFileName);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.redirect = in.readLong();
        this.primaryLocale = (String)in.readObject();
        this.minPasswordLength = in.readShort();
        this.installedLocales = (String)in.readObject();
        this.supportedLocales = (String)in.readObject();
        this.originalStyleFileName = (String)in.readObject();
    }

}
