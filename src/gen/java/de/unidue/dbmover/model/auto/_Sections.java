package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Sections was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Sections extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String SECTION_ID_PK_COLUMN = "section_id";

    public static final Property<Long> JOURNAL_ID = Property.create("journalId", Long.class);
    public static final Property<Long> REVIEW_FORM_ID = Property.create("reviewFormId", Long.class);
    public static final Property<Double> SEQ = Property.create("seq", Double.class);
    public static final Property<Short> EDITOR_RESTRICTED = Property.create("editorRestricted", Short.class);
    public static final Property<Short> META_INDEXED = Property.create("metaIndexed", Short.class);
    public static final Property<Short> META_REVIEWED = Property.create("metaReviewed", Short.class);
    public static final Property<Short> ABSTRACTS_NOT_REQUIRED = Property.create("abstractsNotRequired", Short.class);
    public static final Property<Short> HIDE_TITLE = Property.create("hideTitle", Short.class);
    public static final Property<Short> HIDE_AUTHOR = Property.create("hideAuthor", Short.class);
    public static final Property<Long> ABSTRACT_WORD_COUNT = Property.create("abstractWordCount", Long.class);

    protected long journalId;
    protected Long reviewFormId;
    protected double seq;
    protected short editorRestricted;
    protected short metaIndexed;
    protected short metaReviewed;
    protected short abstractsNotRequired;
    protected short hideTitle;
    protected short hideAuthor;
    protected Long abstractWordCount;


    public void setJournalId(long journalId) {
        beforePropertyWrite("journalId", this.journalId, journalId);
        this.journalId = journalId;
    }

    public long getJournalId() {
        beforePropertyRead("journalId");
        return this.journalId;
    }

    public void setReviewFormId(long reviewFormId) {
        beforePropertyWrite("reviewFormId", this.reviewFormId, reviewFormId);
        this.reviewFormId = reviewFormId;
    }

    public long getReviewFormId() {
        beforePropertyRead("reviewFormId");
        if(this.reviewFormId == null) {
            return 0;
        }
        return this.reviewFormId;
    }

    public void setSeq(double seq) {
        beforePropertyWrite("seq", this.seq, seq);
        this.seq = seq;
    }

    public double getSeq() {
        beforePropertyRead("seq");
        return this.seq;
    }

    public void setEditorRestricted(short editorRestricted) {
        beforePropertyWrite("editorRestricted", this.editorRestricted, editorRestricted);
        this.editorRestricted = editorRestricted;
    }

    public short getEditorRestricted() {
        beforePropertyRead("editorRestricted");
        return this.editorRestricted;
    }

    public void setMetaIndexed(short metaIndexed) {
        beforePropertyWrite("metaIndexed", this.metaIndexed, metaIndexed);
        this.metaIndexed = metaIndexed;
    }

    public short getMetaIndexed() {
        beforePropertyRead("metaIndexed");
        return this.metaIndexed;
    }

    public void setMetaReviewed(short metaReviewed) {
        beforePropertyWrite("metaReviewed", this.metaReviewed, metaReviewed);
        this.metaReviewed = metaReviewed;
    }

    public short getMetaReviewed() {
        beforePropertyRead("metaReviewed");
        return this.metaReviewed;
    }

    public void setAbstractsNotRequired(short abstractsNotRequired) {
        beforePropertyWrite("abstractsNotRequired", this.abstractsNotRequired, abstractsNotRequired);
        this.abstractsNotRequired = abstractsNotRequired;
    }

    public short getAbstractsNotRequired() {
        beforePropertyRead("abstractsNotRequired");
        return this.abstractsNotRequired;
    }

    public void setHideTitle(short hideTitle) {
        beforePropertyWrite("hideTitle", this.hideTitle, hideTitle);
        this.hideTitle = hideTitle;
    }

    public short getHideTitle() {
        beforePropertyRead("hideTitle");
        return this.hideTitle;
    }

    public void setHideAuthor(short hideAuthor) {
        beforePropertyWrite("hideAuthor", this.hideAuthor, hideAuthor);
        this.hideAuthor = hideAuthor;
    }

    public short getHideAuthor() {
        beforePropertyRead("hideAuthor");
        return this.hideAuthor;
    }

    public void setAbstractWordCount(long abstractWordCount) {
        beforePropertyWrite("abstractWordCount", this.abstractWordCount, abstractWordCount);
        this.abstractWordCount = abstractWordCount;
    }

    public long getAbstractWordCount() {
        beforePropertyRead("abstractWordCount");
        if(this.abstractWordCount == null) {
            return 0;
        }
        return this.abstractWordCount;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "journalId":
                return this.journalId;
            case "reviewFormId":
                return this.reviewFormId;
            case "seq":
                return this.seq;
            case "editorRestricted":
                return this.editorRestricted;
            case "metaIndexed":
                return this.metaIndexed;
            case "metaReviewed":
                return this.metaReviewed;
            case "abstractsNotRequired":
                return this.abstractsNotRequired;
            case "hideTitle":
                return this.hideTitle;
            case "hideAuthor":
                return this.hideAuthor;
            case "abstractWordCount":
                return this.abstractWordCount;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "journalId":
                this.journalId = val == null ? 0 : (long)val;
                break;
            case "reviewFormId":
                this.reviewFormId = (Long)val;
                break;
            case "seq":
                this.seq = val == null ? 0 : (double)val;
                break;
            case "editorRestricted":
                this.editorRestricted = val == null ? 0 : (short)val;
                break;
            case "metaIndexed":
                this.metaIndexed = val == null ? 0 : (short)val;
                break;
            case "metaReviewed":
                this.metaReviewed = val == null ? 0 : (short)val;
                break;
            case "abstractsNotRequired":
                this.abstractsNotRequired = val == null ? 0 : (short)val;
                break;
            case "hideTitle":
                this.hideTitle = val == null ? 0 : (short)val;
                break;
            case "hideAuthor":
                this.hideAuthor = val == null ? 0 : (short)val;
                break;
            case "abstractWordCount":
                this.abstractWordCount = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.journalId);
        out.writeObject(this.reviewFormId);
        out.writeDouble(this.seq);
        out.writeShort(this.editorRestricted);
        out.writeShort(this.metaIndexed);
        out.writeShort(this.metaReviewed);
        out.writeShort(this.abstractsNotRequired);
        out.writeShort(this.hideTitle);
        out.writeShort(this.hideAuthor);
        out.writeObject(this.abstractWordCount);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.journalId = in.readLong();
        this.reviewFormId = (Long)in.readObject();
        this.seq = in.readDouble();
        this.editorRestricted = in.readShort();
        this.metaIndexed = in.readShort();
        this.metaReviewed = in.readShort();
        this.abstractsNotRequired = in.readShort();
        this.hideTitle = in.readShort();
        this.hideAuthor = in.readShort();
        this.abstractWordCount = (Long)in.readObject();
    }

}
