package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Groups was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Groups extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Short> ASSOC_TYPE = Property.create("assocType", Short.class);
    public static final Property<Short> PUBLISH_EMAIL = Property.create("publishEmail", Short.class);
    public static final Property<Long> ASSOC_ID = Property.create("assocId", Long.class);
    public static final Property<Long> CONTEXT = Property.create("context", Long.class);
    public static final Property<Short> ABOUT_DISPLAYED = Property.create("aboutDisplayed", Short.class);
    public static final Property<Double> SEQ = Property.create("seq", Double.class);
    public static final Property<Integer> GROUP_ID = Property.create("groupId", Integer.class);

    protected Short assocType;
    protected Short publishEmail;
    protected Long assocId;
    protected Long context;
    protected short aboutDisplayed;
    protected double seq;
    protected Integer groupId;


    public void setAssocType(short assocType) {
        beforePropertyWrite("assocType", this.assocType, assocType);
        this.assocType = assocType;
    }

    public short getAssocType() {
        beforePropertyRead("assocType");
        if(this.assocType == null) {
            return 0;
        }
        return this.assocType;
    }

    public void setPublishEmail(short publishEmail) {
        beforePropertyWrite("publishEmail", this.publishEmail, publishEmail);
        this.publishEmail = publishEmail;
    }

    public short getPublishEmail() {
        beforePropertyRead("publishEmail");
        if(this.publishEmail == null) {
            return 0;
        }
        return this.publishEmail;
    }

    public void setAssocId(long assocId) {
        beforePropertyWrite("assocId", this.assocId, assocId);
        this.assocId = assocId;
    }

    public long getAssocId() {
        beforePropertyRead("assocId");
        if(this.assocId == null) {
            return 0;
        }
        return this.assocId;
    }

    public void setContext(long context) {
        beforePropertyWrite("context", this.context, context);
        this.context = context;
    }

    public long getContext() {
        beforePropertyRead("context");
        if(this.context == null) {
            return 0;
        }
        return this.context;
    }

    public void setAboutDisplayed(short aboutDisplayed) {
        beforePropertyWrite("aboutDisplayed", this.aboutDisplayed, aboutDisplayed);
        this.aboutDisplayed = aboutDisplayed;
    }

    public short getAboutDisplayed() {
        beforePropertyRead("aboutDisplayed");
        return this.aboutDisplayed;
    }

    public void setSeq(double seq) {
        beforePropertyWrite("seq", this.seq, seq);
        this.seq = seq;
    }

    public double getSeq() {
        beforePropertyRead("seq");
        return this.seq;
    }

    public void setGroupId(Integer groupId) {
        beforePropertyWrite("groupId", this.groupId, groupId);
        this.groupId = groupId;
    }

    public Integer getGroupId() {
        beforePropertyRead("groupId");
        return this.groupId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "assocType":
                return this.assocType;
            case "publishEmail":
                return this.publishEmail;
            case "assocId":
                return this.assocId;
            case "context":
                return this.context;
            case "aboutDisplayed":
                return this.aboutDisplayed;
            case "seq":
                return this.seq;
            case "groupId":
                return this.groupId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "assocType":
                this.assocType = (Short)val;
                break;
            case "publishEmail":
                this.publishEmail = (Short)val;
                break;
            case "assocId":
                this.assocId = (Long)val;
                break;
            case "context":
                this.context = (Long)val;
                break;
            case "aboutDisplayed":
                this.aboutDisplayed = val == null ? 0 : (short)val;
                break;
            case "seq":
                this.seq = val == null ? 0 : (double)val;
                break;
            case "groupId":
                this.groupId = (Integer)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.assocType);
        out.writeObject(this.publishEmail);
        out.writeObject(this.assocId);
        out.writeObject(this.context);
        out.writeShort(this.aboutDisplayed);
        out.writeDouble(this.seq);
        out.writeObject(this.groupId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.assocType = (Short)in.readObject();
        this.publishEmail = (Short)in.readObject();
        this.assocId = (Long)in.readObject();
        this.context = (Long)in.readObject();
        this.aboutDisplayed = in.readShort();
        this.seq = in.readDouble();
        this.groupId = (Integer)in.readObject();
    }

}
