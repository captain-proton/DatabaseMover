package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _ControlledVocabs was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ControlledVocabs extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<String> SYMBOLIC = Property.create("symbolic", String.class);
    public static final Property<Long> ASSOC_TYPE = Property.create("assocType", Long.class);
    public static final Property<Long> ASSOC_ID = Property.create("assocId", Long.class);
    public static final Property<Long> CONTROLLED_VOCAB_ID = Property.create("controlledVocabId", Long.class);

    protected String symbolic;
    protected long assocType;
    protected long assocId;
    protected Long controlledVocabId;


    public void setSymbolic(String symbolic) {
        beforePropertyWrite("symbolic", this.symbolic, symbolic);
        this.symbolic = symbolic;
    }

    public String getSymbolic() {
        beforePropertyRead("symbolic");
        return this.symbolic;
    }

    public void setAssocType(long assocType) {
        beforePropertyWrite("assocType", this.assocType, assocType);
        this.assocType = assocType;
    }

    public long getAssocType() {
        beforePropertyRead("assocType");
        return this.assocType;
    }

    public void setAssocId(long assocId) {
        beforePropertyWrite("assocId", this.assocId, assocId);
        this.assocId = assocId;
    }

    public long getAssocId() {
        beforePropertyRead("assocId");
        return this.assocId;
    }

    public void setControlledVocabId(Long controlledVocabId) {
        beforePropertyWrite("controlledVocabId", this.controlledVocabId, controlledVocabId);
        this.controlledVocabId = controlledVocabId;
    }

    public Long getControlledVocabId() {
        beforePropertyRead("controlledVocabId");
        return this.controlledVocabId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "symbolic":
                return this.symbolic;
            case "assocType":
                return this.assocType;
            case "assocId":
                return this.assocId;
            case "controlledVocabId":
                return this.controlledVocabId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "symbolic":
                this.symbolic = (String)val;
                break;
            case "assocType":
                this.assocType = val == null ? 0 : (long)val;
                break;
            case "assocId":
                this.assocId = val == null ? 0 : (long)val;
                break;
            case "controlledVocabId":
                this.controlledVocabId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.symbolic);
        out.writeLong(this.assocType);
        out.writeLong(this.assocId);
        out.writeObject(this.controlledVocabId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.symbolic = (String)in.readObject();
        this.assocType = in.readLong();
        this.assocId = in.readLong();
        this.controlledVocabId = (Long)in.readObject();
    }

}
