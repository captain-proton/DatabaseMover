package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _BooksForReview was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _BooksForReview extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String BOOK_ID_PK_COLUMN = "book_id";

    public static final Property<Long> JOURNAL_ID = Property.create("journalId", Long.class);
    public static final Property<Short> STATUS = Property.create("status", Short.class);
    public static final Property<Short> AUTHOR_TYPE = Property.create("authorType", Short.class);
    public static final Property<String> PUBLISHER = Property.create("publisher", String.class);
    public static final Property<Short> YEAR = Property.create("year", Short.class);
    public static final Property<String> LANGUAGE = Property.create("language", String.class);
    public static final Property<Short> COPY = Property.create("copy", Short.class);
    public static final Property<String> URL = Property.create("url", String.class);
    public static final Property<Short> EDITION = Property.create("edition", Short.class);
    public static final Property<Short> PAGES = Property.create("pages", Short.class);
    public static final Property<String> ISBN = Property.create("isbn", String.class);
    public static final Property<LocalDateTime> DATE_CREATED = Property.create("dateCreated", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_REQUESTED = Property.create("dateRequested", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_ASSIGNED = Property.create("dateAssigned", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_MAILED = Property.create("dateMailed", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_DUE = Property.create("dateDue", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_SUBMITTED = Property.create("dateSubmitted", LocalDateTime.class);
    public static final Property<Long> USER_ID = Property.create("userId", Long.class);
    public static final Property<Long> EDITOR_ID = Property.create("editorId", Long.class);
    public static final Property<Long> SUBMISSION_ID = Property.create("submissionId", Long.class);
    public static final Property<String> NOTES = Property.create("notes", String.class);

    protected long journalId;
    protected short status;
    protected short authorType;
    protected String publisher;
    protected short year;
    protected String language;
    protected short copy;
    protected String url;
    protected Short edition;
    protected Short pages;
    protected String isbn;
    protected LocalDateTime dateCreated;
    protected LocalDateTime dateRequested;
    protected LocalDateTime dateAssigned;
    protected LocalDateTime dateMailed;
    protected LocalDateTime dateDue;
    protected LocalDateTime dateSubmitted;
    protected Long userId;
    protected Long editorId;
    protected Long submissionId;
    protected String notes;


    public void setJournalId(long journalId) {
        beforePropertyWrite("journalId", this.journalId, journalId);
        this.journalId = journalId;
    }

    public long getJournalId() {
        beforePropertyRead("journalId");
        return this.journalId;
    }

    public void setStatus(short status) {
        beforePropertyWrite("status", this.status, status);
        this.status = status;
    }

    public short getStatus() {
        beforePropertyRead("status");
        return this.status;
    }

    public void setAuthorType(short authorType) {
        beforePropertyWrite("authorType", this.authorType, authorType);
        this.authorType = authorType;
    }

    public short getAuthorType() {
        beforePropertyRead("authorType");
        return this.authorType;
    }

    public void setPublisher(String publisher) {
        beforePropertyWrite("publisher", this.publisher, publisher);
        this.publisher = publisher;
    }

    public String getPublisher() {
        beforePropertyRead("publisher");
        return this.publisher;
    }

    public void setYear(short year) {
        beforePropertyWrite("year", this.year, year);
        this.year = year;
    }

    public short getYear() {
        beforePropertyRead("year");
        return this.year;
    }

    public void setLanguage(String language) {
        beforePropertyWrite("language", this.language, language);
        this.language = language;
    }

    public String getLanguage() {
        beforePropertyRead("language");
        return this.language;
    }

    public void setCopy(short copy) {
        beforePropertyWrite("copy", this.copy, copy);
        this.copy = copy;
    }

    public short getCopy() {
        beforePropertyRead("copy");
        return this.copy;
    }

    public void setUrl(String url) {
        beforePropertyWrite("url", this.url, url);
        this.url = url;
    }

    public String getUrl() {
        beforePropertyRead("url");
        return this.url;
    }

    public void setEdition(short edition) {
        beforePropertyWrite("edition", this.edition, edition);
        this.edition = edition;
    }

    public short getEdition() {
        beforePropertyRead("edition");
        if(this.edition == null) {
            return 0;
        }
        return this.edition;
    }

    public void setPages(short pages) {
        beforePropertyWrite("pages", this.pages, pages);
        this.pages = pages;
    }

    public short getPages() {
        beforePropertyRead("pages");
        if(this.pages == null) {
            return 0;
        }
        return this.pages;
    }

    public void setIsbn(String isbn) {
        beforePropertyWrite("isbn", this.isbn, isbn);
        this.isbn = isbn;
    }

    public String getIsbn() {
        beforePropertyRead("isbn");
        return this.isbn;
    }

    public void setDateCreated(LocalDateTime dateCreated) {
        beforePropertyWrite("dateCreated", this.dateCreated, dateCreated);
        this.dateCreated = dateCreated;
    }

    public LocalDateTime getDateCreated() {
        beforePropertyRead("dateCreated");
        return this.dateCreated;
    }

    public void setDateRequested(LocalDateTime dateRequested) {
        beforePropertyWrite("dateRequested", this.dateRequested, dateRequested);
        this.dateRequested = dateRequested;
    }

    public LocalDateTime getDateRequested() {
        beforePropertyRead("dateRequested");
        return this.dateRequested;
    }

    public void setDateAssigned(LocalDateTime dateAssigned) {
        beforePropertyWrite("dateAssigned", this.dateAssigned, dateAssigned);
        this.dateAssigned = dateAssigned;
    }

    public LocalDateTime getDateAssigned() {
        beforePropertyRead("dateAssigned");
        return this.dateAssigned;
    }

    public void setDateMailed(LocalDateTime dateMailed) {
        beforePropertyWrite("dateMailed", this.dateMailed, dateMailed);
        this.dateMailed = dateMailed;
    }

    public LocalDateTime getDateMailed() {
        beforePropertyRead("dateMailed");
        return this.dateMailed;
    }

    public void setDateDue(LocalDateTime dateDue) {
        beforePropertyWrite("dateDue", this.dateDue, dateDue);
        this.dateDue = dateDue;
    }

    public LocalDateTime getDateDue() {
        beforePropertyRead("dateDue");
        return this.dateDue;
    }

    public void setDateSubmitted(LocalDateTime dateSubmitted) {
        beforePropertyWrite("dateSubmitted", this.dateSubmitted, dateSubmitted);
        this.dateSubmitted = dateSubmitted;
    }

    public LocalDateTime getDateSubmitted() {
        beforePropertyRead("dateSubmitted");
        return this.dateSubmitted;
    }

    public void setUserId(long userId) {
        beforePropertyWrite("userId", this.userId, userId);
        this.userId = userId;
    }

    public long getUserId() {
        beforePropertyRead("userId");
        if(this.userId == null) {
            return 0;
        }
        return this.userId;
    }

    public void setEditorId(long editorId) {
        beforePropertyWrite("editorId", this.editorId, editorId);
        this.editorId = editorId;
    }

    public long getEditorId() {
        beforePropertyRead("editorId");
        if(this.editorId == null) {
            return 0;
        }
        return this.editorId;
    }

    public void setSubmissionId(long submissionId) {
        beforePropertyWrite("submissionId", this.submissionId, submissionId);
        this.submissionId = submissionId;
    }

    public long getSubmissionId() {
        beforePropertyRead("submissionId");
        if(this.submissionId == null) {
            return 0;
        }
        return this.submissionId;
    }

    public void setNotes(String notes) {
        beforePropertyWrite("notes", this.notes, notes);
        this.notes = notes;
    }

    public String getNotes() {
        beforePropertyRead("notes");
        return this.notes;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "journalId":
                return this.journalId;
            case "status":
                return this.status;
            case "authorType":
                return this.authorType;
            case "publisher":
                return this.publisher;
            case "year":
                return this.year;
            case "language":
                return this.language;
            case "copy":
                return this.copy;
            case "url":
                return this.url;
            case "edition":
                return this.edition;
            case "pages":
                return this.pages;
            case "isbn":
                return this.isbn;
            case "dateCreated":
                return this.dateCreated;
            case "dateRequested":
                return this.dateRequested;
            case "dateAssigned":
                return this.dateAssigned;
            case "dateMailed":
                return this.dateMailed;
            case "dateDue":
                return this.dateDue;
            case "dateSubmitted":
                return this.dateSubmitted;
            case "userId":
                return this.userId;
            case "editorId":
                return this.editorId;
            case "submissionId":
                return this.submissionId;
            case "notes":
                return this.notes;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "journalId":
                this.journalId = val == null ? 0 : (long)val;
                break;
            case "status":
                this.status = val == null ? 0 : (short)val;
                break;
            case "authorType":
                this.authorType = val == null ? 0 : (short)val;
                break;
            case "publisher":
                this.publisher = (String)val;
                break;
            case "year":
                this.year = val == null ? 0 : (short)val;
                break;
            case "language":
                this.language = (String)val;
                break;
            case "copy":
                this.copy = val == null ? 0 : (short)val;
                break;
            case "url":
                this.url = (String)val;
                break;
            case "edition":
                this.edition = (Short)val;
                break;
            case "pages":
                this.pages = (Short)val;
                break;
            case "isbn":
                this.isbn = (String)val;
                break;
            case "dateCreated":
                this.dateCreated = (LocalDateTime)val;
                break;
            case "dateRequested":
                this.dateRequested = (LocalDateTime)val;
                break;
            case "dateAssigned":
                this.dateAssigned = (LocalDateTime)val;
                break;
            case "dateMailed":
                this.dateMailed = (LocalDateTime)val;
                break;
            case "dateDue":
                this.dateDue = (LocalDateTime)val;
                break;
            case "dateSubmitted":
                this.dateSubmitted = (LocalDateTime)val;
                break;
            case "userId":
                this.userId = (Long)val;
                break;
            case "editorId":
                this.editorId = (Long)val;
                break;
            case "submissionId":
                this.submissionId = (Long)val;
                break;
            case "notes":
                this.notes = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.journalId);
        out.writeShort(this.status);
        out.writeShort(this.authorType);
        out.writeObject(this.publisher);
        out.writeShort(this.year);
        out.writeObject(this.language);
        out.writeShort(this.copy);
        out.writeObject(this.url);
        out.writeObject(this.edition);
        out.writeObject(this.pages);
        out.writeObject(this.isbn);
        out.writeObject(this.dateCreated);
        out.writeObject(this.dateRequested);
        out.writeObject(this.dateAssigned);
        out.writeObject(this.dateMailed);
        out.writeObject(this.dateDue);
        out.writeObject(this.dateSubmitted);
        out.writeObject(this.userId);
        out.writeObject(this.editorId);
        out.writeObject(this.submissionId);
        out.writeObject(this.notes);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.journalId = in.readLong();
        this.status = in.readShort();
        this.authorType = in.readShort();
        this.publisher = (String)in.readObject();
        this.year = in.readShort();
        this.language = (String)in.readObject();
        this.copy = in.readShort();
        this.url = (String)in.readObject();
        this.edition = (Short)in.readObject();
        this.pages = (Short)in.readObject();
        this.isbn = (String)in.readObject();
        this.dateCreated = (LocalDateTime)in.readObject();
        this.dateRequested = (LocalDateTime)in.readObject();
        this.dateAssigned = (LocalDateTime)in.readObject();
        this.dateMailed = (LocalDateTime)in.readObject();
        this.dateDue = (LocalDateTime)in.readObject();
        this.dateSubmitted = (LocalDateTime)in.readObject();
        this.userId = (Long)in.readObject();
        this.editorId = (Long)in.readObject();
        this.submissionId = (Long)in.readObject();
        this.notes = (String)in.readObject();
    }

}
