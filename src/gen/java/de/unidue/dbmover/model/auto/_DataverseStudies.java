package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _DataverseStudies was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _DataverseStudies extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String STUDY_ID_PK_COLUMN = "study_id";

    public static final Property<Long> SUBMISSION_ID = Property.create("submissionId", Long.class);
    public static final Property<String> EDIT_URI = Property.create("editUri", String.class);
    public static final Property<String> EDIT_MEDIA_URI = Property.create("editMediaUri", String.class);
    public static final Property<String> STATEMENT_URI = Property.create("statementUri", String.class);
    public static final Property<String> PERSISTENT_URI = Property.create("persistentUri", String.class);
    public static final Property<String> DATA_CITATION = Property.create("dataCitation", String.class);

    protected long submissionId;
    protected String editUri;
    protected String editMediaUri;
    protected String statementUri;
    protected String persistentUri;
    protected String dataCitation;


    public void setSubmissionId(long submissionId) {
        beforePropertyWrite("submissionId", this.submissionId, submissionId);
        this.submissionId = submissionId;
    }

    public long getSubmissionId() {
        beforePropertyRead("submissionId");
        return this.submissionId;
    }

    public void setEditUri(String editUri) {
        beforePropertyWrite("editUri", this.editUri, editUri);
        this.editUri = editUri;
    }

    public String getEditUri() {
        beforePropertyRead("editUri");
        return this.editUri;
    }

    public void setEditMediaUri(String editMediaUri) {
        beforePropertyWrite("editMediaUri", this.editMediaUri, editMediaUri);
        this.editMediaUri = editMediaUri;
    }

    public String getEditMediaUri() {
        beforePropertyRead("editMediaUri");
        return this.editMediaUri;
    }

    public void setStatementUri(String statementUri) {
        beforePropertyWrite("statementUri", this.statementUri, statementUri);
        this.statementUri = statementUri;
    }

    public String getStatementUri() {
        beforePropertyRead("statementUri");
        return this.statementUri;
    }

    public void setPersistentUri(String persistentUri) {
        beforePropertyWrite("persistentUri", this.persistentUri, persistentUri);
        this.persistentUri = persistentUri;
    }

    public String getPersistentUri() {
        beforePropertyRead("persistentUri");
        return this.persistentUri;
    }

    public void setDataCitation(String dataCitation) {
        beforePropertyWrite("dataCitation", this.dataCitation, dataCitation);
        this.dataCitation = dataCitation;
    }

    public String getDataCitation() {
        beforePropertyRead("dataCitation");
        return this.dataCitation;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "submissionId":
                return this.submissionId;
            case "editUri":
                return this.editUri;
            case "editMediaUri":
                return this.editMediaUri;
            case "statementUri":
                return this.statementUri;
            case "persistentUri":
                return this.persistentUri;
            case "dataCitation":
                return this.dataCitation;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "submissionId":
                this.submissionId = val == null ? 0 : (long)val;
                break;
            case "editUri":
                this.editUri = (String)val;
                break;
            case "editMediaUri":
                this.editMediaUri = (String)val;
                break;
            case "statementUri":
                this.statementUri = (String)val;
                break;
            case "persistentUri":
                this.persistentUri = (String)val;
                break;
            case "dataCitation":
                this.dataCitation = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.submissionId);
        out.writeObject(this.editUri);
        out.writeObject(this.editMediaUri);
        out.writeObject(this.statementUri);
        out.writeObject(this.persistentUri);
        out.writeObject(this.dataCitation);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.submissionId = in.readLong();
        this.editUri = (String)in.readObject();
        this.editMediaUri = (String)in.readObject();
        this.statementUri = (String)in.readObject();
        this.persistentUri = (String)in.readObject();
        this.dataCitation = (String)in.readObject();
    }

}
