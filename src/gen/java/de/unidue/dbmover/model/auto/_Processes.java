package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Processes was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Processes extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<String> PROCESS_ID = Property.create("processId", String.class);
    public static final Property<Short> PROCESS_TYPE = Property.create("processType", Short.class);
    public static final Property<Long> TIME_STARTED = Property.create("timeStarted", Long.class);
    public static final Property<Short> OBLITERATED = Property.create("obliterated", Short.class);

    protected String processId;
    protected short processType;
    protected long timeStarted;
    protected short obliterated;


    public void setProcessId(String processId) {
        beforePropertyWrite("processId", this.processId, processId);
        this.processId = processId;
    }

    public String getProcessId() {
        beforePropertyRead("processId");
        return this.processId;
    }

    public void setProcessType(short processType) {
        beforePropertyWrite("processType", this.processType, processType);
        this.processType = processType;
    }

    public short getProcessType() {
        beforePropertyRead("processType");
        return this.processType;
    }

    public void setTimeStarted(long timeStarted) {
        beforePropertyWrite("timeStarted", this.timeStarted, timeStarted);
        this.timeStarted = timeStarted;
    }

    public long getTimeStarted() {
        beforePropertyRead("timeStarted");
        return this.timeStarted;
    }

    public void setObliterated(short obliterated) {
        beforePropertyWrite("obliterated", this.obliterated, obliterated);
        this.obliterated = obliterated;
    }

    public short getObliterated() {
        beforePropertyRead("obliterated");
        return this.obliterated;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "processId":
                return this.processId;
            case "processType":
                return this.processType;
            case "timeStarted":
                return this.timeStarted;
            case "obliterated":
                return this.obliterated;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "processId":
                this.processId = (String)val;
                break;
            case "processType":
                this.processType = val == null ? 0 : (short)val;
                break;
            case "timeStarted":
                this.timeStarted = val == null ? 0 : (long)val;
                break;
            case "obliterated":
                this.obliterated = val == null ? 0 : (short)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.processId);
        out.writeShort(this.processType);
        out.writeLong(this.timeStarted);
        out.writeShort(this.obliterated);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.processId = (String)in.readObject();
        this.processType = in.readShort();
        this.timeStarted = in.readLong();
        this.obliterated = in.readShort();
    }

}
