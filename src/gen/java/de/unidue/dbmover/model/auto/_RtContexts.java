package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _RtContexts was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _RtContexts extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String CONTEXT_ID_PK_COLUMN = "context_id";

    public static final Property<Long> VERSION_ID = Property.create("versionId", Long.class);
    public static final Property<String> TITLE = Property.create("title", String.class);
    public static final Property<String> ABBREV = Property.create("abbrev", String.class);
    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<Short> CITED_BY = Property.create("citedBy", Short.class);
    public static final Property<Short> AUTHOR_TERMS = Property.create("authorTerms", Short.class);
    public static final Property<Short> DEFINE_TERMS = Property.create("defineTerms", Short.class);
    public static final Property<Short> GEO_TERMS = Property.create("geoTerms", Short.class);
    public static final Property<Double> SEQ = Property.create("seq", Double.class);

    protected long versionId;
    protected String title;
    protected String abbrev;
    protected String description;
    protected short citedBy;
    protected short authorTerms;
    protected short defineTerms;
    protected short geoTerms;
    protected double seq;


    public void setVersionId(long versionId) {
        beforePropertyWrite("versionId", this.versionId, versionId);
        this.versionId = versionId;
    }

    public long getVersionId() {
        beforePropertyRead("versionId");
        return this.versionId;
    }

    public void setTitle(String title) {
        beforePropertyWrite("title", this.title, title);
        this.title = title;
    }

    public String getTitle() {
        beforePropertyRead("title");
        return this.title;
    }

    public void setAbbrev(String abbrev) {
        beforePropertyWrite("abbrev", this.abbrev, abbrev);
        this.abbrev = abbrev;
    }

    public String getAbbrev() {
        beforePropertyRead("abbrev");
        return this.abbrev;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setCitedBy(short citedBy) {
        beforePropertyWrite("citedBy", this.citedBy, citedBy);
        this.citedBy = citedBy;
    }

    public short getCitedBy() {
        beforePropertyRead("citedBy");
        return this.citedBy;
    }

    public void setAuthorTerms(short authorTerms) {
        beforePropertyWrite("authorTerms", this.authorTerms, authorTerms);
        this.authorTerms = authorTerms;
    }

    public short getAuthorTerms() {
        beforePropertyRead("authorTerms");
        return this.authorTerms;
    }

    public void setDefineTerms(short defineTerms) {
        beforePropertyWrite("defineTerms", this.defineTerms, defineTerms);
        this.defineTerms = defineTerms;
    }

    public short getDefineTerms() {
        beforePropertyRead("defineTerms");
        return this.defineTerms;
    }

    public void setGeoTerms(short geoTerms) {
        beforePropertyWrite("geoTerms", this.geoTerms, geoTerms);
        this.geoTerms = geoTerms;
    }

    public short getGeoTerms() {
        beforePropertyRead("geoTerms");
        return this.geoTerms;
    }

    public void setSeq(double seq) {
        beforePropertyWrite("seq", this.seq, seq);
        this.seq = seq;
    }

    public double getSeq() {
        beforePropertyRead("seq");
        return this.seq;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "versionId":
                return this.versionId;
            case "title":
                return this.title;
            case "abbrev":
                return this.abbrev;
            case "description":
                return this.description;
            case "citedBy":
                return this.citedBy;
            case "authorTerms":
                return this.authorTerms;
            case "defineTerms":
                return this.defineTerms;
            case "geoTerms":
                return this.geoTerms;
            case "seq":
                return this.seq;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "versionId":
                this.versionId = val == null ? 0 : (long)val;
                break;
            case "title":
                this.title = (String)val;
                break;
            case "abbrev":
                this.abbrev = (String)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "citedBy":
                this.citedBy = val == null ? 0 : (short)val;
                break;
            case "authorTerms":
                this.authorTerms = val == null ? 0 : (short)val;
                break;
            case "defineTerms":
                this.defineTerms = val == null ? 0 : (short)val;
                break;
            case "geoTerms":
                this.geoTerms = val == null ? 0 : (short)val;
                break;
            case "seq":
                this.seq = val == null ? 0 : (double)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.versionId);
        out.writeObject(this.title);
        out.writeObject(this.abbrev);
        out.writeObject(this.description);
        out.writeShort(this.citedBy);
        out.writeShort(this.authorTerms);
        out.writeShort(this.defineTerms);
        out.writeShort(this.geoTerms);
        out.writeDouble(this.seq);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.versionId = in.readLong();
        this.title = (String)in.readObject();
        this.abbrev = (String)in.readObject();
        this.description = (String)in.readObject();
        this.citedBy = in.readShort();
        this.authorTerms = in.readShort();
        this.defineTerms = in.readShort();
        this.geoTerms = in.readShort();
        this.seq = in.readDouble();
    }

}
