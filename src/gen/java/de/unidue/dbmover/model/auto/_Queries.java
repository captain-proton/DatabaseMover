package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Queries was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Queries extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> ASSOC_TYPE = Property.create("assocType", Long.class);
    public static final Property<Long> ASSOC_ID = Property.create("assocId", Long.class);
    public static final Property<Short> STAGE_ID = Property.create("stageId", Short.class);
    public static final Property<Double> SEQ = Property.create("seq", Double.class);
    public static final Property<LocalDateTime> DATE_POSTED = Property.create("datePosted", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_MODIFIED = Property.create("dateModified", LocalDateTime.class);
    public static final Property<Short> CLOSED = Property.create("closed", Short.class);
    public static final Property<Integer> QUERY_ID = Property.create("queryId", Integer.class);

    protected long assocType;
    protected long assocId;
    protected short stageId;
    protected double seq;
    protected LocalDateTime datePosted;
    protected LocalDateTime dateModified;
    protected short closed;
    protected Integer queryId;


    public void setAssocType(long assocType) {
        beforePropertyWrite("assocType", this.assocType, assocType);
        this.assocType = assocType;
    }

    public long getAssocType() {
        beforePropertyRead("assocType");
        return this.assocType;
    }

    public void setAssocId(long assocId) {
        beforePropertyWrite("assocId", this.assocId, assocId);
        this.assocId = assocId;
    }

    public long getAssocId() {
        beforePropertyRead("assocId");
        return this.assocId;
    }

    public void setStageId(short stageId) {
        beforePropertyWrite("stageId", this.stageId, stageId);
        this.stageId = stageId;
    }

    public short getStageId() {
        beforePropertyRead("stageId");
        return this.stageId;
    }

    public void setSeq(double seq) {
        beforePropertyWrite("seq", this.seq, seq);
        this.seq = seq;
    }

    public double getSeq() {
        beforePropertyRead("seq");
        return this.seq;
    }

    public void setDatePosted(LocalDateTime datePosted) {
        beforePropertyWrite("datePosted", this.datePosted, datePosted);
        this.datePosted = datePosted;
    }

    public LocalDateTime getDatePosted() {
        beforePropertyRead("datePosted");
        return this.datePosted;
    }

    public void setDateModified(LocalDateTime dateModified) {
        beforePropertyWrite("dateModified", this.dateModified, dateModified);
        this.dateModified = dateModified;
    }

    public LocalDateTime getDateModified() {
        beforePropertyRead("dateModified");
        return this.dateModified;
    }

    public void setClosed(short closed) {
        beforePropertyWrite("closed", this.closed, closed);
        this.closed = closed;
    }

    public short getClosed() {
        beforePropertyRead("closed");
        return this.closed;
    }

    public void setQueryId(Integer queryId) {
        beforePropertyWrite("queryId", this.queryId, queryId);
        this.queryId = queryId;
    }

    public Integer getQueryId() {
        beforePropertyRead("queryId");
        return this.queryId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "assocType":
                return this.assocType;
            case "assocId":
                return this.assocId;
            case "stageId":
                return this.stageId;
            case "seq":
                return this.seq;
            case "datePosted":
                return this.datePosted;
            case "dateModified":
                return this.dateModified;
            case "closed":
                return this.closed;
            case "queryId":
                return this.queryId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "assocType":
                this.assocType = val == null ? 0 : (long)val;
                break;
            case "assocId":
                this.assocId = val == null ? 0 : (long)val;
                break;
            case "stageId":
                this.stageId = val == null ? 0 : (short)val;
                break;
            case "seq":
                this.seq = val == null ? 0 : (double)val;
                break;
            case "datePosted":
                this.datePosted = (LocalDateTime)val;
                break;
            case "dateModified":
                this.dateModified = (LocalDateTime)val;
                break;
            case "closed":
                this.closed = val == null ? 0 : (short)val;
                break;
            case "queryId":
                this.queryId = (Integer)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.assocType);
        out.writeLong(this.assocId);
        out.writeShort(this.stageId);
        out.writeDouble(this.seq);
        out.writeObject(this.datePosted);
        out.writeObject(this.dateModified);
        out.writeShort(this.closed);
        out.writeObject(this.queryId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.assocType = in.readLong();
        this.assocId = in.readLong();
        this.stageId = in.readShort();
        this.seq = in.readDouble();
        this.datePosted = (LocalDateTime)in.readObject();
        this.dateModified = (LocalDateTime)in.readObject();
        this.closed = in.readShort();
        this.queryId = (Integer)in.readObject();
    }

}
