package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _IssueFiles was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _IssueFiles extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> ISSUE_ID = Property.create("issueId", Long.class);
    public static final Property<String> FILE_NAME = Property.create("fileName", String.class);
    public static final Property<String> FILE_TYPE = Property.create("fileType", String.class);
    public static final Property<Long> FILE_SIZE = Property.create("fileSize", Long.class);
    public static final Property<Long> CONTENT_TYPE = Property.create("contentType", Long.class);
    public static final Property<String> ORIGINAL_FILE_NAME = Property.create("originalFileName", String.class);
    public static final Property<LocalDateTime> DATE_UPLOADED = Property.create("dateUploaded", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_MODIFIED = Property.create("dateModified", LocalDateTime.class);
    public static final Property<Long> FILE_ID = Property.create("fileId", Long.class);

    protected long issueId;
    protected String fileName;
    protected String fileType;
    protected long fileSize;
    protected long contentType;
    protected String originalFileName;
    protected LocalDateTime dateUploaded;
    protected LocalDateTime dateModified;
    protected Long fileId;


    public void setIssueId(long issueId) {
        beforePropertyWrite("issueId", this.issueId, issueId);
        this.issueId = issueId;
    }

    public long getIssueId() {
        beforePropertyRead("issueId");
        return this.issueId;
    }

    public void setFileName(String fileName) {
        beforePropertyWrite("fileName", this.fileName, fileName);
        this.fileName = fileName;
    }

    public String getFileName() {
        beforePropertyRead("fileName");
        return this.fileName;
    }

    public void setFileType(String fileType) {
        beforePropertyWrite("fileType", this.fileType, fileType);
        this.fileType = fileType;
    }

    public String getFileType() {
        beforePropertyRead("fileType");
        return this.fileType;
    }

    public void setFileSize(long fileSize) {
        beforePropertyWrite("fileSize", this.fileSize, fileSize);
        this.fileSize = fileSize;
    }

    public long getFileSize() {
        beforePropertyRead("fileSize");
        return this.fileSize;
    }

    public void setContentType(long contentType) {
        beforePropertyWrite("contentType", this.contentType, contentType);
        this.contentType = contentType;
    }

    public long getContentType() {
        beforePropertyRead("contentType");
        return this.contentType;
    }

    public void setOriginalFileName(String originalFileName) {
        beforePropertyWrite("originalFileName", this.originalFileName, originalFileName);
        this.originalFileName = originalFileName;
    }

    public String getOriginalFileName() {
        beforePropertyRead("originalFileName");
        return this.originalFileName;
    }

    public void setDateUploaded(LocalDateTime dateUploaded) {
        beforePropertyWrite("dateUploaded", this.dateUploaded, dateUploaded);
        this.dateUploaded = dateUploaded;
    }

    public LocalDateTime getDateUploaded() {
        beforePropertyRead("dateUploaded");
        return this.dateUploaded;
    }

    public void setDateModified(LocalDateTime dateModified) {
        beforePropertyWrite("dateModified", this.dateModified, dateModified);
        this.dateModified = dateModified;
    }

    public LocalDateTime getDateModified() {
        beforePropertyRead("dateModified");
        return this.dateModified;
    }

    public void setFileId(Long fileId) {
        beforePropertyWrite("fileId", this.fileId, fileId);
        this.fileId = fileId;
    }

    public Long getFileId() {
        beforePropertyRead("fileId");
        return this.fileId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "issueId":
                return this.issueId;
            case "fileName":
                return this.fileName;
            case "fileType":
                return this.fileType;
            case "fileSize":
                return this.fileSize;
            case "contentType":
                return this.contentType;
            case "originalFileName":
                return this.originalFileName;
            case "dateUploaded":
                return this.dateUploaded;
            case "dateModified":
                return this.dateModified;
            case "fileId":
                return this.fileId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "issueId":
                this.issueId = val == null ? 0 : (long)val;
                break;
            case "fileName":
                this.fileName = (String)val;
                break;
            case "fileType":
                this.fileType = (String)val;
                break;
            case "fileSize":
                this.fileSize = val == null ? 0 : (long)val;
                break;
            case "contentType":
                this.contentType = val == null ? 0 : (long)val;
                break;
            case "originalFileName":
                this.originalFileName = (String)val;
                break;
            case "dateUploaded":
                this.dateUploaded = (LocalDateTime)val;
                break;
            case "dateModified":
                this.dateModified = (LocalDateTime)val;
                break;
            case "fileId":
                this.fileId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.issueId);
        out.writeObject(this.fileName);
        out.writeObject(this.fileType);
        out.writeLong(this.fileSize);
        out.writeLong(this.contentType);
        out.writeObject(this.originalFileName);
        out.writeObject(this.dateUploaded);
        out.writeObject(this.dateModified);
        out.writeObject(this.fileId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.issueId = in.readLong();
        this.fileName = (String)in.readObject();
        this.fileType = (String)in.readObject();
        this.fileSize = in.readLong();
        this.contentType = in.readLong();
        this.originalFileName = (String)in.readObject();
        this.dateUploaded = (LocalDateTime)in.readObject();
        this.dateModified = (LocalDateTime)in.readObject();
        this.fileId = (Long)in.readObject();
    }

}
