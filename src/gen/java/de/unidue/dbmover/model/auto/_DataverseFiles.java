package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _DataverseFiles was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _DataverseFiles extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String DVFILE_ID_PK_COLUMN = "dvfile_id";

    public static final Property<Long> SUPP_ID = Property.create("suppId", Long.class);
    public static final Property<Long> SUBMISSION_ID = Property.create("submissionId", Long.class);
    public static final Property<Long> STUDY_ID = Property.create("studyId", Long.class);
    public static final Property<String> CONTENT_SOURCE_URI = Property.create("contentSourceUri", String.class);

    protected long suppId;
    protected long submissionId;
    protected long studyId;
    protected String contentSourceUri;


    public void setSuppId(long suppId) {
        beforePropertyWrite("suppId", this.suppId, suppId);
        this.suppId = suppId;
    }

    public long getSuppId() {
        beforePropertyRead("suppId");
        return this.suppId;
    }

    public void setSubmissionId(long submissionId) {
        beforePropertyWrite("submissionId", this.submissionId, submissionId);
        this.submissionId = submissionId;
    }

    public long getSubmissionId() {
        beforePropertyRead("submissionId");
        return this.submissionId;
    }

    public void setStudyId(long studyId) {
        beforePropertyWrite("studyId", this.studyId, studyId);
        this.studyId = studyId;
    }

    public long getStudyId() {
        beforePropertyRead("studyId");
        return this.studyId;
    }

    public void setContentSourceUri(String contentSourceUri) {
        beforePropertyWrite("contentSourceUri", this.contentSourceUri, contentSourceUri);
        this.contentSourceUri = contentSourceUri;
    }

    public String getContentSourceUri() {
        beforePropertyRead("contentSourceUri");
        return this.contentSourceUri;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "suppId":
                return this.suppId;
            case "submissionId":
                return this.submissionId;
            case "studyId":
                return this.studyId;
            case "contentSourceUri":
                return this.contentSourceUri;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "suppId":
                this.suppId = val == null ? 0 : (long)val;
                break;
            case "submissionId":
                this.submissionId = val == null ? 0 : (long)val;
                break;
            case "studyId":
                this.studyId = val == null ? 0 : (long)val;
                break;
            case "contentSourceUri":
                this.contentSourceUri = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.suppId);
        out.writeLong(this.submissionId);
        out.writeLong(this.studyId);
        out.writeObject(this.contentSourceUri);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.suppId = in.readLong();
        this.submissionId = in.readLong();
        this.studyId = in.readLong();
        this.contentSourceUri = (String)in.readObject();
    }

}
