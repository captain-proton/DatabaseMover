package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _UserGroups was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _UserGroups extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String USER_GROUP_ID_PK_COLUMN = "user_group_id";

    public static final Property<Long> CONTEXT_ID = Property.create("contextId", Long.class);
    public static final Property<Long> ROLE_ID = Property.create("roleId", Long.class);
    public static final Property<Short> IS_DEFAULT = Property.create("isDefault", Short.class);
    public static final Property<Short> SHOW_TITLE = Property.create("showTitle", Short.class);
    public static final Property<Short> PERMIT_SELF_REGISTRATION = Property.create("permitSelfRegistration", Short.class);

    protected long contextId;
    protected long roleId;
    protected short isDefault;
    protected short showTitle;
    protected short permitSelfRegistration;


    public void setContextId(long contextId) {
        beforePropertyWrite("contextId", this.contextId, contextId);
        this.contextId = contextId;
    }

    public long getContextId() {
        beforePropertyRead("contextId");
        return this.contextId;
    }

    public void setRoleId(long roleId) {
        beforePropertyWrite("roleId", this.roleId, roleId);
        this.roleId = roleId;
    }

    public long getRoleId() {
        beforePropertyRead("roleId");
        return this.roleId;
    }

    public void setIsDefault(short isDefault) {
        beforePropertyWrite("isDefault", this.isDefault, isDefault);
        this.isDefault = isDefault;
    }

    public short getIsDefault() {
        beforePropertyRead("isDefault");
        return this.isDefault;
    }

    public void setShowTitle(short showTitle) {
        beforePropertyWrite("showTitle", this.showTitle, showTitle);
        this.showTitle = showTitle;
    }

    public short getShowTitle() {
        beforePropertyRead("showTitle");
        return this.showTitle;
    }

    public void setPermitSelfRegistration(short permitSelfRegistration) {
        beforePropertyWrite("permitSelfRegistration", this.permitSelfRegistration, permitSelfRegistration);
        this.permitSelfRegistration = permitSelfRegistration;
    }

    public short getPermitSelfRegistration() {
        beforePropertyRead("permitSelfRegistration");
        return this.permitSelfRegistration;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "contextId":
                return this.contextId;
            case "roleId":
                return this.roleId;
            case "isDefault":
                return this.isDefault;
            case "showTitle":
                return this.showTitle;
            case "permitSelfRegistration":
                return this.permitSelfRegistration;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "contextId":
                this.contextId = val == null ? 0 : (long)val;
                break;
            case "roleId":
                this.roleId = val == null ? 0 : (long)val;
                break;
            case "isDefault":
                this.isDefault = val == null ? 0 : (short)val;
                break;
            case "showTitle":
                this.showTitle = val == null ? 0 : (short)val;
                break;
            case "permitSelfRegistration":
                this.permitSelfRegistration = val == null ? 0 : (short)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.contextId);
        out.writeLong(this.roleId);
        out.writeShort(this.isDefault);
        out.writeShort(this.showTitle);
        out.writeShort(this.permitSelfRegistration);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.contextId = in.readLong();
        this.roleId = in.readLong();
        this.isDefault = in.readShort();
        this.showTitle = in.readShort();
        this.permitSelfRegistration = in.readShort();
    }

}
