package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _IssueGalleys was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _IssueGalleys extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<String> LOCALE = Property.create("locale", String.class);
    public static final Property<Long> ISSUE_ID = Property.create("issueId", Long.class);
    public static final Property<Long> FILE_ID = Property.create("fileId", Long.class);
    public static final Property<String> LABEL = Property.create("label", String.class);
    public static final Property<Double> SEQ = Property.create("seq", Double.class);
    public static final Property<Long> GALLEY_ID = Property.create("galleyId", Long.class);

    protected String locale;
    protected long issueId;
    protected long fileId;
    protected String label;
    protected double seq;
    protected Long galleyId;


    public void setLocale(String locale) {
        beforePropertyWrite("locale", this.locale, locale);
        this.locale = locale;
    }

    public String getLocale() {
        beforePropertyRead("locale");
        return this.locale;
    }

    public void setIssueId(long issueId) {
        beforePropertyWrite("issueId", this.issueId, issueId);
        this.issueId = issueId;
    }

    public long getIssueId() {
        beforePropertyRead("issueId");
        return this.issueId;
    }

    public void setFileId(long fileId) {
        beforePropertyWrite("fileId", this.fileId, fileId);
        this.fileId = fileId;
    }

    public long getFileId() {
        beforePropertyRead("fileId");
        return this.fileId;
    }

    public void setLabel(String label) {
        beforePropertyWrite("label", this.label, label);
        this.label = label;
    }

    public String getLabel() {
        beforePropertyRead("label");
        return this.label;
    }

    public void setSeq(double seq) {
        beforePropertyWrite("seq", this.seq, seq);
        this.seq = seq;
    }

    public double getSeq() {
        beforePropertyRead("seq");
        return this.seq;
    }

    public void setGalleyId(Long galleyId) {
        beforePropertyWrite("galleyId", this.galleyId, galleyId);
        this.galleyId = galleyId;
    }

    public Long getGalleyId() {
        beforePropertyRead("galleyId");
        return this.galleyId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "locale":
                return this.locale;
            case "issueId":
                return this.issueId;
            case "fileId":
                return this.fileId;
            case "label":
                return this.label;
            case "seq":
                return this.seq;
            case "galleyId":
                return this.galleyId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "locale":
                this.locale = (String)val;
                break;
            case "issueId":
                this.issueId = val == null ? 0 : (long)val;
                break;
            case "fileId":
                this.fileId = val == null ? 0 : (long)val;
                break;
            case "label":
                this.label = (String)val;
                break;
            case "seq":
                this.seq = val == null ? 0 : (double)val;
                break;
            case "galleyId":
                this.galleyId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.locale);
        out.writeLong(this.issueId);
        out.writeLong(this.fileId);
        out.writeObject(this.label);
        out.writeDouble(this.seq);
        out.writeObject(this.galleyId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.locale = (String)in.readObject();
        this.issueId = in.readLong();
        this.fileId = in.readLong();
        this.label = (String)in.readObject();
        this.seq = in.readDouble();
        this.galleyId = (Long)in.readObject();
    }

}
