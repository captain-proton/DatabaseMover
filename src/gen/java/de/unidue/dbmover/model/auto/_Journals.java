package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Journals was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Journals extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<String> PATH = Property.create("path", String.class);
    public static final Property<Double> SEQ = Property.create("seq", Double.class);
    public static final Property<String> PRIMARY_LOCALE = Property.create("primaryLocale", String.class);
    public static final Property<Short> ENABLED = Property.create("enabled", Short.class);
    public static final Property<Long> JOURNAL_ID = Property.create("journalId", Long.class);

    protected String path;
    protected double seq;
    protected String primaryLocale;
    protected short enabled;
    protected Long journalId;


    public void setPath(String path) {
        beforePropertyWrite("path", this.path, path);
        this.path = path;
    }

    public String getPath() {
        beforePropertyRead("path");
        return this.path;
    }

    public void setSeq(double seq) {
        beforePropertyWrite("seq", this.seq, seq);
        this.seq = seq;
    }

    public double getSeq() {
        beforePropertyRead("seq");
        return this.seq;
    }

    public void setPrimaryLocale(String primaryLocale) {
        beforePropertyWrite("primaryLocale", this.primaryLocale, primaryLocale);
        this.primaryLocale = primaryLocale;
    }

    public String getPrimaryLocale() {
        beforePropertyRead("primaryLocale");
        return this.primaryLocale;
    }

    public void setEnabled(short enabled) {
        beforePropertyWrite("enabled", this.enabled, enabled);
        this.enabled = enabled;
    }

    public short getEnabled() {
        beforePropertyRead("enabled");
        return this.enabled;
    }

    public void setJournalId(Long journalId) {
        beforePropertyWrite("journalId", this.journalId, journalId);
        this.journalId = journalId;
    }

    public Long getJournalId() {
        beforePropertyRead("journalId");
        return this.journalId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "path":
                return this.path;
            case "seq":
                return this.seq;
            case "primaryLocale":
                return this.primaryLocale;
            case "enabled":
                return this.enabled;
            case "journalId":
                return this.journalId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "path":
                this.path = (String)val;
                break;
            case "seq":
                this.seq = val == null ? 0 : (double)val;
                break;
            case "primaryLocale":
                this.primaryLocale = (String)val;
                break;
            case "enabled":
                this.enabled = val == null ? 0 : (short)val;
                break;
            case "journalId":
                this.journalId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.path);
        out.writeDouble(this.seq);
        out.writeObject(this.primaryLocale);
        out.writeShort(this.enabled);
        out.writeObject(this.journalId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.path = (String)in.readObject();
        this.seq = in.readDouble();
        this.primaryLocale = (String)in.readObject();
        this.enabled = in.readShort();
        this.journalId = (Long)in.readObject();
    }

}
