package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _MetadataDescriptions was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _MetadataDescriptions extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> ASSOC_TYPE = Property.create("assocType", Long.class);
    public static final Property<Long> ASSOC_ID = Property.create("assocId", Long.class);
    public static final Property<String> SCHEMA_NAMESPACE = Property.create("schemaNamespace", String.class);
    public static final Property<String> SCHEMA_NAME = Property.create("schemaName", String.class);
    public static final Property<String> DISPLAY_NAME = Property.create("displayName", String.class);
    public static final Property<Long> SEQ = Property.create("seq", Long.class);
    public static final Property<Long> METADATA_DESCRIPTION_ID = Property.create("metadataDescriptionId", Long.class);

    protected long assocType;
    protected long assocId;
    protected String schemaNamespace;
    protected String schemaName;
    protected String displayName;
    protected long seq;
    protected Long metadataDescriptionId;


    public void setAssocType(long assocType) {
        beforePropertyWrite("assocType", this.assocType, assocType);
        this.assocType = assocType;
    }

    public long getAssocType() {
        beforePropertyRead("assocType");
        return this.assocType;
    }

    public void setAssocId(long assocId) {
        beforePropertyWrite("assocId", this.assocId, assocId);
        this.assocId = assocId;
    }

    public long getAssocId() {
        beforePropertyRead("assocId");
        return this.assocId;
    }

    public void setSchemaNamespace(String schemaNamespace) {
        beforePropertyWrite("schemaNamespace", this.schemaNamespace, schemaNamespace);
        this.schemaNamespace = schemaNamespace;
    }

    public String getSchemaNamespace() {
        beforePropertyRead("schemaNamespace");
        return this.schemaNamespace;
    }

    public void setSchemaName(String schemaName) {
        beforePropertyWrite("schemaName", this.schemaName, schemaName);
        this.schemaName = schemaName;
    }

    public String getSchemaName() {
        beforePropertyRead("schemaName");
        return this.schemaName;
    }

    public void setDisplayName(String displayName) {
        beforePropertyWrite("displayName", this.displayName, displayName);
        this.displayName = displayName;
    }

    public String getDisplayName() {
        beforePropertyRead("displayName");
        return this.displayName;
    }

    public void setSeq(long seq) {
        beforePropertyWrite("seq", this.seq, seq);
        this.seq = seq;
    }

    public long getSeq() {
        beforePropertyRead("seq");
        return this.seq;
    }

    public void setMetadataDescriptionId(Long metadataDescriptionId) {
        beforePropertyWrite("metadataDescriptionId", this.metadataDescriptionId, metadataDescriptionId);
        this.metadataDescriptionId = metadataDescriptionId;
    }

    public Long getMetadataDescriptionId() {
        beforePropertyRead("metadataDescriptionId");
        return this.metadataDescriptionId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "assocType":
                return this.assocType;
            case "assocId":
                return this.assocId;
            case "schemaNamespace":
                return this.schemaNamespace;
            case "schemaName":
                return this.schemaName;
            case "displayName":
                return this.displayName;
            case "seq":
                return this.seq;
            case "metadataDescriptionId":
                return this.metadataDescriptionId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "assocType":
                this.assocType = val == null ? 0 : (long)val;
                break;
            case "assocId":
                this.assocId = val == null ? 0 : (long)val;
                break;
            case "schemaNamespace":
                this.schemaNamespace = (String)val;
                break;
            case "schemaName":
                this.schemaName = (String)val;
                break;
            case "displayName":
                this.displayName = (String)val;
                break;
            case "seq":
                this.seq = val == null ? 0 : (long)val;
                break;
            case "metadataDescriptionId":
                this.metadataDescriptionId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.assocType);
        out.writeLong(this.assocId);
        out.writeObject(this.schemaNamespace);
        out.writeObject(this.schemaName);
        out.writeObject(this.displayName);
        out.writeLong(this.seq);
        out.writeObject(this.metadataDescriptionId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.assocType = in.readLong();
        this.assocId = in.readLong();
        this.schemaNamespace = (String)in.readObject();
        this.schemaName = (String)in.readObject();
        this.displayName = (String)in.readObject();
        this.seq = in.readLong();
        this.metadataDescriptionId = (Long)in.readObject();
    }

}
