package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _ObjectForReviewPersons was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ObjectForReviewPersons extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String PERSON_ID_PK_COLUMN = "person_id";

    public static final Property<Double> SEQ = Property.create("seq", Double.class);
    public static final Property<String> ROLE = Property.create("role", String.class);
    public static final Property<String> FIRST_NAME = Property.create("firstName", String.class);
    public static final Property<String> MIDDLE_NAME = Property.create("middleName", String.class);
    public static final Property<String> LAST_NAME = Property.create("lastName", String.class);
    public static final Property<Long> ID = Property.create("id", Long.class);

    protected double seq;
    protected String role;
    protected String firstName;
    protected String middleName;
    protected String lastName;
    protected long id;


    public void setSeq(double seq) {
        beforePropertyWrite("seq", this.seq, seq);
        this.seq = seq;
    }

    public double getSeq() {
        beforePropertyRead("seq");
        return this.seq;
    }

    public void setRole(String role) {
        beforePropertyWrite("role", this.role, role);
        this.role = role;
    }

    public String getRole() {
        beforePropertyRead("role");
        return this.role;
    }

    public void setFirstName(String firstName) {
        beforePropertyWrite("firstName", this.firstName, firstName);
        this.firstName = firstName;
    }

    public String getFirstName() {
        beforePropertyRead("firstName");
        return this.firstName;
    }

    public void setMiddleName(String middleName) {
        beforePropertyWrite("middleName", this.middleName, middleName);
        this.middleName = middleName;
    }

    public String getMiddleName() {
        beforePropertyRead("middleName");
        return this.middleName;
    }

    public void setLastName(String lastName) {
        beforePropertyWrite("lastName", this.lastName, lastName);
        this.lastName = lastName;
    }

    public String getLastName() {
        beforePropertyRead("lastName");
        return this.lastName;
    }

    public void setId(long id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public long getId() {
        beforePropertyRead("id");
        return this.id;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "seq":
                return this.seq;
            case "role":
                return this.role;
            case "firstName":
                return this.firstName;
            case "middleName":
                return this.middleName;
            case "lastName":
                return this.lastName;
            case "id":
                return this.id;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "seq":
                this.seq = val == null ? 0 : (double)val;
                break;
            case "role":
                this.role = (String)val;
                break;
            case "firstName":
                this.firstName = (String)val;
                break;
            case "middleName":
                this.middleName = (String)val;
                break;
            case "lastName":
                this.lastName = (String)val;
                break;
            case "id":
                this.id = val == null ? 0 : (long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeDouble(this.seq);
        out.writeObject(this.role);
        out.writeObject(this.firstName);
        out.writeObject(this.middleName);
        out.writeObject(this.lastName);
        out.writeLong(this.id);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.seq = in.readDouble();
        this.role = (String)in.readObject();
        this.firstName = (String)in.readObject();
        this.middleName = (String)in.readObject();
        this.lastName = (String)in.readObject();
        this.id = in.readLong();
    }

}
