package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Captchas was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Captchas extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String CAPTCHA_ID_PK_COLUMN = "captcha_id";

    public static final Property<String> SESSION_ID = Property.create("sessionId", String.class);
    public static final Property<String> VALUE = Property.create("value", String.class);
    public static final Property<LocalDateTime> DATE_CREATED = Property.create("dateCreated", LocalDateTime.class);

    protected String sessionId;
    protected String value;
    protected LocalDateTime dateCreated;


    public void setSessionId(String sessionId) {
        beforePropertyWrite("sessionId", this.sessionId, sessionId);
        this.sessionId = sessionId;
    }

    public String getSessionId() {
        beforePropertyRead("sessionId");
        return this.sessionId;
    }

    public void setValue(String value) {
        beforePropertyWrite("value", this.value, value);
        this.value = value;
    }

    public String getValue() {
        beforePropertyRead("value");
        return this.value;
    }

    public void setDateCreated(LocalDateTime dateCreated) {
        beforePropertyWrite("dateCreated", this.dateCreated, dateCreated);
        this.dateCreated = dateCreated;
    }

    public LocalDateTime getDateCreated() {
        beforePropertyRead("dateCreated");
        return this.dateCreated;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "sessionId":
                return this.sessionId;
            case "value":
                return this.value;
            case "dateCreated":
                return this.dateCreated;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "sessionId":
                this.sessionId = (String)val;
                break;
            case "value":
                this.value = (String)val;
                break;
            case "dateCreated":
                this.dateCreated = (LocalDateTime)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.sessionId);
        out.writeObject(this.value);
        out.writeObject(this.dateCreated);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.sessionId = (String)in.readObject();
        this.value = (String)in.readObject();
        this.dateCreated = (LocalDateTime)in.readObject();
    }

}
