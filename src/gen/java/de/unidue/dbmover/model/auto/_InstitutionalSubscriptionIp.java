package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _InstitutionalSubscriptionIp was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _InstitutionalSubscriptionIp extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> SUBSCRIPTION_ID = Property.create("subscriptionId", Long.class);
    public static final Property<String> IP_STRING = Property.create("ipString", String.class);
    public static final Property<Long> IP_START = Property.create("ipStart", Long.class);
    public static final Property<Long> IP_END = Property.create("ipEnd", Long.class);
    public static final Property<Long> INSTITUTIONAL_SUBSCRIPTION_IP_ID = Property.create("institutionalSubscriptionIpId", Long.class);

    protected long subscriptionId;
    protected String ipString;
    protected long ipStart;
    protected Long ipEnd;
    protected Long institutionalSubscriptionIpId;


    public void setSubscriptionId(long subscriptionId) {
        beforePropertyWrite("subscriptionId", this.subscriptionId, subscriptionId);
        this.subscriptionId = subscriptionId;
    }

    public long getSubscriptionId() {
        beforePropertyRead("subscriptionId");
        return this.subscriptionId;
    }

    public void setIpString(String ipString) {
        beforePropertyWrite("ipString", this.ipString, ipString);
        this.ipString = ipString;
    }

    public String getIpString() {
        beforePropertyRead("ipString");
        return this.ipString;
    }

    public void setIpStart(long ipStart) {
        beforePropertyWrite("ipStart", this.ipStart, ipStart);
        this.ipStart = ipStart;
    }

    public long getIpStart() {
        beforePropertyRead("ipStart");
        return this.ipStart;
    }

    public void setIpEnd(long ipEnd) {
        beforePropertyWrite("ipEnd", this.ipEnd, ipEnd);
        this.ipEnd = ipEnd;
    }

    public long getIpEnd() {
        beforePropertyRead("ipEnd");
        if(this.ipEnd == null) {
            return 0;
        }
        return this.ipEnd;
    }

    public void setInstitutionalSubscriptionIpId(Long institutionalSubscriptionIpId) {
        beforePropertyWrite("institutionalSubscriptionIpId", this.institutionalSubscriptionIpId, institutionalSubscriptionIpId);
        this.institutionalSubscriptionIpId = institutionalSubscriptionIpId;
    }

    public Long getInstitutionalSubscriptionIpId() {
        beforePropertyRead("institutionalSubscriptionIpId");
        return this.institutionalSubscriptionIpId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "subscriptionId":
                return this.subscriptionId;
            case "ipString":
                return this.ipString;
            case "ipStart":
                return this.ipStart;
            case "ipEnd":
                return this.ipEnd;
            case "institutionalSubscriptionIpId":
                return this.institutionalSubscriptionIpId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "subscriptionId":
                this.subscriptionId = val == null ? 0 : (long)val;
                break;
            case "ipString":
                this.ipString = (String)val;
                break;
            case "ipStart":
                this.ipStart = val == null ? 0 : (long)val;
                break;
            case "ipEnd":
                this.ipEnd = (Long)val;
                break;
            case "institutionalSubscriptionIpId":
                this.institutionalSubscriptionIpId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.subscriptionId);
        out.writeObject(this.ipString);
        out.writeLong(this.ipStart);
        out.writeObject(this.ipEnd);
        out.writeObject(this.institutionalSubscriptionIpId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.subscriptionId = in.readLong();
        this.ipString = (String)in.readObject();
        this.ipStart = in.readLong();
        this.ipEnd = (Long)in.readObject();
        this.institutionalSubscriptionIpId = (Long)in.readObject();
    }

}
