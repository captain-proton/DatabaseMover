package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _ReviewFiles was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ReviewFiles extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String FILE_ID_PK_COLUMN = "file_id";
    public static final String REVIEW_ID_PK_COLUMN = "review_id";

    public static final Property<Long> REVIEW_ID = Property.create("reviewId", Long.class);
    public static final Property<Long> FILE_ID = Property.create("fileId", Long.class);

    protected long reviewId;
    protected long fileId;


    public void setReviewId(long reviewId) {
        beforePropertyWrite("reviewId", this.reviewId, reviewId);
        this.reviewId = reviewId;
    }

    public long getReviewId() {
        beforePropertyRead("reviewId");
        return this.reviewId;
    }

    public void setFileId(long fileId) {
        beforePropertyWrite("fileId", this.fileId, fileId);
        this.fileId = fileId;
    }

    public long getFileId() {
        beforePropertyRead("fileId");
        return this.fileId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "reviewId":
                return this.reviewId;
            case "fileId":
                return this.fileId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "reviewId":
                this.reviewId = val == null ? 0 : (long)val;
                break;
            case "fileId":
                this.fileId = val == null ? 0 : (long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.reviewId);
        out.writeLong(this.fileId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.reviewId = in.readLong();
        this.fileId = in.readLong();
    }

}
