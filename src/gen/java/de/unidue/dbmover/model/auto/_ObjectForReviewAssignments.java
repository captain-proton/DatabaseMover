package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _ObjectForReviewAssignments was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ObjectForReviewAssignments extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ASSIGNMENT_ID_PK_COLUMN = "assignment_id";

    public static final Property<Long> USER_ID = Property.create("userId", Long.class);
    public static final Property<Long> SUBMISSION_ID = Property.create("submissionId", Long.class);
    public static final Property<Short> STATUS = Property.create("status", Short.class);
    public static final Property<LocalDateTime> DATE_REQUESTED = Property.create("dateRequested", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_ASSIGNED = Property.create("dateAssigned", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_MAILED = Property.create("dateMailed", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_DUE = Property.create("dateDue", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_REMINDED_BEFORE = Property.create("dateRemindedBefore", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_REMINDED_AFTER = Property.create("dateRemindedAfter", LocalDateTime.class);
    public static final Property<String> NOTES = Property.create("notes", String.class);
    public static final Property<Long> ID = Property.create("id", Long.class);

    protected Long userId;
    protected Long submissionId;
    protected short status;
    protected LocalDateTime dateRequested;
    protected LocalDateTime dateAssigned;
    protected LocalDateTime dateMailed;
    protected LocalDateTime dateDue;
    protected LocalDateTime dateRemindedBefore;
    protected LocalDateTime dateRemindedAfter;
    protected String notes;
    protected long id;


    public void setUserId(long userId) {
        beforePropertyWrite("userId", this.userId, userId);
        this.userId = userId;
    }

    public long getUserId() {
        beforePropertyRead("userId");
        if(this.userId == null) {
            return 0;
        }
        return this.userId;
    }

    public void setSubmissionId(long submissionId) {
        beforePropertyWrite("submissionId", this.submissionId, submissionId);
        this.submissionId = submissionId;
    }

    public long getSubmissionId() {
        beforePropertyRead("submissionId");
        if(this.submissionId == null) {
            return 0;
        }
        return this.submissionId;
    }

    public void setStatus(short status) {
        beforePropertyWrite("status", this.status, status);
        this.status = status;
    }

    public short getStatus() {
        beforePropertyRead("status");
        return this.status;
    }

    public void setDateRequested(LocalDateTime dateRequested) {
        beforePropertyWrite("dateRequested", this.dateRequested, dateRequested);
        this.dateRequested = dateRequested;
    }

    public LocalDateTime getDateRequested() {
        beforePropertyRead("dateRequested");
        return this.dateRequested;
    }

    public void setDateAssigned(LocalDateTime dateAssigned) {
        beforePropertyWrite("dateAssigned", this.dateAssigned, dateAssigned);
        this.dateAssigned = dateAssigned;
    }

    public LocalDateTime getDateAssigned() {
        beforePropertyRead("dateAssigned");
        return this.dateAssigned;
    }

    public void setDateMailed(LocalDateTime dateMailed) {
        beforePropertyWrite("dateMailed", this.dateMailed, dateMailed);
        this.dateMailed = dateMailed;
    }

    public LocalDateTime getDateMailed() {
        beforePropertyRead("dateMailed");
        return this.dateMailed;
    }

    public void setDateDue(LocalDateTime dateDue) {
        beforePropertyWrite("dateDue", this.dateDue, dateDue);
        this.dateDue = dateDue;
    }

    public LocalDateTime getDateDue() {
        beforePropertyRead("dateDue");
        return this.dateDue;
    }

    public void setDateRemindedBefore(LocalDateTime dateRemindedBefore) {
        beforePropertyWrite("dateRemindedBefore", this.dateRemindedBefore, dateRemindedBefore);
        this.dateRemindedBefore = dateRemindedBefore;
    }

    public LocalDateTime getDateRemindedBefore() {
        beforePropertyRead("dateRemindedBefore");
        return this.dateRemindedBefore;
    }

    public void setDateRemindedAfter(LocalDateTime dateRemindedAfter) {
        beforePropertyWrite("dateRemindedAfter", this.dateRemindedAfter, dateRemindedAfter);
        this.dateRemindedAfter = dateRemindedAfter;
    }

    public LocalDateTime getDateRemindedAfter() {
        beforePropertyRead("dateRemindedAfter");
        return this.dateRemindedAfter;
    }

    public void setNotes(String notes) {
        beforePropertyWrite("notes", this.notes, notes);
        this.notes = notes;
    }

    public String getNotes() {
        beforePropertyRead("notes");
        return this.notes;
    }

    public void setId(long id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public long getId() {
        beforePropertyRead("id");
        return this.id;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "userId":
                return this.userId;
            case "submissionId":
                return this.submissionId;
            case "status":
                return this.status;
            case "dateRequested":
                return this.dateRequested;
            case "dateAssigned":
                return this.dateAssigned;
            case "dateMailed":
                return this.dateMailed;
            case "dateDue":
                return this.dateDue;
            case "dateRemindedBefore":
                return this.dateRemindedBefore;
            case "dateRemindedAfter":
                return this.dateRemindedAfter;
            case "notes":
                return this.notes;
            case "id":
                return this.id;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "userId":
                this.userId = (Long)val;
                break;
            case "submissionId":
                this.submissionId = (Long)val;
                break;
            case "status":
                this.status = val == null ? 0 : (short)val;
                break;
            case "dateRequested":
                this.dateRequested = (LocalDateTime)val;
                break;
            case "dateAssigned":
                this.dateAssigned = (LocalDateTime)val;
                break;
            case "dateMailed":
                this.dateMailed = (LocalDateTime)val;
                break;
            case "dateDue":
                this.dateDue = (LocalDateTime)val;
                break;
            case "dateRemindedBefore":
                this.dateRemindedBefore = (LocalDateTime)val;
                break;
            case "dateRemindedAfter":
                this.dateRemindedAfter = (LocalDateTime)val;
                break;
            case "notes":
                this.notes = (String)val;
                break;
            case "id":
                this.id = val == null ? 0 : (long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.userId);
        out.writeObject(this.submissionId);
        out.writeShort(this.status);
        out.writeObject(this.dateRequested);
        out.writeObject(this.dateAssigned);
        out.writeObject(this.dateMailed);
        out.writeObject(this.dateDue);
        out.writeObject(this.dateRemindedBefore);
        out.writeObject(this.dateRemindedAfter);
        out.writeObject(this.notes);
        out.writeLong(this.id);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.userId = (Long)in.readObject();
        this.submissionId = (Long)in.readObject();
        this.status = in.readShort();
        this.dateRequested = (LocalDateTime)in.readObject();
        this.dateAssigned = (LocalDateTime)in.readObject();
        this.dateMailed = (LocalDateTime)in.readObject();
        this.dateDue = (LocalDateTime)in.readObject();
        this.dateRemindedBefore = (LocalDateTime)in.readObject();
        this.dateRemindedAfter = (LocalDateTime)in.readObject();
        this.notes = (String)in.readObject();
        this.id = in.readLong();
    }

}
