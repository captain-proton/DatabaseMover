package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Comments was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Comments extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String COMMENT_ID_PK_COLUMN = "comment_id";

    public static final Property<Long> SUBMISSION_ID = Property.create("submissionId", Long.class);
    public static final Property<Long> PARENT_COMMENT_ID = Property.create("parentCommentId", Long.class);
    public static final Property<Integer> NUM_CHILDREN = Property.create("numChildren", Integer.class);
    public static final Property<Long> USER_ID = Property.create("userId", Long.class);
    public static final Property<String> POSTER_IP = Property.create("posterIp", String.class);
    public static final Property<String> POSTER_NAME = Property.create("posterName", String.class);
    public static final Property<String> POSTER_EMAIL = Property.create("posterEmail", String.class);
    public static final Property<String> TITLE = Property.create("title", String.class);
    public static final Property<String> BODY = Property.create("body", String.class);
    public static final Property<LocalDateTime> DATE_POSTED = Property.create("datePosted", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_MODIFIED = Property.create("dateModified", LocalDateTime.class);

    protected long submissionId;
    protected Long parentCommentId;
    protected int numChildren;
    protected Long userId;
    protected String posterIp;
    protected String posterName;
    protected String posterEmail;
    protected String title;
    protected String body;
    protected LocalDateTime datePosted;
    protected LocalDateTime dateModified;


    public void setSubmissionId(long submissionId) {
        beforePropertyWrite("submissionId", this.submissionId, submissionId);
        this.submissionId = submissionId;
    }

    public long getSubmissionId() {
        beforePropertyRead("submissionId");
        return this.submissionId;
    }

    public void setParentCommentId(long parentCommentId) {
        beforePropertyWrite("parentCommentId", this.parentCommentId, parentCommentId);
        this.parentCommentId = parentCommentId;
    }

    public long getParentCommentId() {
        beforePropertyRead("parentCommentId");
        if(this.parentCommentId == null) {
            return 0;
        }
        return this.parentCommentId;
    }

    public void setNumChildren(int numChildren) {
        beforePropertyWrite("numChildren", this.numChildren, numChildren);
        this.numChildren = numChildren;
    }

    public int getNumChildren() {
        beforePropertyRead("numChildren");
        return this.numChildren;
    }

    public void setUserId(long userId) {
        beforePropertyWrite("userId", this.userId, userId);
        this.userId = userId;
    }

    public long getUserId() {
        beforePropertyRead("userId");
        if(this.userId == null) {
            return 0;
        }
        return this.userId;
    }

    public void setPosterIp(String posterIp) {
        beforePropertyWrite("posterIp", this.posterIp, posterIp);
        this.posterIp = posterIp;
    }

    public String getPosterIp() {
        beforePropertyRead("posterIp");
        return this.posterIp;
    }

    public void setPosterName(String posterName) {
        beforePropertyWrite("posterName", this.posterName, posterName);
        this.posterName = posterName;
    }

    public String getPosterName() {
        beforePropertyRead("posterName");
        return this.posterName;
    }

    public void setPosterEmail(String posterEmail) {
        beforePropertyWrite("posterEmail", this.posterEmail, posterEmail);
        this.posterEmail = posterEmail;
    }

    public String getPosterEmail() {
        beforePropertyRead("posterEmail");
        return this.posterEmail;
    }

    public void setTitle(String title) {
        beforePropertyWrite("title", this.title, title);
        this.title = title;
    }

    public String getTitle() {
        beforePropertyRead("title");
        return this.title;
    }

    public void setBody(String body) {
        beforePropertyWrite("body", this.body, body);
        this.body = body;
    }

    public String getBody() {
        beforePropertyRead("body");
        return this.body;
    }

    public void setDatePosted(LocalDateTime datePosted) {
        beforePropertyWrite("datePosted", this.datePosted, datePosted);
        this.datePosted = datePosted;
    }

    public LocalDateTime getDatePosted() {
        beforePropertyRead("datePosted");
        return this.datePosted;
    }

    public void setDateModified(LocalDateTime dateModified) {
        beforePropertyWrite("dateModified", this.dateModified, dateModified);
        this.dateModified = dateModified;
    }

    public LocalDateTime getDateModified() {
        beforePropertyRead("dateModified");
        return this.dateModified;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "submissionId":
                return this.submissionId;
            case "parentCommentId":
                return this.parentCommentId;
            case "numChildren":
                return this.numChildren;
            case "userId":
                return this.userId;
            case "posterIp":
                return this.posterIp;
            case "posterName":
                return this.posterName;
            case "posterEmail":
                return this.posterEmail;
            case "title":
                return this.title;
            case "body":
                return this.body;
            case "datePosted":
                return this.datePosted;
            case "dateModified":
                return this.dateModified;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "submissionId":
                this.submissionId = val == null ? 0 : (long)val;
                break;
            case "parentCommentId":
                this.parentCommentId = (Long)val;
                break;
            case "numChildren":
                this.numChildren = val == null ? 0 : (int)val;
                break;
            case "userId":
                this.userId = (Long)val;
                break;
            case "posterIp":
                this.posterIp = (String)val;
                break;
            case "posterName":
                this.posterName = (String)val;
                break;
            case "posterEmail":
                this.posterEmail = (String)val;
                break;
            case "title":
                this.title = (String)val;
                break;
            case "body":
                this.body = (String)val;
                break;
            case "datePosted":
                this.datePosted = (LocalDateTime)val;
                break;
            case "dateModified":
                this.dateModified = (LocalDateTime)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.submissionId);
        out.writeObject(this.parentCommentId);
        out.writeInt(this.numChildren);
        out.writeObject(this.userId);
        out.writeObject(this.posterIp);
        out.writeObject(this.posterName);
        out.writeObject(this.posterEmail);
        out.writeObject(this.title);
        out.writeObject(this.body);
        out.writeObject(this.datePosted);
        out.writeObject(this.dateModified);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.submissionId = in.readLong();
        this.parentCommentId = (Long)in.readObject();
        this.numChildren = in.readInt();
        this.userId = (Long)in.readObject();
        this.posterIp = (String)in.readObject();
        this.posterName = (String)in.readObject();
        this.posterEmail = (String)in.readObject();
        this.title = (String)in.readObject();
        this.body = (String)in.readObject();
        this.datePosted = (LocalDateTime)in.readObject();
        this.dateModified = (LocalDateTime)in.readObject();
    }

}
