package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Versions was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Versions extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Integer> MAJOR = Property.create("major", Integer.class);
    public static final Property<Integer> MINOR = Property.create("minor", Integer.class);
    public static final Property<Integer> REVISION = Property.create("revision", Integer.class);
    public static final Property<Integer> BUILD = Property.create("build", Integer.class);
    public static final Property<LocalDateTime> DATE_INSTALLED = Property.create("dateInstalled", LocalDateTime.class);
    public static final Property<Short> CURRENT = Property.create("current", Short.class);
    public static final Property<String> PRODUCT_TYPE = Property.create("productType", String.class);
    public static final Property<String> PRODUCT = Property.create("product", String.class);
    public static final Property<String> PRODUCT_CLASS_NAME = Property.create("productClassName", String.class);
    public static final Property<Short> LAZY_LOAD = Property.create("lazyLoad", Short.class);
    public static final Property<Short> SITEWIDE = Property.create("sitewide", Short.class);

    protected int major;
    protected int minor;
    protected int revision;
    protected int build;
    protected LocalDateTime dateInstalled;
    protected short current;
    protected String productType;
    protected String product;
    protected String productClassName;
    protected short lazyLoad;
    protected short sitewide;


    public void setMajor(int major) {
        beforePropertyWrite("major", this.major, major);
        this.major = major;
    }

    public int getMajor() {
        beforePropertyRead("major");
        return this.major;
    }

    public void setMinor(int minor) {
        beforePropertyWrite("minor", this.minor, minor);
        this.minor = minor;
    }

    public int getMinor() {
        beforePropertyRead("minor");
        return this.minor;
    }

    public void setRevision(int revision) {
        beforePropertyWrite("revision", this.revision, revision);
        this.revision = revision;
    }

    public int getRevision() {
        beforePropertyRead("revision");
        return this.revision;
    }

    public void setBuild(int build) {
        beforePropertyWrite("build", this.build, build);
        this.build = build;
    }

    public int getBuild() {
        beforePropertyRead("build");
        return this.build;
    }

    public void setDateInstalled(LocalDateTime dateInstalled) {
        beforePropertyWrite("dateInstalled", this.dateInstalled, dateInstalled);
        this.dateInstalled = dateInstalled;
    }

    public LocalDateTime getDateInstalled() {
        beforePropertyRead("dateInstalled");
        return this.dateInstalled;
    }

    public void setCurrent(short current) {
        beforePropertyWrite("current", this.current, current);
        this.current = current;
    }

    public short getCurrent() {
        beforePropertyRead("current");
        return this.current;
    }

    public void setProductType(String productType) {
        beforePropertyWrite("productType", this.productType, productType);
        this.productType = productType;
    }

    public String getProductType() {
        beforePropertyRead("productType");
        return this.productType;
    }

    public void setProduct(String product) {
        beforePropertyWrite("product", this.product, product);
        this.product = product;
    }

    public String getProduct() {
        beforePropertyRead("product");
        return this.product;
    }

    public void setProductClassName(String productClassName) {
        beforePropertyWrite("productClassName", this.productClassName, productClassName);
        this.productClassName = productClassName;
    }

    public String getProductClassName() {
        beforePropertyRead("productClassName");
        return this.productClassName;
    }

    public void setLazyLoad(short lazyLoad) {
        beforePropertyWrite("lazyLoad", this.lazyLoad, lazyLoad);
        this.lazyLoad = lazyLoad;
    }

    public short getLazyLoad() {
        beforePropertyRead("lazyLoad");
        return this.lazyLoad;
    }

    public void setSitewide(short sitewide) {
        beforePropertyWrite("sitewide", this.sitewide, sitewide);
        this.sitewide = sitewide;
    }

    public short getSitewide() {
        beforePropertyRead("sitewide");
        return this.sitewide;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "major":
                return this.major;
            case "minor":
                return this.minor;
            case "revision":
                return this.revision;
            case "build":
                return this.build;
            case "dateInstalled":
                return this.dateInstalled;
            case "current":
                return this.current;
            case "productType":
                return this.productType;
            case "product":
                return this.product;
            case "productClassName":
                return this.productClassName;
            case "lazyLoad":
                return this.lazyLoad;
            case "sitewide":
                return this.sitewide;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "major":
                this.major = val == null ? 0 : (int)val;
                break;
            case "minor":
                this.minor = val == null ? 0 : (int)val;
                break;
            case "revision":
                this.revision = val == null ? 0 : (int)val;
                break;
            case "build":
                this.build = val == null ? 0 : (int)val;
                break;
            case "dateInstalled":
                this.dateInstalled = (LocalDateTime)val;
                break;
            case "current":
                this.current = val == null ? 0 : (short)val;
                break;
            case "productType":
                this.productType = (String)val;
                break;
            case "product":
                this.product = (String)val;
                break;
            case "productClassName":
                this.productClassName = (String)val;
                break;
            case "lazyLoad":
                this.lazyLoad = val == null ? 0 : (short)val;
                break;
            case "sitewide":
                this.sitewide = val == null ? 0 : (short)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeInt(this.major);
        out.writeInt(this.minor);
        out.writeInt(this.revision);
        out.writeInt(this.build);
        out.writeObject(this.dateInstalled);
        out.writeShort(this.current);
        out.writeObject(this.productType);
        out.writeObject(this.product);
        out.writeObject(this.productClassName);
        out.writeShort(this.lazyLoad);
        out.writeShort(this.sitewide);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.major = in.readInt();
        this.minor = in.readInt();
        this.revision = in.readInt();
        this.build = in.readInt();
        this.dateInstalled = (LocalDateTime)in.readObject();
        this.current = in.readShort();
        this.productType = (String)in.readObject();
        this.product = (String)in.readObject();
        this.productClassName = (String)in.readObject();
        this.lazyLoad = in.readShort();
        this.sitewide = in.readShort();
    }

}
