package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Roles was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Roles extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String JOURNAL_ID_PK_COLUMN = "journal_id";
    public static final String ROLE_ID_PK_COLUMN = "role_id";
    public static final String USER_ID_PK_COLUMN = "user_id";

    public static final Property<Long> JOURNAL_ID = Property.create("journalId", Long.class);
    public static final Property<Long> USER_ID = Property.create("userId", Long.class);
    public static final Property<Long> ROLE_ID = Property.create("roleId", Long.class);

    protected long journalId;
    protected long userId;
    protected long roleId;


    public void setJournalId(long journalId) {
        beforePropertyWrite("journalId", this.journalId, journalId);
        this.journalId = journalId;
    }

    public long getJournalId() {
        beforePropertyRead("journalId");
        return this.journalId;
    }

    public void setUserId(long userId) {
        beforePropertyWrite("userId", this.userId, userId);
        this.userId = userId;
    }

    public long getUserId() {
        beforePropertyRead("userId");
        return this.userId;
    }

    public void setRoleId(long roleId) {
        beforePropertyWrite("roleId", this.roleId, roleId);
        this.roleId = roleId;
    }

    public long getRoleId() {
        beforePropertyRead("roleId");
        return this.roleId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "journalId":
                return this.journalId;
            case "userId":
                return this.userId;
            case "roleId":
                return this.roleId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "journalId":
                this.journalId = val == null ? 0 : (long)val;
                break;
            case "userId":
                this.userId = val == null ? 0 : (long)val;
                break;
            case "roleId":
                this.roleId = val == null ? 0 : (long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.journalId);
        out.writeLong(this.userId);
        out.writeLong(this.roleId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.journalId = in.readLong();
        this.userId = in.readLong();
        this.roleId = in.readLong();
    }

}
