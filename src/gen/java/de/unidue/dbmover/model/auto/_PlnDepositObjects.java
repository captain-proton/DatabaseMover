package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _PlnDepositObjects was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PlnDepositObjects extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> JOURNAL_ID = Property.create("journalId", Long.class);
    public static final Property<Long> OBJECT_IDENTIFIER = Property.create("objectIdentifier", Long.class);
    public static final Property<String> OBJECT_TYPE = Property.create("objectType", String.class);
    public static final Property<Long> DEPOSIT_ID = Property.create("depositId", Long.class);
    public static final Property<LocalDateTime> DATE_CREATED = Property.create("dateCreated", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_MODIFIED = Property.create("dateModified", LocalDateTime.class);
    public static final Property<Integer> DEPOSIT_OBJECT_ID = Property.create("depositObjectId", Integer.class);

    protected long journalId;
    protected long objectIdentifier;
    protected String objectType;
    protected Long depositId;
    protected LocalDateTime dateCreated;
    protected LocalDateTime dateModified;
    protected Integer depositObjectId;


    public void setJournalId(long journalId) {
        beforePropertyWrite("journalId", this.journalId, journalId);
        this.journalId = journalId;
    }

    public long getJournalId() {
        beforePropertyRead("journalId");
        return this.journalId;
    }

    public void setObjectIdentifier(long objectIdentifier) {
        beforePropertyWrite("objectIdentifier", this.objectIdentifier, objectIdentifier);
        this.objectIdentifier = objectIdentifier;
    }

    public long getObjectIdentifier() {
        beforePropertyRead("objectIdentifier");
        return this.objectIdentifier;
    }

    public void setObjectType(String objectType) {
        beforePropertyWrite("objectType", this.objectType, objectType);
        this.objectType = objectType;
    }

    public String getObjectType() {
        beforePropertyRead("objectType");
        return this.objectType;
    }

    public void setDepositId(long depositId) {
        beforePropertyWrite("depositId", this.depositId, depositId);
        this.depositId = depositId;
    }

    public long getDepositId() {
        beforePropertyRead("depositId");
        if(this.depositId == null) {
            return 0;
        }
        return this.depositId;
    }

    public void setDateCreated(LocalDateTime dateCreated) {
        beforePropertyWrite("dateCreated", this.dateCreated, dateCreated);
        this.dateCreated = dateCreated;
    }

    public LocalDateTime getDateCreated() {
        beforePropertyRead("dateCreated");
        return this.dateCreated;
    }

    public void setDateModified(LocalDateTime dateModified) {
        beforePropertyWrite("dateModified", this.dateModified, dateModified);
        this.dateModified = dateModified;
    }

    public LocalDateTime getDateModified() {
        beforePropertyRead("dateModified");
        return this.dateModified;
    }

    public void setDepositObjectId(Integer depositObjectId) {
        beforePropertyWrite("depositObjectId", this.depositObjectId, depositObjectId);
        this.depositObjectId = depositObjectId;
    }

    public Integer getDepositObjectId() {
        beforePropertyRead("depositObjectId");
        return this.depositObjectId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "journalId":
                return this.journalId;
            case "objectIdentifier":
                return this.objectIdentifier;
            case "objectType":
                return this.objectType;
            case "depositId":
                return this.depositId;
            case "dateCreated":
                return this.dateCreated;
            case "dateModified":
                return this.dateModified;
            case "depositObjectId":
                return this.depositObjectId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "journalId":
                this.journalId = val == null ? 0 : (long)val;
                break;
            case "objectIdentifier":
                this.objectIdentifier = val == null ? 0 : (long)val;
                break;
            case "objectType":
                this.objectType = (String)val;
                break;
            case "depositId":
                this.depositId = (Long)val;
                break;
            case "dateCreated":
                this.dateCreated = (LocalDateTime)val;
                break;
            case "dateModified":
                this.dateModified = (LocalDateTime)val;
                break;
            case "depositObjectId":
                this.depositObjectId = (Integer)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.journalId);
        out.writeLong(this.objectIdentifier);
        out.writeObject(this.objectType);
        out.writeObject(this.depositId);
        out.writeObject(this.dateCreated);
        out.writeObject(this.dateModified);
        out.writeObject(this.depositObjectId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.journalId = in.readLong();
        this.objectIdentifier = in.readLong();
        this.objectType = (String)in.readObject();
        this.depositId = (Long)in.readObject();
        this.dateCreated = (LocalDateTime)in.readObject();
        this.dateModified = (LocalDateTime)in.readObject();
        this.depositObjectId = (Integer)in.readObject();
    }

}
