package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _ReviewObjectMetadata was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ReviewObjectMetadata extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> REVIEW_OBJECT_TYPE_ID = Property.create("reviewObjectTypeId", Long.class);
    public static final Property<Double> SEQ = Property.create("seq", Double.class);
    public static final Property<Long> METADATA_TYPE = Property.create("metadataType", Long.class);
    public static final Property<Short> REQUIRED = Property.create("required", Short.class);
    public static final Property<Short> DISPLAY = Property.create("display", Short.class);
    public static final Property<String> METADATA_KEY = Property.create("metadataKey", String.class);
    public static final Property<Integer> METADATA_ID = Property.create("metadataId", Integer.class);

    protected long reviewObjectTypeId;
    protected Double seq;
    protected Long metadataType;
    protected Short required;
    protected Short display;
    protected String metadataKey;
    protected Integer metadataId;


    public void setReviewObjectTypeId(long reviewObjectTypeId) {
        beforePropertyWrite("reviewObjectTypeId", this.reviewObjectTypeId, reviewObjectTypeId);
        this.reviewObjectTypeId = reviewObjectTypeId;
    }

    public long getReviewObjectTypeId() {
        beforePropertyRead("reviewObjectTypeId");
        return this.reviewObjectTypeId;
    }

    public void setSeq(double seq) {
        beforePropertyWrite("seq", this.seq, seq);
        this.seq = seq;
    }

    public double getSeq() {
        beforePropertyRead("seq");
        if(this.seq == null) {
            return 0;
        }
        return this.seq;
    }

    public void setMetadataType(long metadataType) {
        beforePropertyWrite("metadataType", this.metadataType, metadataType);
        this.metadataType = metadataType;
    }

    public long getMetadataType() {
        beforePropertyRead("metadataType");
        if(this.metadataType == null) {
            return 0;
        }
        return this.metadataType;
    }

    public void setRequired(short required) {
        beforePropertyWrite("required", this.required, required);
        this.required = required;
    }

    public short getRequired() {
        beforePropertyRead("required");
        if(this.required == null) {
            return 0;
        }
        return this.required;
    }

    public void setDisplay(short display) {
        beforePropertyWrite("display", this.display, display);
        this.display = display;
    }

    public short getDisplay() {
        beforePropertyRead("display");
        if(this.display == null) {
            return 0;
        }
        return this.display;
    }

    public void setMetadataKey(String metadataKey) {
        beforePropertyWrite("metadataKey", this.metadataKey, metadataKey);
        this.metadataKey = metadataKey;
    }

    public String getMetadataKey() {
        beforePropertyRead("metadataKey");
        return this.metadataKey;
    }

    public void setMetadataId(Integer metadataId) {
        beforePropertyWrite("metadataId", this.metadataId, metadataId);
        this.metadataId = metadataId;
    }

    public Integer getMetadataId() {
        beforePropertyRead("metadataId");
        return this.metadataId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "reviewObjectTypeId":
                return this.reviewObjectTypeId;
            case "seq":
                return this.seq;
            case "metadataType":
                return this.metadataType;
            case "required":
                return this.required;
            case "display":
                return this.display;
            case "metadataKey":
                return this.metadataKey;
            case "metadataId":
                return this.metadataId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "reviewObjectTypeId":
                this.reviewObjectTypeId = val == null ? 0 : (long)val;
                break;
            case "seq":
                this.seq = (Double)val;
                break;
            case "metadataType":
                this.metadataType = (Long)val;
                break;
            case "required":
                this.required = (Short)val;
                break;
            case "display":
                this.display = (Short)val;
                break;
            case "metadataKey":
                this.metadataKey = (String)val;
                break;
            case "metadataId":
                this.metadataId = (Integer)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.reviewObjectTypeId);
        out.writeObject(this.seq);
        out.writeObject(this.metadataType);
        out.writeObject(this.required);
        out.writeObject(this.display);
        out.writeObject(this.metadataKey);
        out.writeObject(this.metadataId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.reviewObjectTypeId = in.readLong();
        this.seq = (Double)in.readObject();
        this.metadataType = (Long)in.readObject();
        this.required = (Short)in.readObject();
        this.display = (Short)in.readObject();
        this.metadataKey = (String)in.readObject();
        this.metadataId = (Integer)in.readObject();
    }

}
