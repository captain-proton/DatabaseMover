package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _UsageStatsTemporaryRecords was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _UsageStatsTemporaryRecords extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> ASSOC_ID = Property.create("assocId", Long.class);
    public static final Property<Long> ASSOC_TYPE = Property.create("assocType", Long.class);
    public static final Property<Long> DAY = Property.create("day", Long.class);
    public static final Property<Long> METRIC = Property.create("metric", Long.class);
    public static final Property<String> COUNTRY_ID = Property.create("countryId", String.class);
    public static final Property<String> REGION = Property.create("region", String.class);
    public static final Property<String> CITY = Property.create("city", String.class);
    public static final Property<String> LOAD_ID = Property.create("loadId", String.class);
    public static final Property<Short> FILE_TYPE = Property.create("fileType", Short.class);
    public static final Property<Long> ENTRY_TIME = Property.create("entryTime", Long.class);

    protected long assocId;
    protected long assocType;
    protected long day;
    protected long metric;
    protected String countryId;
    protected String region;
    protected String city;
    protected String loadId;
    protected Short fileType;
    protected long entryTime;


    public void setAssocId(long assocId) {
        beforePropertyWrite("assocId", this.assocId, assocId);
        this.assocId = assocId;
    }

    public long getAssocId() {
        beforePropertyRead("assocId");
        return this.assocId;
    }

    public void setAssocType(long assocType) {
        beforePropertyWrite("assocType", this.assocType, assocType);
        this.assocType = assocType;
    }

    public long getAssocType() {
        beforePropertyRead("assocType");
        return this.assocType;
    }

    public void setDay(long day) {
        beforePropertyWrite("day", this.day, day);
        this.day = day;
    }

    public long getDay() {
        beforePropertyRead("day");
        return this.day;
    }

    public void setMetric(long metric) {
        beforePropertyWrite("metric", this.metric, metric);
        this.metric = metric;
    }

    public long getMetric() {
        beforePropertyRead("metric");
        return this.metric;
    }

    public void setCountryId(String countryId) {
        beforePropertyWrite("countryId", this.countryId, countryId);
        this.countryId = countryId;
    }

    public String getCountryId() {
        beforePropertyRead("countryId");
        return this.countryId;
    }

    public void setRegion(String region) {
        beforePropertyWrite("region", this.region, region);
        this.region = region;
    }

    public String getRegion() {
        beforePropertyRead("region");
        return this.region;
    }

    public void setCity(String city) {
        beforePropertyWrite("city", this.city, city);
        this.city = city;
    }

    public String getCity() {
        beforePropertyRead("city");
        return this.city;
    }

    public void setLoadId(String loadId) {
        beforePropertyWrite("loadId", this.loadId, loadId);
        this.loadId = loadId;
    }

    public String getLoadId() {
        beforePropertyRead("loadId");
        return this.loadId;
    }

    public void setFileType(short fileType) {
        beforePropertyWrite("fileType", this.fileType, fileType);
        this.fileType = fileType;
    }

    public short getFileType() {
        beforePropertyRead("fileType");
        if(this.fileType == null) {
            return 0;
        }
        return this.fileType;
    }

    public void setEntryTime(long entryTime) {
        beforePropertyWrite("entryTime", this.entryTime, entryTime);
        this.entryTime = entryTime;
    }

    public long getEntryTime() {
        beforePropertyRead("entryTime");
        return this.entryTime;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "assocId":
                return this.assocId;
            case "assocType":
                return this.assocType;
            case "day":
                return this.day;
            case "metric":
                return this.metric;
            case "countryId":
                return this.countryId;
            case "region":
                return this.region;
            case "city":
                return this.city;
            case "loadId":
                return this.loadId;
            case "fileType":
                return this.fileType;
            case "entryTime":
                return this.entryTime;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "assocId":
                this.assocId = val == null ? 0 : (long)val;
                break;
            case "assocType":
                this.assocType = val == null ? 0 : (long)val;
                break;
            case "day":
                this.day = val == null ? 0 : (long)val;
                break;
            case "metric":
                this.metric = val == null ? 0 : (long)val;
                break;
            case "countryId":
                this.countryId = (String)val;
                break;
            case "region":
                this.region = (String)val;
                break;
            case "city":
                this.city = (String)val;
                break;
            case "loadId":
                this.loadId = (String)val;
                break;
            case "fileType":
                this.fileType = (Short)val;
                break;
            case "entryTime":
                this.entryTime = val == null ? 0 : (long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.assocId);
        out.writeLong(this.assocType);
        out.writeLong(this.day);
        out.writeLong(this.metric);
        out.writeObject(this.countryId);
        out.writeObject(this.region);
        out.writeObject(this.city);
        out.writeObject(this.loadId);
        out.writeObject(this.fileType);
        out.writeLong(this.entryTime);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.assocId = in.readLong();
        this.assocType = in.readLong();
        this.day = in.readLong();
        this.metric = in.readLong();
        this.countryId = (String)in.readObject();
        this.region = (String)in.readObject();
        this.city = (String)in.readObject();
        this.loadId = (String)in.readObject();
        this.fileType = (Short)in.readObject();
        this.entryTime = in.readLong();
    }

}
