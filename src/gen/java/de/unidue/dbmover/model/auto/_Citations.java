package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Citations was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Citations extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> ASSOC_TYPE = Property.create("assocType", Long.class);
    public static final Property<Long> ASSOC_ID = Property.create("assocId", Long.class);
    public static final Property<Long> CITATION_STATE = Property.create("citationState", Long.class);
    public static final Property<String> RAW_CITATION = Property.create("rawCitation", String.class);
    public static final Property<Long> SEQ = Property.create("seq", Long.class);
    public static final Property<String> LOCK_ID = Property.create("lockId", String.class);
    public static final Property<Long> CITATION_ID = Property.create("citationId", Long.class);

    protected long assocType;
    protected long assocId;
    protected long citationState;
    protected String rawCitation;
    protected long seq;
    protected String lockId;
    protected Long citationId;


    public void setAssocType(long assocType) {
        beforePropertyWrite("assocType", this.assocType, assocType);
        this.assocType = assocType;
    }

    public long getAssocType() {
        beforePropertyRead("assocType");
        return this.assocType;
    }

    public void setAssocId(long assocId) {
        beforePropertyWrite("assocId", this.assocId, assocId);
        this.assocId = assocId;
    }

    public long getAssocId() {
        beforePropertyRead("assocId");
        return this.assocId;
    }

    public void setCitationState(long citationState) {
        beforePropertyWrite("citationState", this.citationState, citationState);
        this.citationState = citationState;
    }

    public long getCitationState() {
        beforePropertyRead("citationState");
        return this.citationState;
    }

    public void setRawCitation(String rawCitation) {
        beforePropertyWrite("rawCitation", this.rawCitation, rawCitation);
        this.rawCitation = rawCitation;
    }

    public String getRawCitation() {
        beforePropertyRead("rawCitation");
        return this.rawCitation;
    }

    public void setSeq(long seq) {
        beforePropertyWrite("seq", this.seq, seq);
        this.seq = seq;
    }

    public long getSeq() {
        beforePropertyRead("seq");
        return this.seq;
    }

    public void setLockId(String lockId) {
        beforePropertyWrite("lockId", this.lockId, lockId);
        this.lockId = lockId;
    }

    public String getLockId() {
        beforePropertyRead("lockId");
        return this.lockId;
    }

    public void setCitationId(Long citationId) {
        beforePropertyWrite("citationId", this.citationId, citationId);
        this.citationId = citationId;
    }

    public Long getCitationId() {
        beforePropertyRead("citationId");
        return this.citationId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "assocType":
                return this.assocType;
            case "assocId":
                return this.assocId;
            case "citationState":
                return this.citationState;
            case "rawCitation":
                return this.rawCitation;
            case "seq":
                return this.seq;
            case "lockId":
                return this.lockId;
            case "citationId":
                return this.citationId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "assocType":
                this.assocType = val == null ? 0 : (long)val;
                break;
            case "assocId":
                this.assocId = val == null ? 0 : (long)val;
                break;
            case "citationState":
                this.citationState = val == null ? 0 : (long)val;
                break;
            case "rawCitation":
                this.rawCitation = (String)val;
                break;
            case "seq":
                this.seq = val == null ? 0 : (long)val;
                break;
            case "lockId":
                this.lockId = (String)val;
                break;
            case "citationId":
                this.citationId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.assocType);
        out.writeLong(this.assocId);
        out.writeLong(this.citationState);
        out.writeObject(this.rawCitation);
        out.writeLong(this.seq);
        out.writeObject(this.lockId);
        out.writeObject(this.citationId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.assocType = in.readLong();
        this.assocId = in.readLong();
        this.citationState = in.readLong();
        this.rawCitation = (String)in.readObject();
        this.seq = in.readLong();
        this.lockId = (String)in.readObject();
        this.citationId = (Long)in.readObject();
    }

}
