package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _AuthSources was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _AuthSources extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<String> TITLE = Property.create("title", String.class);
    public static final Property<String> PLUGIN = Property.create("plugin", String.class);
    public static final Property<Short> AUTH_DEFAULT = Property.create("authDefault", Short.class);
    public static final Property<String> SETTINGS = Property.create("settings", String.class);
    public static final Property<Long> AUTH_ID = Property.create("authId", Long.class);

    protected String title;
    protected String plugin;
    protected short authDefault;
    protected String settings;
    protected Long authId;


    public void setTitle(String title) {
        beforePropertyWrite("title", this.title, title);
        this.title = title;
    }

    public String getTitle() {
        beforePropertyRead("title");
        return this.title;
    }

    public void setPlugin(String plugin) {
        beforePropertyWrite("plugin", this.plugin, plugin);
        this.plugin = plugin;
    }

    public String getPlugin() {
        beforePropertyRead("plugin");
        return this.plugin;
    }

    public void setAuthDefault(short authDefault) {
        beforePropertyWrite("authDefault", this.authDefault, authDefault);
        this.authDefault = authDefault;
    }

    public short getAuthDefault() {
        beforePropertyRead("authDefault");
        return this.authDefault;
    }

    public void setSettings(String settings) {
        beforePropertyWrite("settings", this.settings, settings);
        this.settings = settings;
    }

    public String getSettings() {
        beforePropertyRead("settings");
        return this.settings;
    }

    public void setAuthId(Long authId) {
        beforePropertyWrite("authId", this.authId, authId);
        this.authId = authId;
    }

    public Long getAuthId() {
        beforePropertyRead("authId");
        return this.authId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "title":
                return this.title;
            case "plugin":
                return this.plugin;
            case "authDefault":
                return this.authDefault;
            case "settings":
                return this.settings;
            case "authId":
                return this.authId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "title":
                this.title = (String)val;
                break;
            case "plugin":
                this.plugin = (String)val;
                break;
            case "authDefault":
                this.authDefault = val == null ? 0 : (short)val;
                break;
            case "settings":
                this.settings = (String)val;
                break;
            case "authId":
                this.authId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.title);
        out.writeObject(this.plugin);
        out.writeShort(this.authDefault);
        out.writeObject(this.settings);
        out.writeObject(this.authId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.title = (String)in.readObject();
        this.plugin = (String)in.readObject();
        this.authDefault = in.readShort();
        this.settings = (String)in.readObject();
        this.authId = (Long)in.readObject();
    }

}
