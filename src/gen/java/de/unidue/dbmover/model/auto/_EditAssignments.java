package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _EditAssignments was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _EditAssignments extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String EDIT_ID_PK_COLUMN = "edit_id";

    public static final Property<Long> ARTICLE_ID = Property.create("articleId", Long.class);
    public static final Property<Long> EDITOR_ID = Property.create("editorId", Long.class);
    public static final Property<Short> CAN_EDIT = Property.create("canEdit", Short.class);
    public static final Property<Short> CAN_REVIEW = Property.create("canReview", Short.class);
    public static final Property<LocalDateTime> DATE_ASSIGNED = Property.create("dateAssigned", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_NOTIFIED = Property.create("dateNotified", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_UNDERWAY = Property.create("dateUnderway", LocalDateTime.class);

    protected long articleId;
    protected long editorId;
    protected short canEdit;
    protected short canReview;
    protected LocalDateTime dateAssigned;
    protected LocalDateTime dateNotified;
    protected LocalDateTime dateUnderway;


    public void setArticleId(long articleId) {
        beforePropertyWrite("articleId", this.articleId, articleId);
        this.articleId = articleId;
    }

    public long getArticleId() {
        beforePropertyRead("articleId");
        return this.articleId;
    }

    public void setEditorId(long editorId) {
        beforePropertyWrite("editorId", this.editorId, editorId);
        this.editorId = editorId;
    }

    public long getEditorId() {
        beforePropertyRead("editorId");
        return this.editorId;
    }

    public void setCanEdit(short canEdit) {
        beforePropertyWrite("canEdit", this.canEdit, canEdit);
        this.canEdit = canEdit;
    }

    public short getCanEdit() {
        beforePropertyRead("canEdit");
        return this.canEdit;
    }

    public void setCanReview(short canReview) {
        beforePropertyWrite("canReview", this.canReview, canReview);
        this.canReview = canReview;
    }

    public short getCanReview() {
        beforePropertyRead("canReview");
        return this.canReview;
    }

    public void setDateAssigned(LocalDateTime dateAssigned) {
        beforePropertyWrite("dateAssigned", this.dateAssigned, dateAssigned);
        this.dateAssigned = dateAssigned;
    }

    public LocalDateTime getDateAssigned() {
        beforePropertyRead("dateAssigned");
        return this.dateAssigned;
    }

    public void setDateNotified(LocalDateTime dateNotified) {
        beforePropertyWrite("dateNotified", this.dateNotified, dateNotified);
        this.dateNotified = dateNotified;
    }

    public LocalDateTime getDateNotified() {
        beforePropertyRead("dateNotified");
        return this.dateNotified;
    }

    public void setDateUnderway(LocalDateTime dateUnderway) {
        beforePropertyWrite("dateUnderway", this.dateUnderway, dateUnderway);
        this.dateUnderway = dateUnderway;
    }

    public LocalDateTime getDateUnderway() {
        beforePropertyRead("dateUnderway");
        return this.dateUnderway;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "articleId":
                return this.articleId;
            case "editorId":
                return this.editorId;
            case "canEdit":
                return this.canEdit;
            case "canReview":
                return this.canReview;
            case "dateAssigned":
                return this.dateAssigned;
            case "dateNotified":
                return this.dateNotified;
            case "dateUnderway":
                return this.dateUnderway;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "articleId":
                this.articleId = val == null ? 0 : (long)val;
                break;
            case "editorId":
                this.editorId = val == null ? 0 : (long)val;
                break;
            case "canEdit":
                this.canEdit = val == null ? 0 : (short)val;
                break;
            case "canReview":
                this.canReview = val == null ? 0 : (short)val;
                break;
            case "dateAssigned":
                this.dateAssigned = (LocalDateTime)val;
                break;
            case "dateNotified":
                this.dateNotified = (LocalDateTime)val;
                break;
            case "dateUnderway":
                this.dateUnderway = (LocalDateTime)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.articleId);
        out.writeLong(this.editorId);
        out.writeShort(this.canEdit);
        out.writeShort(this.canReview);
        out.writeObject(this.dateAssigned);
        out.writeObject(this.dateNotified);
        out.writeObject(this.dateUnderway);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.articleId = in.readLong();
        this.editorId = in.readLong();
        this.canEdit = in.readShort();
        this.canReview = in.readShort();
        this.dateAssigned = (LocalDateTime)in.readObject();
        this.dateNotified = (LocalDateTime)in.readObject();
        this.dateUnderway = (LocalDateTime)in.readObject();
    }

}
