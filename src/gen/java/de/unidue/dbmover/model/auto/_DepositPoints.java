package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _DepositPoints was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _DepositPoints extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> CONTEXT_ID = Property.create("contextId", Long.class);
    public static final Property<String> URL = Property.create("url", String.class);
    public static final Property<Double> SEQ = Property.create("seq", Double.class);
    public static final Property<Short> TYPE = Property.create("type", Short.class);
    public static final Property<String> SWORD_USERNAME = Property.create("swordUsername", String.class);
    public static final Property<String> SWORD_PASSWORD = Property.create("swordPassword", String.class);
    public static final Property<Integer> DEPOSIT_POINT_ID = Property.create("depositPointId", Integer.class);

    protected long contextId;
    protected String url;
    protected double seq;
    protected short type;
    protected String swordUsername;
    protected String swordPassword;
    protected Integer depositPointId;


    public void setContextId(long contextId) {
        beforePropertyWrite("contextId", this.contextId, contextId);
        this.contextId = contextId;
    }

    public long getContextId() {
        beforePropertyRead("contextId");
        return this.contextId;
    }

    public void setUrl(String url) {
        beforePropertyWrite("url", this.url, url);
        this.url = url;
    }

    public String getUrl() {
        beforePropertyRead("url");
        return this.url;
    }

    public void setSeq(double seq) {
        beforePropertyWrite("seq", this.seq, seq);
        this.seq = seq;
    }

    public double getSeq() {
        beforePropertyRead("seq");
        return this.seq;
    }

    public void setType(short type) {
        beforePropertyWrite("type", this.type, type);
        this.type = type;
    }

    public short getType() {
        beforePropertyRead("type");
        return this.type;
    }

    public void setSwordUsername(String swordUsername) {
        beforePropertyWrite("swordUsername", this.swordUsername, swordUsername);
        this.swordUsername = swordUsername;
    }

    public String getSwordUsername() {
        beforePropertyRead("swordUsername");
        return this.swordUsername;
    }

    public void setSwordPassword(String swordPassword) {
        beforePropertyWrite("swordPassword", this.swordPassword, swordPassword);
        this.swordPassword = swordPassword;
    }

    public String getSwordPassword() {
        beforePropertyRead("swordPassword");
        return this.swordPassword;
    }

    public void setDepositPointId(Integer depositPointId) {
        beforePropertyWrite("depositPointId", this.depositPointId, depositPointId);
        this.depositPointId = depositPointId;
    }

    public Integer getDepositPointId() {
        beforePropertyRead("depositPointId");
        return this.depositPointId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "contextId":
                return this.contextId;
            case "url":
                return this.url;
            case "seq":
                return this.seq;
            case "type":
                return this.type;
            case "swordUsername":
                return this.swordUsername;
            case "swordPassword":
                return this.swordPassword;
            case "depositPointId":
                return this.depositPointId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "contextId":
                this.contextId = val == null ? 0 : (long)val;
                break;
            case "url":
                this.url = (String)val;
                break;
            case "seq":
                this.seq = val == null ? 0 : (double)val;
                break;
            case "type":
                this.type = val == null ? 0 : (short)val;
                break;
            case "swordUsername":
                this.swordUsername = (String)val;
                break;
            case "swordPassword":
                this.swordPassword = (String)val;
                break;
            case "depositPointId":
                this.depositPointId = (Integer)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.contextId);
        out.writeObject(this.url);
        out.writeDouble(this.seq);
        out.writeShort(this.type);
        out.writeObject(this.swordUsername);
        out.writeObject(this.swordPassword);
        out.writeObject(this.depositPointId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.contextId = in.readLong();
        this.url = (String)in.readObject();
        this.seq = in.readDouble();
        this.type = in.readShort();
        this.swordUsername = (String)in.readObject();
        this.swordPassword = (String)in.readObject();
        this.depositPointId = (Integer)in.readObject();
    }

}
