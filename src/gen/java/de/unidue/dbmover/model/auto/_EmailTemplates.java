package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _EmailTemplates was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _EmailTemplates extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<String> EMAIL_KEY = Property.create("emailKey", String.class);
    public static final Property<Long> ASSOC_TYPE = Property.create("assocType", Long.class);
    public static final Property<Long> ASSOC_ID = Property.create("assocId", Long.class);
    public static final Property<Short> ENABLED = Property.create("enabled", Short.class);
    public static final Property<Long> EMAIL_ID = Property.create("emailId", Long.class);

    protected String emailKey;
    protected Long assocType;
    protected Long assocId;
    protected short enabled;
    protected Long emailId;


    public void setEmailKey(String emailKey) {
        beforePropertyWrite("emailKey", this.emailKey, emailKey);
        this.emailKey = emailKey;
    }

    public String getEmailKey() {
        beforePropertyRead("emailKey");
        return this.emailKey;
    }

    public void setAssocType(long assocType) {
        beforePropertyWrite("assocType", this.assocType, assocType);
        this.assocType = assocType;
    }

    public long getAssocType() {
        beforePropertyRead("assocType");
        if(this.assocType == null) {
            return 0;
        }
        return this.assocType;
    }

    public void setAssocId(long assocId) {
        beforePropertyWrite("assocId", this.assocId, assocId);
        this.assocId = assocId;
    }

    public long getAssocId() {
        beforePropertyRead("assocId");
        if(this.assocId == null) {
            return 0;
        }
        return this.assocId;
    }

    public void setEnabled(short enabled) {
        beforePropertyWrite("enabled", this.enabled, enabled);
        this.enabled = enabled;
    }

    public short getEnabled() {
        beforePropertyRead("enabled");
        return this.enabled;
    }

    public void setEmailId(Long emailId) {
        beforePropertyWrite("emailId", this.emailId, emailId);
        this.emailId = emailId;
    }

    public Long getEmailId() {
        beforePropertyRead("emailId");
        return this.emailId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "emailKey":
                return this.emailKey;
            case "assocType":
                return this.assocType;
            case "assocId":
                return this.assocId;
            case "enabled":
                return this.enabled;
            case "emailId":
                return this.emailId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "emailKey":
                this.emailKey = (String)val;
                break;
            case "assocType":
                this.assocType = (Long)val;
                break;
            case "assocId":
                this.assocId = (Long)val;
                break;
            case "enabled":
                this.enabled = val == null ? 0 : (short)val;
                break;
            case "emailId":
                this.emailId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.emailKey);
        out.writeObject(this.assocType);
        out.writeObject(this.assocId);
        out.writeShort(this.enabled);
        out.writeObject(this.emailId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.emailKey = (String)in.readObject();
        this.assocType = (Long)in.readObject();
        this.assocId = (Long)in.readObject();
        this.enabled = in.readShort();
        this.emailId = (Long)in.readObject();
    }

}
