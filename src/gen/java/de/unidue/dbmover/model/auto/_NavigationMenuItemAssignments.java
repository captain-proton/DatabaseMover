package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _NavigationMenuItemAssignments was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _NavigationMenuItemAssignments extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String NAVIGATION_MENU_ITEM_ASSIGNMENT_ID_PK_COLUMN = "navigation_menu_item_assignment_id";

    public static final Property<Long> NAVIGATION_MENU_ID = Property.create("navigationMenuId", Long.class);
    public static final Property<Long> NAVIGATION_MENU_ITEM_ID = Property.create("navigationMenuItemId", Long.class);
    public static final Property<Long> PARENT_ID = Property.create("parentId", Long.class);
    public static final Property<Long> SEQ = Property.create("seq", Long.class);

    protected long navigationMenuId;
    protected long navigationMenuItemId;
    protected Long parentId;
    protected Long seq;


    public void setNavigationMenuId(long navigationMenuId) {
        beforePropertyWrite("navigationMenuId", this.navigationMenuId, navigationMenuId);
        this.navigationMenuId = navigationMenuId;
    }

    public long getNavigationMenuId() {
        beforePropertyRead("navigationMenuId");
        return this.navigationMenuId;
    }

    public void setNavigationMenuItemId(long navigationMenuItemId) {
        beforePropertyWrite("navigationMenuItemId", this.navigationMenuItemId, navigationMenuItemId);
        this.navigationMenuItemId = navigationMenuItemId;
    }

    public long getNavigationMenuItemId() {
        beforePropertyRead("navigationMenuItemId");
        return this.navigationMenuItemId;
    }

    public void setParentId(long parentId) {
        beforePropertyWrite("parentId", this.parentId, parentId);
        this.parentId = parentId;
    }

    public long getParentId() {
        beforePropertyRead("parentId");
        if(this.parentId == null) {
            return 0;
        }
        return this.parentId;
    }

    public void setSeq(long seq) {
        beforePropertyWrite("seq", this.seq, seq);
        this.seq = seq;
    }

    public long getSeq() {
        beforePropertyRead("seq");
        if(this.seq == null) {
            return 0;
        }
        return this.seq;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "navigationMenuId":
                return this.navigationMenuId;
            case "navigationMenuItemId":
                return this.navigationMenuItemId;
            case "parentId":
                return this.parentId;
            case "seq":
                return this.seq;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "navigationMenuId":
                this.navigationMenuId = val == null ? 0 : (long)val;
                break;
            case "navigationMenuItemId":
                this.navigationMenuItemId = val == null ? 0 : (long)val;
                break;
            case "parentId":
                this.parentId = (Long)val;
                break;
            case "seq":
                this.seq = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.navigationMenuId);
        out.writeLong(this.navigationMenuItemId);
        out.writeObject(this.parentId);
        out.writeObject(this.seq);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.navigationMenuId = in.readLong();
        this.navigationMenuItemId = in.readLong();
        this.parentId = (Long)in.readObject();
        this.seq = (Long)in.readObject();
    }

}
