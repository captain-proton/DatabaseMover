package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Authors was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Authors extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> SUBMISSION_ID = Property.create("submissionId", Long.class);
    public static final Property<Short> PRIMARY_CONTACT = Property.create("primaryContact", Short.class);
    public static final Property<Double> SEQ = Property.create("seq", Double.class);
    public static final Property<String> FIRST_NAME = Property.create("firstName", String.class);
    public static final Property<String> MIDDLE_NAME = Property.create("middleName", String.class);
    public static final Property<String> LAST_NAME = Property.create("lastName", String.class);
    public static final Property<String> SUFFIX = Property.create("suffix", String.class);
    public static final Property<String> COUNTRY = Property.create("country", String.class);
    public static final Property<String> EMAIL = Property.create("email", String.class);
    public static final Property<String> URL = Property.create("url", String.class);
    public static final Property<Long> USER_GROUP_ID = Property.create("userGroupId", Long.class);
    public static final Property<Short> INCLUDE_IN_BROWSE = Property.create("includeInBrowse", Short.class);
    public static final Property<Long> AUTHOR_ID = Property.create("authorId", Long.class);

    protected long submissionId;
    protected short primaryContact;
    protected double seq;
    protected String firstName;
    protected String middleName;
    protected String lastName;
    protected String suffix;
    protected String country;
    protected String email;
    protected String url;
    protected Long userGroupId;
    protected short includeInBrowse;
    protected Long authorId;


    public void setSubmissionId(long submissionId) {
        beforePropertyWrite("submissionId", this.submissionId, submissionId);
        this.submissionId = submissionId;
    }

    public long getSubmissionId() {
        beforePropertyRead("submissionId");
        return this.submissionId;
    }

    public void setPrimaryContact(short primaryContact) {
        beforePropertyWrite("primaryContact", this.primaryContact, primaryContact);
        this.primaryContact = primaryContact;
    }

    public short getPrimaryContact() {
        beforePropertyRead("primaryContact");
        return this.primaryContact;
    }

    public void setSeq(double seq) {
        beforePropertyWrite("seq", this.seq, seq);
        this.seq = seq;
    }

    public double getSeq() {
        beforePropertyRead("seq");
        return this.seq;
    }

    public void setFirstName(String firstName) {
        beforePropertyWrite("firstName", this.firstName, firstName);
        this.firstName = firstName;
    }

    public String getFirstName() {
        beforePropertyRead("firstName");
        return this.firstName;
    }

    public void setMiddleName(String middleName) {
        beforePropertyWrite("middleName", this.middleName, middleName);
        this.middleName = middleName;
    }

    public String getMiddleName() {
        beforePropertyRead("middleName");
        return this.middleName;
    }

    public void setLastName(String lastName) {
        beforePropertyWrite("lastName", this.lastName, lastName);
        this.lastName = lastName;
    }

    public String getLastName() {
        beforePropertyRead("lastName");
        return this.lastName;
    }

    public void setSuffix(String suffix) {
        beforePropertyWrite("suffix", this.suffix, suffix);
        this.suffix = suffix;
    }

    public String getSuffix() {
        beforePropertyRead("suffix");
        return this.suffix;
    }

    public void setCountry(String country) {
        beforePropertyWrite("country", this.country, country);
        this.country = country;
    }

    public String getCountry() {
        beforePropertyRead("country");
        return this.country;
    }

    public void setEmail(String email) {
        beforePropertyWrite("email", this.email, email);
        this.email = email;
    }

    public String getEmail() {
        beforePropertyRead("email");
        return this.email;
    }

    public void setUrl(String url) {
        beforePropertyWrite("url", this.url, url);
        this.url = url;
    }

    public String getUrl() {
        beforePropertyRead("url");
        return this.url;
    }

    public void setUserGroupId(long userGroupId) {
        beforePropertyWrite("userGroupId", this.userGroupId, userGroupId);
        this.userGroupId = userGroupId;
    }

    public long getUserGroupId() {
        beforePropertyRead("userGroupId");
        if(this.userGroupId == null) {
            return 0;
        }
        return this.userGroupId;
    }

    public void setIncludeInBrowse(short includeInBrowse) {
        beforePropertyWrite("includeInBrowse", this.includeInBrowse, includeInBrowse);
        this.includeInBrowse = includeInBrowse;
    }

    public short getIncludeInBrowse() {
        beforePropertyRead("includeInBrowse");
        return this.includeInBrowse;
    }

    public void setAuthorId(Long authorId) {
        beforePropertyWrite("authorId", this.authorId, authorId);
        this.authorId = authorId;
    }

    public Long getAuthorId() {
        beforePropertyRead("authorId");
        return this.authorId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "submissionId":
                return this.submissionId;
            case "primaryContact":
                return this.primaryContact;
            case "seq":
                return this.seq;
            case "firstName":
                return this.firstName;
            case "middleName":
                return this.middleName;
            case "lastName":
                return this.lastName;
            case "suffix":
                return this.suffix;
            case "country":
                return this.country;
            case "email":
                return this.email;
            case "url":
                return this.url;
            case "userGroupId":
                return this.userGroupId;
            case "includeInBrowse":
                return this.includeInBrowse;
            case "authorId":
                return this.authorId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "submissionId":
                this.submissionId = val == null ? 0 : (long)val;
                break;
            case "primaryContact":
                this.primaryContact = val == null ? 0 : (short)val;
                break;
            case "seq":
                this.seq = val == null ? 0 : (double)val;
                break;
            case "firstName":
                this.firstName = (String)val;
                break;
            case "middleName":
                this.middleName = (String)val;
                break;
            case "lastName":
                this.lastName = (String)val;
                break;
            case "suffix":
                this.suffix = (String)val;
                break;
            case "country":
                this.country = (String)val;
                break;
            case "email":
                this.email = (String)val;
                break;
            case "url":
                this.url = (String)val;
                break;
            case "userGroupId":
                this.userGroupId = (Long)val;
                break;
            case "includeInBrowse":
                this.includeInBrowse = val == null ? 0 : (short)val;
                break;
            case "authorId":
                this.authorId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.submissionId);
        out.writeShort(this.primaryContact);
        out.writeDouble(this.seq);
        out.writeObject(this.firstName);
        out.writeObject(this.middleName);
        out.writeObject(this.lastName);
        out.writeObject(this.suffix);
        out.writeObject(this.country);
        out.writeObject(this.email);
        out.writeObject(this.url);
        out.writeObject(this.userGroupId);
        out.writeShort(this.includeInBrowse);
        out.writeObject(this.authorId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.submissionId = in.readLong();
        this.primaryContact = in.readShort();
        this.seq = in.readDouble();
        this.firstName = (String)in.readObject();
        this.middleName = (String)in.readObject();
        this.lastName = (String)in.readObject();
        this.suffix = (String)in.readObject();
        this.country = (String)in.readObject();
        this.email = (String)in.readObject();
        this.url = (String)in.readObject();
        this.userGroupId = (Long)in.readObject();
        this.includeInBrowse = in.readShort();
        this.authorId = (Long)in.readObject();
    }

}
