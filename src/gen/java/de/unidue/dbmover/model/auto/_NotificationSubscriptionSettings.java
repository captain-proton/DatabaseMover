package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _NotificationSubscriptionSettings was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _NotificationSubscriptionSettings extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<String> SETTING_NAME = Property.create("settingName", String.class);
    public static final Property<String> SETTING_VALUE = Property.create("settingValue", String.class);
    public static final Property<Long> USER_ID = Property.create("userId", Long.class);
    public static final Property<Long> CONTEXT = Property.create("context", Long.class);
    public static final Property<String> SETTING_TYPE = Property.create("settingType", String.class);
    public static final Property<Long> SETTING_ID = Property.create("settingId", Long.class);

    protected String settingName;
    protected String settingValue;
    protected long userId;
    protected long context;
    protected String settingType;
    protected Long settingId;


    public void setSettingName(String settingName) {
        beforePropertyWrite("settingName", this.settingName, settingName);
        this.settingName = settingName;
    }

    public String getSettingName() {
        beforePropertyRead("settingName");
        return this.settingName;
    }

    public void setSettingValue(String settingValue) {
        beforePropertyWrite("settingValue", this.settingValue, settingValue);
        this.settingValue = settingValue;
    }

    public String getSettingValue() {
        beforePropertyRead("settingValue");
        return this.settingValue;
    }

    public void setUserId(long userId) {
        beforePropertyWrite("userId", this.userId, userId);
        this.userId = userId;
    }

    public long getUserId() {
        beforePropertyRead("userId");
        return this.userId;
    }

    public void setContext(long context) {
        beforePropertyWrite("context", this.context, context);
        this.context = context;
    }

    public long getContext() {
        beforePropertyRead("context");
        return this.context;
    }

    public void setSettingType(String settingType) {
        beforePropertyWrite("settingType", this.settingType, settingType);
        this.settingType = settingType;
    }

    public String getSettingType() {
        beforePropertyRead("settingType");
        return this.settingType;
    }

    public void setSettingId(Long settingId) {
        beforePropertyWrite("settingId", this.settingId, settingId);
        this.settingId = settingId;
    }

    public Long getSettingId() {
        beforePropertyRead("settingId");
        return this.settingId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "settingName":
                return this.settingName;
            case "settingValue":
                return this.settingValue;
            case "userId":
                return this.userId;
            case "context":
                return this.context;
            case "settingType":
                return this.settingType;
            case "settingId":
                return this.settingId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "settingName":
                this.settingName = (String)val;
                break;
            case "settingValue":
                this.settingValue = (String)val;
                break;
            case "userId":
                this.userId = val == null ? 0 : (long)val;
                break;
            case "context":
                this.context = val == null ? 0 : (long)val;
                break;
            case "settingType":
                this.settingType = (String)val;
                break;
            case "settingId":
                this.settingId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.settingName);
        out.writeObject(this.settingValue);
        out.writeLong(this.userId);
        out.writeLong(this.context);
        out.writeObject(this.settingType);
        out.writeObject(this.settingId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.settingName = (String)in.readObject();
        this.settingValue = (String)in.readObject();
        this.userId = in.readLong();
        this.context = in.readLong();
        this.settingType = (String)in.readObject();
        this.settingId = (Long)in.readObject();
    }

}
