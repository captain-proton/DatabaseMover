package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _FilterGroups was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _FilterGroups extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<String> SYMBOLIC = Property.create("symbolic", String.class);
    public static final Property<String> DISPLAY_NAME = Property.create("displayName", String.class);
    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<String> INPUT_TYPE = Property.create("inputType", String.class);
    public static final Property<String> OUTPUT_TYPE = Property.create("outputType", String.class);
    public static final Property<Long> FILTER_GROUP_ID = Property.create("filterGroupId", Long.class);

    protected String symbolic;
    protected String displayName;
    protected String description;
    protected String inputType;
    protected String outputType;
    protected Long filterGroupId;


    public void setSymbolic(String symbolic) {
        beforePropertyWrite("symbolic", this.symbolic, symbolic);
        this.symbolic = symbolic;
    }

    public String getSymbolic() {
        beforePropertyRead("symbolic");
        return this.symbolic;
    }

    public void setDisplayName(String displayName) {
        beforePropertyWrite("displayName", this.displayName, displayName);
        this.displayName = displayName;
    }

    public String getDisplayName() {
        beforePropertyRead("displayName");
        return this.displayName;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setInputType(String inputType) {
        beforePropertyWrite("inputType", this.inputType, inputType);
        this.inputType = inputType;
    }

    public String getInputType() {
        beforePropertyRead("inputType");
        return this.inputType;
    }

    public void setOutputType(String outputType) {
        beforePropertyWrite("outputType", this.outputType, outputType);
        this.outputType = outputType;
    }

    public String getOutputType() {
        beforePropertyRead("outputType");
        return this.outputType;
    }

    public void setFilterGroupId(Long filterGroupId) {
        beforePropertyWrite("filterGroupId", this.filterGroupId, filterGroupId);
        this.filterGroupId = filterGroupId;
    }

    public Long getFilterGroupId() {
        beforePropertyRead("filterGroupId");
        return this.filterGroupId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "symbolic":
                return this.symbolic;
            case "displayName":
                return this.displayName;
            case "description":
                return this.description;
            case "inputType":
                return this.inputType;
            case "outputType":
                return this.outputType;
            case "filterGroupId":
                return this.filterGroupId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "symbolic":
                this.symbolic = (String)val;
                break;
            case "displayName":
                this.displayName = (String)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "inputType":
                this.inputType = (String)val;
                break;
            case "outputType":
                this.outputType = (String)val;
                break;
            case "filterGroupId":
                this.filterGroupId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.symbolic);
        out.writeObject(this.displayName);
        out.writeObject(this.description);
        out.writeObject(this.inputType);
        out.writeObject(this.outputType);
        out.writeObject(this.filterGroupId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.symbolic = (String)in.readObject();
        this.displayName = (String)in.readObject();
        this.description = (String)in.readObject();
        this.inputType = (String)in.readObject();
        this.outputType = (String)in.readObject();
        this.filterGroupId = (Long)in.readObject();
    }

}
