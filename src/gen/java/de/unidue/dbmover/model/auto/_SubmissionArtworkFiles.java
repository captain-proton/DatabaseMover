package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _SubmissionArtworkFiles was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _SubmissionArtworkFiles extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String FILE_ID_PK_COLUMN = "file_id";
    public static final String REVISION_PK_COLUMN = "revision";

    public static final Property<String> CAPTION = Property.create("caption", String.class);
    public static final Property<String> CREDIT = Property.create("credit", String.class);
    public static final Property<String> COPYRIGHT_OWNER = Property.create("copyrightOwner", String.class);
    public static final Property<String> COPYRIGHT_OWNER_CONTACT = Property.create("copyrightOwnerContact", String.class);
    public static final Property<String> PERMISSION_TERMS = Property.create("permissionTerms", String.class);
    public static final Property<Long> PERMISSION_FILE_ID = Property.create("permissionFileId", Long.class);
    public static final Property<Long> CHAPTER_ID = Property.create("chapterId", Long.class);
    public static final Property<Long> CONTACT_AUTHOR = Property.create("contactAuthor", Long.class);

    protected String caption;
    protected String credit;
    protected String copyrightOwner;
    protected String copyrightOwnerContact;
    protected String permissionTerms;
    protected Long permissionFileId;
    protected Long chapterId;
    protected Long contactAuthor;


    public void setCaption(String caption) {
        beforePropertyWrite("caption", this.caption, caption);
        this.caption = caption;
    }

    public String getCaption() {
        beforePropertyRead("caption");
        return this.caption;
    }

    public void setCredit(String credit) {
        beforePropertyWrite("credit", this.credit, credit);
        this.credit = credit;
    }

    public String getCredit() {
        beforePropertyRead("credit");
        return this.credit;
    }

    public void setCopyrightOwner(String copyrightOwner) {
        beforePropertyWrite("copyrightOwner", this.copyrightOwner, copyrightOwner);
        this.copyrightOwner = copyrightOwner;
    }

    public String getCopyrightOwner() {
        beforePropertyRead("copyrightOwner");
        return this.copyrightOwner;
    }

    public void setCopyrightOwnerContact(String copyrightOwnerContact) {
        beforePropertyWrite("copyrightOwnerContact", this.copyrightOwnerContact, copyrightOwnerContact);
        this.copyrightOwnerContact = copyrightOwnerContact;
    }

    public String getCopyrightOwnerContact() {
        beforePropertyRead("copyrightOwnerContact");
        return this.copyrightOwnerContact;
    }

    public void setPermissionTerms(String permissionTerms) {
        beforePropertyWrite("permissionTerms", this.permissionTerms, permissionTerms);
        this.permissionTerms = permissionTerms;
    }

    public String getPermissionTerms() {
        beforePropertyRead("permissionTerms");
        return this.permissionTerms;
    }

    public void setPermissionFileId(long permissionFileId) {
        beforePropertyWrite("permissionFileId", this.permissionFileId, permissionFileId);
        this.permissionFileId = permissionFileId;
    }

    public long getPermissionFileId() {
        beforePropertyRead("permissionFileId");
        if(this.permissionFileId == null) {
            return 0;
        }
        return this.permissionFileId;
    }

    public void setChapterId(long chapterId) {
        beforePropertyWrite("chapterId", this.chapterId, chapterId);
        this.chapterId = chapterId;
    }

    public long getChapterId() {
        beforePropertyRead("chapterId");
        if(this.chapterId == null) {
            return 0;
        }
        return this.chapterId;
    }

    public void setContactAuthor(long contactAuthor) {
        beforePropertyWrite("contactAuthor", this.contactAuthor, contactAuthor);
        this.contactAuthor = contactAuthor;
    }

    public long getContactAuthor() {
        beforePropertyRead("contactAuthor");
        if(this.contactAuthor == null) {
            return 0;
        }
        return this.contactAuthor;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "caption":
                return this.caption;
            case "credit":
                return this.credit;
            case "copyrightOwner":
                return this.copyrightOwner;
            case "copyrightOwnerContact":
                return this.copyrightOwnerContact;
            case "permissionTerms":
                return this.permissionTerms;
            case "permissionFileId":
                return this.permissionFileId;
            case "chapterId":
                return this.chapterId;
            case "contactAuthor":
                return this.contactAuthor;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "caption":
                this.caption = (String)val;
                break;
            case "credit":
                this.credit = (String)val;
                break;
            case "copyrightOwner":
                this.copyrightOwner = (String)val;
                break;
            case "copyrightOwnerContact":
                this.copyrightOwnerContact = (String)val;
                break;
            case "permissionTerms":
                this.permissionTerms = (String)val;
                break;
            case "permissionFileId":
                this.permissionFileId = (Long)val;
                break;
            case "chapterId":
                this.chapterId = (Long)val;
                break;
            case "contactAuthor":
                this.contactAuthor = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.caption);
        out.writeObject(this.credit);
        out.writeObject(this.copyrightOwner);
        out.writeObject(this.copyrightOwnerContact);
        out.writeObject(this.permissionTerms);
        out.writeObject(this.permissionFileId);
        out.writeObject(this.chapterId);
        out.writeObject(this.contactAuthor);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.caption = (String)in.readObject();
        this.credit = (String)in.readObject();
        this.copyrightOwner = (String)in.readObject();
        this.copyrightOwnerContact = (String)in.readObject();
        this.permissionTerms = (String)in.readObject();
        this.permissionFileId = (Long)in.readObject();
        this.chapterId = (Long)in.readObject();
        this.contactAuthor = (Long)in.readObject();
    }

}
