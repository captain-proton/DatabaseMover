package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _SubmissionSearchObjects was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _SubmissionSearchObjects extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> SUBMISSION_ID = Property.create("submissionId", Long.class);
    public static final Property<Integer> TYPE = Property.create("type", Integer.class);
    public static final Property<Long> ASSOC_ID = Property.create("assocId", Long.class);
    public static final Property<Long> OBJECT_IDENTIFIER = Property.create("objectIdentifier", Long.class);

    protected long submissionId;
    protected int type;
    protected Long assocId;
    protected Long objectIdentifier;


    public void setSubmissionId(long submissionId) {
        beforePropertyWrite("submissionId", this.submissionId, submissionId);
        this.submissionId = submissionId;
    }

    public long getSubmissionId() {
        beforePropertyRead("submissionId");
        return this.submissionId;
    }

    public void setType(int type) {
        beforePropertyWrite("type", this.type, type);
        this.type = type;
    }

    public int getType() {
        beforePropertyRead("type");
        return this.type;
    }

    public void setAssocId(long assocId) {
        beforePropertyWrite("assocId", this.assocId, assocId);
        this.assocId = assocId;
    }

    public long getAssocId() {
        beforePropertyRead("assocId");
        if(this.assocId == null) {
            return 0;
        }
        return this.assocId;
    }

    public void setObjectIdentifier(Long objectIdentifier) {
        beforePropertyWrite("objectIdentifier", this.objectIdentifier, objectIdentifier);
        this.objectIdentifier = objectIdentifier;
    }

    public Long getObjectIdentifier() {
        beforePropertyRead("objectIdentifier");
        return this.objectIdentifier;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "submissionId":
                return this.submissionId;
            case "type":
                return this.type;
            case "assocId":
                return this.assocId;
            case "objectIdentifier":
                return this.objectIdentifier;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "submissionId":
                this.submissionId = val == null ? 0 : (long)val;
                break;
            case "type":
                this.type = val == null ? 0 : (int)val;
                break;
            case "assocId":
                this.assocId = (Long)val;
                break;
            case "objectIdentifier":
                this.objectIdentifier = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.submissionId);
        out.writeInt(this.type);
        out.writeObject(this.assocId);
        out.writeObject(this.objectIdentifier);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.submissionId = in.readLong();
        this.type = in.readInt();
        this.assocId = (Long)in.readObject();
        this.objectIdentifier = (Long)in.readObject();
    }

}
