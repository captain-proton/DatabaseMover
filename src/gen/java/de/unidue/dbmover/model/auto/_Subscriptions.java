package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Subscriptions was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Subscriptions extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> JOURNAL_ID = Property.create("journalId", Long.class);
    public static final Property<Long> USER_ID = Property.create("userId", Long.class);
    public static final Property<Long> TYPE_ID = Property.create("typeId", Long.class);
    public static final Property<LocalDate> DATE_START = Property.create("dateStart", LocalDate.class);
    public static final Property<LocalDateTime> DATE_END = Property.create("dateEnd", LocalDateTime.class);
    public static final Property<Short> STATUS = Property.create("status", Short.class);
    public static final Property<String> MEMBERSHIP = Property.create("membership", String.class);
    public static final Property<String> REFERENCE_NUMBER = Property.create("referenceNumber", String.class);
    public static final Property<String> NOTES = Property.create("notes", String.class);
    public static final Property<Long> SUBSCRIPTION_ID = Property.create("subscriptionId", Long.class);

    protected long journalId;
    protected long userId;
    protected long typeId;
    protected LocalDate dateStart;
    protected LocalDateTime dateEnd;
    protected short status;
    protected String membership;
    protected String referenceNumber;
    protected String notes;
    protected Long subscriptionId;


    public void setJournalId(long journalId) {
        beforePropertyWrite("journalId", this.journalId, journalId);
        this.journalId = journalId;
    }

    public long getJournalId() {
        beforePropertyRead("journalId");
        return this.journalId;
    }

    public void setUserId(long userId) {
        beforePropertyWrite("userId", this.userId, userId);
        this.userId = userId;
    }

    public long getUserId() {
        beforePropertyRead("userId");
        return this.userId;
    }

    public void setTypeId(long typeId) {
        beforePropertyWrite("typeId", this.typeId, typeId);
        this.typeId = typeId;
    }

    public long getTypeId() {
        beforePropertyRead("typeId");
        return this.typeId;
    }

    public void setDateStart(LocalDate dateStart) {
        beforePropertyWrite("dateStart", this.dateStart, dateStart);
        this.dateStart = dateStart;
    }

    public LocalDate getDateStart() {
        beforePropertyRead("dateStart");
        return this.dateStart;
    }

    public void setDateEnd(LocalDateTime dateEnd) {
        beforePropertyWrite("dateEnd", this.dateEnd, dateEnd);
        this.dateEnd = dateEnd;
    }

    public LocalDateTime getDateEnd() {
        beforePropertyRead("dateEnd");
        return this.dateEnd;
    }

    public void setStatus(short status) {
        beforePropertyWrite("status", this.status, status);
        this.status = status;
    }

    public short getStatus() {
        beforePropertyRead("status");
        return this.status;
    }

    public void setMembership(String membership) {
        beforePropertyWrite("membership", this.membership, membership);
        this.membership = membership;
    }

    public String getMembership() {
        beforePropertyRead("membership");
        return this.membership;
    }

    public void setReferenceNumber(String referenceNumber) {
        beforePropertyWrite("referenceNumber", this.referenceNumber, referenceNumber);
        this.referenceNumber = referenceNumber;
    }

    public String getReferenceNumber() {
        beforePropertyRead("referenceNumber");
        return this.referenceNumber;
    }

    public void setNotes(String notes) {
        beforePropertyWrite("notes", this.notes, notes);
        this.notes = notes;
    }

    public String getNotes() {
        beforePropertyRead("notes");
        return this.notes;
    }

    public void setSubscriptionId(Long subscriptionId) {
        beforePropertyWrite("subscriptionId", this.subscriptionId, subscriptionId);
        this.subscriptionId = subscriptionId;
    }

    public Long getSubscriptionId() {
        beforePropertyRead("subscriptionId");
        return this.subscriptionId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "journalId":
                return this.journalId;
            case "userId":
                return this.userId;
            case "typeId":
                return this.typeId;
            case "dateStart":
                return this.dateStart;
            case "dateEnd":
                return this.dateEnd;
            case "status":
                return this.status;
            case "membership":
                return this.membership;
            case "referenceNumber":
                return this.referenceNumber;
            case "notes":
                return this.notes;
            case "subscriptionId":
                return this.subscriptionId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "journalId":
                this.journalId = val == null ? 0 : (long)val;
                break;
            case "userId":
                this.userId = val == null ? 0 : (long)val;
                break;
            case "typeId":
                this.typeId = val == null ? 0 : (long)val;
                break;
            case "dateStart":
                this.dateStart = (LocalDate)val;
                break;
            case "dateEnd":
                this.dateEnd = (LocalDateTime)val;
                break;
            case "status":
                this.status = val == null ? 0 : (short)val;
                break;
            case "membership":
                this.membership = (String)val;
                break;
            case "referenceNumber":
                this.referenceNumber = (String)val;
                break;
            case "notes":
                this.notes = (String)val;
                break;
            case "subscriptionId":
                this.subscriptionId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.journalId);
        out.writeLong(this.userId);
        out.writeLong(this.typeId);
        out.writeObject(this.dateStart);
        out.writeObject(this.dateEnd);
        out.writeShort(this.status);
        out.writeObject(this.membership);
        out.writeObject(this.referenceNumber);
        out.writeObject(this.notes);
        out.writeObject(this.subscriptionId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.journalId = in.readLong();
        this.userId = in.readLong();
        this.typeId = in.readLong();
        this.dateStart = (LocalDate)in.readObject();
        this.dateEnd = (LocalDateTime)in.readObject();
        this.status = in.readShort();
        this.membership = (String)in.readObject();
        this.referenceNumber = (String)in.readObject();
        this.notes = (String)in.readObject();
        this.subscriptionId = (Long)in.readObject();
    }

}
