package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _SubmissionSearchObjectKeywords was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _SubmissionSearchObjectKeywords extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> OBJECT_ID = Property.create("objectId", Long.class);
    public static final Property<Long> KEYWORD_ID = Property.create("keywordId", Long.class);
    public static final Property<Integer> POS = Property.create("pos", Integer.class);

    protected long objectId;
    protected long keywordId;
    protected int pos;


    public void setObjectId(long objectId) {
        beforePropertyWrite("objectId", this.objectId, objectId);
        this.objectId = objectId;
    }

    public long getObjectId() {
        beforePropertyRead("objectId");
        return this.objectId;
    }

    public void setKeywordId(long keywordId) {
        beforePropertyWrite("keywordId", this.keywordId, keywordId);
        this.keywordId = keywordId;
    }

    public long getKeywordId() {
        beforePropertyRead("keywordId");
        return this.keywordId;
    }

    public void setPos(int pos) {
        beforePropertyWrite("pos", this.pos, pos);
        this.pos = pos;
    }

    public int getPos() {
        beforePropertyRead("pos");
        return this.pos;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "objectId":
                return this.objectId;
            case "keywordId":
                return this.keywordId;
            case "pos":
                return this.pos;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "objectId":
                this.objectId = val == null ? 0 : (long)val;
                break;
            case "keywordId":
                this.keywordId = val == null ? 0 : (long)val;
                break;
            case "pos":
                this.pos = val == null ? 0 : (int)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.objectId);
        out.writeLong(this.keywordId);
        out.writeInt(this.pos);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.objectId = in.readLong();
        this.keywordId = in.readLong();
        this.pos = in.readInt();
    }

}
