package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _OaiResumptionTokens was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _OaiResumptionTokens extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String TOKEN_PK_COLUMN = "token";

    public static final Property<String> TOKEN = Property.create("token", String.class);
    public static final Property<Long> EXPIRE = Property.create("expire", Long.class);
    public static final Property<Integer> RECORD_OFFSET = Property.create("recordOffset", Integer.class);
    public static final Property<String> PARAMS = Property.create("params", String.class);

    protected String token;
    protected long expire;
    protected int recordOffset;
    protected String params;


    public void setToken(String token) {
        beforePropertyWrite("token", this.token, token);
        this.token = token;
    }

    public String getToken() {
        beforePropertyRead("token");
        return this.token;
    }

    public void setExpire(long expire) {
        beforePropertyWrite("expire", this.expire, expire);
        this.expire = expire;
    }

    public long getExpire() {
        beforePropertyRead("expire");
        return this.expire;
    }

    public void setRecordOffset(int recordOffset) {
        beforePropertyWrite("recordOffset", this.recordOffset, recordOffset);
        this.recordOffset = recordOffset;
    }

    public int getRecordOffset() {
        beforePropertyRead("recordOffset");
        return this.recordOffset;
    }

    public void setParams(String params) {
        beforePropertyWrite("params", this.params, params);
        this.params = params;
    }

    public String getParams() {
        beforePropertyRead("params");
        return this.params;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "token":
                return this.token;
            case "expire":
                return this.expire;
            case "recordOffset":
                return this.recordOffset;
            case "params":
                return this.params;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "token":
                this.token = (String)val;
                break;
            case "expire":
                this.expire = val == null ? 0 : (long)val;
                break;
            case "recordOffset":
                this.recordOffset = val == null ? 0 : (int)val;
                break;
            case "params":
                this.params = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.token);
        out.writeLong(this.expire);
        out.writeInt(this.recordOffset);
        out.writeObject(this.params);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.token = (String)in.readObject();
        this.expire = in.readLong();
        this.recordOffset = in.readInt();
        this.params = (String)in.readObject();
    }

}
