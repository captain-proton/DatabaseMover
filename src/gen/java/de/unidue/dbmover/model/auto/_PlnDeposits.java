package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _PlnDeposits was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PlnDeposits extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String DEPOSIT_ID_PK_COLUMN = "deposit_id";

    public static final Property<Long> JOURNAL_ID = Property.create("journalId", Long.class);
    public static final Property<String> UUID = Property.create("uuid", String.class);
    public static final Property<Long> STATUS = Property.create("status", Long.class);
    public static final Property<LocalDateTime> DATE_STATUS = Property.create("dateStatus", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_CREATED = Property.create("dateCreated", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_MODIFIED = Property.create("dateModified", LocalDateTime.class);

    protected long journalId;
    protected String uuid;
    protected Long status;
    protected LocalDateTime dateStatus;
    protected LocalDateTime dateCreated;
    protected LocalDateTime dateModified;


    public void setJournalId(long journalId) {
        beforePropertyWrite("journalId", this.journalId, journalId);
        this.journalId = journalId;
    }

    public long getJournalId() {
        beforePropertyRead("journalId");
        return this.journalId;
    }

    public void setUuid(String uuid) {
        beforePropertyWrite("uuid", this.uuid, uuid);
        this.uuid = uuid;
    }

    public String getUuid() {
        beforePropertyRead("uuid");
        return this.uuid;
    }

    public void setStatus(long status) {
        beforePropertyWrite("status", this.status, status);
        this.status = status;
    }

    public long getStatus() {
        beforePropertyRead("status");
        if(this.status == null) {
            return 0;
        }
        return this.status;
    }

    public void setDateStatus(LocalDateTime dateStatus) {
        beforePropertyWrite("dateStatus", this.dateStatus, dateStatus);
        this.dateStatus = dateStatus;
    }

    public LocalDateTime getDateStatus() {
        beforePropertyRead("dateStatus");
        return this.dateStatus;
    }

    public void setDateCreated(LocalDateTime dateCreated) {
        beforePropertyWrite("dateCreated", this.dateCreated, dateCreated);
        this.dateCreated = dateCreated;
    }

    public LocalDateTime getDateCreated() {
        beforePropertyRead("dateCreated");
        return this.dateCreated;
    }

    public void setDateModified(LocalDateTime dateModified) {
        beforePropertyWrite("dateModified", this.dateModified, dateModified);
        this.dateModified = dateModified;
    }

    public LocalDateTime getDateModified() {
        beforePropertyRead("dateModified");
        return this.dateModified;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "journalId":
                return this.journalId;
            case "uuid":
                return this.uuid;
            case "status":
                return this.status;
            case "dateStatus":
                return this.dateStatus;
            case "dateCreated":
                return this.dateCreated;
            case "dateModified":
                return this.dateModified;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "journalId":
                this.journalId = val == null ? 0 : (long)val;
                break;
            case "uuid":
                this.uuid = (String)val;
                break;
            case "status":
                this.status = (Long)val;
                break;
            case "dateStatus":
                this.dateStatus = (LocalDateTime)val;
                break;
            case "dateCreated":
                this.dateCreated = (LocalDateTime)val;
                break;
            case "dateModified":
                this.dateModified = (LocalDateTime)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.journalId);
        out.writeObject(this.uuid);
        out.writeObject(this.status);
        out.writeObject(this.dateStatus);
        out.writeObject(this.dateCreated);
        out.writeObject(this.dateModified);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.journalId = in.readLong();
        this.uuid = (String)in.readObject();
        this.status = (Long)in.readObject();
        this.dateStatus = (LocalDateTime)in.readObject();
        this.dateCreated = (LocalDateTime)in.readObject();
        this.dateModified = (LocalDateTime)in.readObject();
    }

}
