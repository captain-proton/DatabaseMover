package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _EventLog was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _EventLog extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String LOG_ID_PK_COLUMN = "log_id";

    public static final Property<Long> ASSOC_TYPE = Property.create("assocType", Long.class);
    public static final Property<Long> ASSOC_ID = Property.create("assocId", Long.class);
    public static final Property<Long> USER_ID = Property.create("userId", Long.class);
    public static final Property<LocalDateTime> DATE_LOGGED = Property.create("dateLogged", LocalDateTime.class);
    public static final Property<String> IP_ADDRESS = Property.create("ipAddress", String.class);
    public static final Property<Long> EVENT_TYPE = Property.create("eventType", Long.class);
    public static final Property<String> MESSAGE = Property.create("message", String.class);
    public static final Property<Short> IS_TRANSLATED = Property.create("isTranslated", Short.class);

    protected Long assocType;
    protected Long assocId;
    protected long userId;
    protected LocalDateTime dateLogged;
    protected String ipAddress;
    protected Long eventType;
    protected String message;
    protected Short isTranslated;


    public void setAssocType(long assocType) {
        beforePropertyWrite("assocType", this.assocType, assocType);
        this.assocType = assocType;
    }

    public long getAssocType() {
        beforePropertyRead("assocType");
        if(this.assocType == null) {
            return 0;
        }
        return this.assocType;
    }

    public void setAssocId(long assocId) {
        beforePropertyWrite("assocId", this.assocId, assocId);
        this.assocId = assocId;
    }

    public long getAssocId() {
        beforePropertyRead("assocId");
        if(this.assocId == null) {
            return 0;
        }
        return this.assocId;
    }

    public void setUserId(long userId) {
        beforePropertyWrite("userId", this.userId, userId);
        this.userId = userId;
    }

    public long getUserId() {
        beforePropertyRead("userId");
        return this.userId;
    }

    public void setDateLogged(LocalDateTime dateLogged) {
        beforePropertyWrite("dateLogged", this.dateLogged, dateLogged);
        this.dateLogged = dateLogged;
    }

    public LocalDateTime getDateLogged() {
        beforePropertyRead("dateLogged");
        return this.dateLogged;
    }

    public void setIpAddress(String ipAddress) {
        beforePropertyWrite("ipAddress", this.ipAddress, ipAddress);
        this.ipAddress = ipAddress;
    }

    public String getIpAddress() {
        beforePropertyRead("ipAddress");
        return this.ipAddress;
    }

    public void setEventType(long eventType) {
        beforePropertyWrite("eventType", this.eventType, eventType);
        this.eventType = eventType;
    }

    public long getEventType() {
        beforePropertyRead("eventType");
        if(this.eventType == null) {
            return 0;
        }
        return this.eventType;
    }

    public void setMessage(String message) {
        beforePropertyWrite("message", this.message, message);
        this.message = message;
    }

    public String getMessage() {
        beforePropertyRead("message");
        return this.message;
    }

    public void setIsTranslated(short isTranslated) {
        beforePropertyWrite("isTranslated", this.isTranslated, isTranslated);
        this.isTranslated = isTranslated;
    }

    public short getIsTranslated() {
        beforePropertyRead("isTranslated");
        if(this.isTranslated == null) {
            return 0;
        }
        return this.isTranslated;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "assocType":
                return this.assocType;
            case "assocId":
                return this.assocId;
            case "userId":
                return this.userId;
            case "dateLogged":
                return this.dateLogged;
            case "ipAddress":
                return this.ipAddress;
            case "eventType":
                return this.eventType;
            case "message":
                return this.message;
            case "isTranslated":
                return this.isTranslated;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "assocType":
                this.assocType = (Long)val;
                break;
            case "assocId":
                this.assocId = (Long)val;
                break;
            case "userId":
                this.userId = val == null ? 0 : (long)val;
                break;
            case "dateLogged":
                this.dateLogged = (LocalDateTime)val;
                break;
            case "ipAddress":
                this.ipAddress = (String)val;
                break;
            case "eventType":
                this.eventType = (Long)val;
                break;
            case "message":
                this.message = (String)val;
                break;
            case "isTranslated":
                this.isTranslated = (Short)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.assocType);
        out.writeObject(this.assocId);
        out.writeLong(this.userId);
        out.writeObject(this.dateLogged);
        out.writeObject(this.ipAddress);
        out.writeObject(this.eventType);
        out.writeObject(this.message);
        out.writeObject(this.isTranslated);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.assocType = (Long)in.readObject();
        this.assocId = (Long)in.readObject();
        this.userId = in.readLong();
        this.dateLogged = (LocalDateTime)in.readObject();
        this.ipAddress = (String)in.readObject();
        this.eventType = (Long)in.readObject();
        this.message = (String)in.readObject();
        this.isTranslated = (Short)in.readObject();
    }

}
