package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _QueuedPayments was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _QueuedPayments extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<LocalDateTime> DATE_CREATED = Property.create("dateCreated", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_MODIFIED = Property.create("dateModified", LocalDateTime.class);
    public static final Property<LocalDate> EXPIRY_DATE = Property.create("expiryDate", LocalDate.class);
    public static final Property<String> PAYMENT_DATA = Property.create("paymentData", String.class);
    public static final Property<Long> QUEUED_PAYMENT_ID = Property.create("queuedPaymentId", Long.class);

    protected LocalDateTime dateCreated;
    protected LocalDateTime dateModified;
    protected LocalDate expiryDate;
    protected String paymentData;
    protected Long queuedPaymentId;


    public void setDateCreated(LocalDateTime dateCreated) {
        beforePropertyWrite("dateCreated", this.dateCreated, dateCreated);
        this.dateCreated = dateCreated;
    }

    public LocalDateTime getDateCreated() {
        beforePropertyRead("dateCreated");
        return this.dateCreated;
    }

    public void setDateModified(LocalDateTime dateModified) {
        beforePropertyWrite("dateModified", this.dateModified, dateModified);
        this.dateModified = dateModified;
    }

    public LocalDateTime getDateModified() {
        beforePropertyRead("dateModified");
        return this.dateModified;
    }

    public void setExpiryDate(LocalDate expiryDate) {
        beforePropertyWrite("expiryDate", this.expiryDate, expiryDate);
        this.expiryDate = expiryDate;
    }

    public LocalDate getExpiryDate() {
        beforePropertyRead("expiryDate");
        return this.expiryDate;
    }

    public void setPaymentData(String paymentData) {
        beforePropertyWrite("paymentData", this.paymentData, paymentData);
        this.paymentData = paymentData;
    }

    public String getPaymentData() {
        beforePropertyRead("paymentData");
        return this.paymentData;
    }

    public void setQueuedPaymentId(Long queuedPaymentId) {
        beforePropertyWrite("queuedPaymentId", this.queuedPaymentId, queuedPaymentId);
        this.queuedPaymentId = queuedPaymentId;
    }

    public Long getQueuedPaymentId() {
        beforePropertyRead("queuedPaymentId");
        return this.queuedPaymentId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "dateCreated":
                return this.dateCreated;
            case "dateModified":
                return this.dateModified;
            case "expiryDate":
                return this.expiryDate;
            case "paymentData":
                return this.paymentData;
            case "queuedPaymentId":
                return this.queuedPaymentId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "dateCreated":
                this.dateCreated = (LocalDateTime)val;
                break;
            case "dateModified":
                this.dateModified = (LocalDateTime)val;
                break;
            case "expiryDate":
                this.expiryDate = (LocalDate)val;
                break;
            case "paymentData":
                this.paymentData = (String)val;
                break;
            case "queuedPaymentId":
                this.queuedPaymentId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.dateCreated);
        out.writeObject(this.dateModified);
        out.writeObject(this.expiryDate);
        out.writeObject(this.paymentData);
        out.writeObject(this.queuedPaymentId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.dateCreated = (LocalDateTime)in.readObject();
        this.dateModified = (LocalDateTime)in.readObject();
        this.expiryDate = (LocalDate)in.readObject();
        this.paymentData = (String)in.readObject();
        this.queuedPaymentId = (Long)in.readObject();
    }

}
