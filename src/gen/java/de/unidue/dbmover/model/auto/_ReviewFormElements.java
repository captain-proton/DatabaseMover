package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _ReviewFormElements was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ReviewFormElements extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> REVIEW_FORM_ID = Property.create("reviewFormId", Long.class);
    public static final Property<Double> SEQ = Property.create("seq", Double.class);
    public static final Property<Long> ELEMENT_TYPE = Property.create("elementType", Long.class);
    public static final Property<Short> REQUIRED = Property.create("required", Short.class);
    public static final Property<Short> INCLUDED = Property.create("included", Short.class);
    public static final Property<Long> REVIEW_FORM_ELEMENT_ID = Property.create("reviewFormElementId", Long.class);

    protected long reviewFormId;
    protected Double seq;
    protected Long elementType;
    protected Short required;
    protected Short included;
    protected Long reviewFormElementId;


    public void setReviewFormId(long reviewFormId) {
        beforePropertyWrite("reviewFormId", this.reviewFormId, reviewFormId);
        this.reviewFormId = reviewFormId;
    }

    public long getReviewFormId() {
        beforePropertyRead("reviewFormId");
        return this.reviewFormId;
    }

    public void setSeq(double seq) {
        beforePropertyWrite("seq", this.seq, seq);
        this.seq = seq;
    }

    public double getSeq() {
        beforePropertyRead("seq");
        if(this.seq == null) {
            return 0;
        }
        return this.seq;
    }

    public void setElementType(long elementType) {
        beforePropertyWrite("elementType", this.elementType, elementType);
        this.elementType = elementType;
    }

    public long getElementType() {
        beforePropertyRead("elementType");
        if(this.elementType == null) {
            return 0;
        }
        return this.elementType;
    }

    public void setRequired(short required) {
        beforePropertyWrite("required", this.required, required);
        this.required = required;
    }

    public short getRequired() {
        beforePropertyRead("required");
        if(this.required == null) {
            return 0;
        }
        return this.required;
    }

    public void setIncluded(short included) {
        beforePropertyWrite("included", this.included, included);
        this.included = included;
    }

    public short getIncluded() {
        beforePropertyRead("included");
        if(this.included == null) {
            return 0;
        }
        return this.included;
    }

    public void setReviewFormElementId(Long reviewFormElementId) {
        beforePropertyWrite("reviewFormElementId", this.reviewFormElementId, reviewFormElementId);
        this.reviewFormElementId = reviewFormElementId;
    }

    public Long getReviewFormElementId() {
        beforePropertyRead("reviewFormElementId");
        return this.reviewFormElementId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "reviewFormId":
                return this.reviewFormId;
            case "seq":
                return this.seq;
            case "elementType":
                return this.elementType;
            case "required":
                return this.required;
            case "included":
                return this.included;
            case "reviewFormElementId":
                return this.reviewFormElementId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "reviewFormId":
                this.reviewFormId = val == null ? 0 : (long)val;
                break;
            case "seq":
                this.seq = (Double)val;
                break;
            case "elementType":
                this.elementType = (Long)val;
                break;
            case "required":
                this.required = (Short)val;
                break;
            case "included":
                this.included = (Short)val;
                break;
            case "reviewFormElementId":
                this.reviewFormElementId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.reviewFormId);
        out.writeObject(this.seq);
        out.writeObject(this.elementType);
        out.writeObject(this.required);
        out.writeObject(this.included);
        out.writeObject(this.reviewFormElementId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.reviewFormId = in.readLong();
        this.seq = (Double)in.readObject();
        this.elementType = (Long)in.readObject();
        this.required = (Short)in.readObject();
        this.included = (Short)in.readObject();
        this.reviewFormElementId = (Long)in.readObject();
    }

}
