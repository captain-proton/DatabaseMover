package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _InstitutionalSubscriptions was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _InstitutionalSubscriptions extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String INSTITUTIONAL_SUBSCRIPTION_ID_PK_COLUMN = "institutional_subscription_id";

    public static final Property<Long> SUBSCRIPTION_ID = Property.create("subscriptionId", Long.class);
    public static final Property<String> INSTITUTION_NAME = Property.create("institutionName", String.class);
    public static final Property<String> MAILING_ADDRESS = Property.create("mailingAddress", String.class);
    public static final Property<String> DOMAIN = Property.create("domain", String.class);

    protected long subscriptionId;
    protected String institutionName;
    protected String mailingAddress;
    protected String domain;


    public void setSubscriptionId(long subscriptionId) {
        beforePropertyWrite("subscriptionId", this.subscriptionId, subscriptionId);
        this.subscriptionId = subscriptionId;
    }

    public long getSubscriptionId() {
        beforePropertyRead("subscriptionId");
        return this.subscriptionId;
    }

    public void setInstitutionName(String institutionName) {
        beforePropertyWrite("institutionName", this.institutionName, institutionName);
        this.institutionName = institutionName;
    }

    public String getInstitutionName() {
        beforePropertyRead("institutionName");
        return this.institutionName;
    }

    public void setMailingAddress(String mailingAddress) {
        beforePropertyWrite("mailingAddress", this.mailingAddress, mailingAddress);
        this.mailingAddress = mailingAddress;
    }

    public String getMailingAddress() {
        beforePropertyRead("mailingAddress");
        return this.mailingAddress;
    }

    public void setDomain(String domain) {
        beforePropertyWrite("domain", this.domain, domain);
        this.domain = domain;
    }

    public String getDomain() {
        beforePropertyRead("domain");
        return this.domain;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "subscriptionId":
                return this.subscriptionId;
            case "institutionName":
                return this.institutionName;
            case "mailingAddress":
                return this.mailingAddress;
            case "domain":
                return this.domain;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "subscriptionId":
                this.subscriptionId = val == null ? 0 : (long)val;
                break;
            case "institutionName":
                this.institutionName = (String)val;
                break;
            case "mailingAddress":
                this.mailingAddress = (String)val;
                break;
            case "domain":
                this.domain = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.subscriptionId);
        out.writeObject(this.institutionName);
        out.writeObject(this.mailingAddress);
        out.writeObject(this.domain);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.subscriptionId = in.readLong();
        this.institutionName = (String)in.readObject();
        this.mailingAddress = (String)in.readObject();
        this.domain = (String)in.readObject();
    }

}
