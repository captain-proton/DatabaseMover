package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _ReviewFormResponses was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ReviewFormResponses extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String REVIEW_FORM_ELEMENT_ID_PK_COLUMN = "review_form_element_id";
    public static final String REVIEW_ID_PK_COLUMN = "review_id";

    public static final Property<Long> REVIEW_FORM_ELEMENT_ID = Property.create("reviewFormElementId", Long.class);
    public static final Property<Long> REVIEW_ID = Property.create("reviewId", Long.class);
    public static final Property<String> RESPONSE_TYPE = Property.create("responseType", String.class);
    public static final Property<String> RESPONSE_VALUE = Property.create("responseValue", String.class);

    protected long reviewFormElementId;
    protected long reviewId;
    protected String responseType;
    protected String responseValue;


    public void setReviewFormElementId(long reviewFormElementId) {
        beforePropertyWrite("reviewFormElementId", this.reviewFormElementId, reviewFormElementId);
        this.reviewFormElementId = reviewFormElementId;
    }

    public long getReviewFormElementId() {
        beforePropertyRead("reviewFormElementId");
        return this.reviewFormElementId;
    }

    public void setReviewId(long reviewId) {
        beforePropertyWrite("reviewId", this.reviewId, reviewId);
        this.reviewId = reviewId;
    }

    public long getReviewId() {
        beforePropertyRead("reviewId");
        return this.reviewId;
    }

    public void setResponseType(String responseType) {
        beforePropertyWrite("responseType", this.responseType, responseType);
        this.responseType = responseType;
    }

    public String getResponseType() {
        beforePropertyRead("responseType");
        return this.responseType;
    }

    public void setResponseValue(String responseValue) {
        beforePropertyWrite("responseValue", this.responseValue, responseValue);
        this.responseValue = responseValue;
    }

    public String getResponseValue() {
        beforePropertyRead("responseValue");
        return this.responseValue;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "reviewFormElementId":
                return this.reviewFormElementId;
            case "reviewId":
                return this.reviewId;
            case "responseType":
                return this.responseType;
            case "responseValue":
                return this.responseValue;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "reviewFormElementId":
                this.reviewFormElementId = val == null ? 0 : (long)val;
                break;
            case "reviewId":
                this.reviewId = val == null ? 0 : (long)val;
                break;
            case "responseType":
                this.responseType = (String)val;
                break;
            case "responseValue":
                this.responseValue = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.reviewFormElementId);
        out.writeLong(this.reviewId);
        out.writeObject(this.responseType);
        out.writeObject(this.responseValue);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.reviewFormElementId = in.readLong();
        this.reviewId = in.readLong();
        this.responseType = (String)in.readObject();
        this.responseValue = (String)in.readObject();
    }

}
