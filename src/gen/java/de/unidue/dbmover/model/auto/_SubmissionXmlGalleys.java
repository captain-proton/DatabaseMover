package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _SubmissionXmlGalleys was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _SubmissionXmlGalleys extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> GALLEY_ID = Property.create("galleyId", Long.class);
    public static final Property<Long> SUBMISSION_ID = Property.create("submissionId", Long.class);
    public static final Property<String> LABEL = Property.create("label", String.class);
    public static final Property<String> GALLEY_TYPE = Property.create("galleyType", String.class);
    public static final Property<Integer> VIEWS = Property.create("views", Integer.class);
    public static final Property<Integer> XML_GALLEY_ID = Property.create("xmlGalleyId", Integer.class);

    protected long galleyId;
    protected long submissionId;
    protected String label;
    protected String galleyType;
    protected int views;
    protected Integer xmlGalleyId;


    public void setGalleyId(long galleyId) {
        beforePropertyWrite("galleyId", this.galleyId, galleyId);
        this.galleyId = galleyId;
    }

    public long getGalleyId() {
        beforePropertyRead("galleyId");
        return this.galleyId;
    }

    public void setSubmissionId(long submissionId) {
        beforePropertyWrite("submissionId", this.submissionId, submissionId);
        this.submissionId = submissionId;
    }

    public long getSubmissionId() {
        beforePropertyRead("submissionId");
        return this.submissionId;
    }

    public void setLabel(String label) {
        beforePropertyWrite("label", this.label, label);
        this.label = label;
    }

    public String getLabel() {
        beforePropertyRead("label");
        return this.label;
    }

    public void setGalleyType(String galleyType) {
        beforePropertyWrite("galleyType", this.galleyType, galleyType);
        this.galleyType = galleyType;
    }

    public String getGalleyType() {
        beforePropertyRead("galleyType");
        return this.galleyType;
    }

    public void setViews(int views) {
        beforePropertyWrite("views", this.views, views);
        this.views = views;
    }

    public int getViews() {
        beforePropertyRead("views");
        return this.views;
    }

    public void setXmlGalleyId(Integer xmlGalleyId) {
        beforePropertyWrite("xmlGalleyId", this.xmlGalleyId, xmlGalleyId);
        this.xmlGalleyId = xmlGalleyId;
    }

    public Integer getXmlGalleyId() {
        beforePropertyRead("xmlGalleyId");
        return this.xmlGalleyId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "galleyId":
                return this.galleyId;
            case "submissionId":
                return this.submissionId;
            case "label":
                return this.label;
            case "galleyType":
                return this.galleyType;
            case "views":
                return this.views;
            case "xmlGalleyId":
                return this.xmlGalleyId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "galleyId":
                this.galleyId = val == null ? 0 : (long)val;
                break;
            case "submissionId":
                this.submissionId = val == null ? 0 : (long)val;
                break;
            case "label":
                this.label = (String)val;
                break;
            case "galleyType":
                this.galleyType = (String)val;
                break;
            case "views":
                this.views = val == null ? 0 : (int)val;
                break;
            case "xmlGalleyId":
                this.xmlGalleyId = (Integer)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.galleyId);
        out.writeLong(this.submissionId);
        out.writeObject(this.label);
        out.writeObject(this.galleyType);
        out.writeInt(this.views);
        out.writeObject(this.xmlGalleyId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.galleyId = in.readLong();
        this.submissionId = in.readLong();
        this.label = (String)in.readObject();
        this.galleyType = (String)in.readObject();
        this.views = in.readInt();
        this.xmlGalleyId = (Integer)in.readObject();
    }

}
