package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Submissions was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Submissions extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<String> LOCALE = Property.create("locale", String.class);
    public static final Property<Long> CONTEXT_ID = Property.create("contextId", Long.class);
    public static final Property<Long> SECTION_ID = Property.create("sectionId", Long.class);
    public static final Property<String> LANGUAGE = Property.create("language", String.class);
    public static final Property<String> CITATIONS = Property.create("citations", String.class);
    public static final Property<LocalDateTime> DATE_SUBMITTED = Property.create("dateSubmitted", LocalDateTime.class);
    public static final Property<LocalDateTime> LAST_MODIFIED = Property.create("lastModified", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_STATUS_MODIFIED = Property.create("dateStatusModified", LocalDateTime.class);
    public static final Property<Short> STATUS = Property.create("status", Short.class);
    public static final Property<Short> SUBMISSION_PROGRESS = Property.create("submissionProgress", Short.class);
    public static final Property<String> PAGES = Property.create("pages", String.class);
    public static final Property<Short> HIDE_AUTHOR = Property.create("hideAuthor", Short.class);
    public static final Property<Long> STAGE_ID = Property.create("stageId", Long.class);
    public static final Property<Long> SUBMISSION_ID = Property.create("submissionId", Long.class);

    protected String locale;
    protected long contextId;
    protected Long sectionId;
    protected String language;
    protected String citations;
    protected LocalDateTime dateSubmitted;
    protected LocalDateTime lastModified;
    protected LocalDateTime dateStatusModified;
    protected short status;
    protected short submissionProgress;
    protected String pages;
    protected short hideAuthor;
    protected long stageId;
    protected Long submissionId;


    public void setLocale(String locale) {
        beforePropertyWrite("locale", this.locale, locale);
        this.locale = locale;
    }

    public String getLocale() {
        beforePropertyRead("locale");
        return this.locale;
    }

    public void setContextId(long contextId) {
        beforePropertyWrite("contextId", this.contextId, contextId);
        this.contextId = contextId;
    }

    public long getContextId() {
        beforePropertyRead("contextId");
        return this.contextId;
    }

    public void setSectionId(long sectionId) {
        beforePropertyWrite("sectionId", this.sectionId, sectionId);
        this.sectionId = sectionId;
    }

    public long getSectionId() {
        beforePropertyRead("sectionId");
        if(this.sectionId == null) {
            return 0;
        }
        return this.sectionId;
    }

    public void setLanguage(String language) {
        beforePropertyWrite("language", this.language, language);
        this.language = language;
    }

    public String getLanguage() {
        beforePropertyRead("language");
        return this.language;
    }

    public void setCitations(String citations) {
        beforePropertyWrite("citations", this.citations, citations);
        this.citations = citations;
    }

    public String getCitations() {
        beforePropertyRead("citations");
        return this.citations;
    }

    public void setDateSubmitted(LocalDateTime dateSubmitted) {
        beforePropertyWrite("dateSubmitted", this.dateSubmitted, dateSubmitted);
        this.dateSubmitted = dateSubmitted;
    }

    public LocalDateTime getDateSubmitted() {
        beforePropertyRead("dateSubmitted");
        return this.dateSubmitted;
    }

    public void setLastModified(LocalDateTime lastModified) {
        beforePropertyWrite("lastModified", this.lastModified, lastModified);
        this.lastModified = lastModified;
    }

    public LocalDateTime getLastModified() {
        beforePropertyRead("lastModified");
        return this.lastModified;
    }

    public void setDateStatusModified(LocalDateTime dateStatusModified) {
        beforePropertyWrite("dateStatusModified", this.dateStatusModified, dateStatusModified);
        this.dateStatusModified = dateStatusModified;
    }

    public LocalDateTime getDateStatusModified() {
        beforePropertyRead("dateStatusModified");
        return this.dateStatusModified;
    }

    public void setStatus(short status) {
        beforePropertyWrite("status", this.status, status);
        this.status = status;
    }

    public short getStatus() {
        beforePropertyRead("status");
        return this.status;
    }

    public void setSubmissionProgress(short submissionProgress) {
        beforePropertyWrite("submissionProgress", this.submissionProgress, submissionProgress);
        this.submissionProgress = submissionProgress;
    }

    public short getSubmissionProgress() {
        beforePropertyRead("submissionProgress");
        return this.submissionProgress;
    }

    public void setPages(String pages) {
        beforePropertyWrite("pages", this.pages, pages);
        this.pages = pages;
    }

    public String getPages() {
        beforePropertyRead("pages");
        return this.pages;
    }

    public void setHideAuthor(short hideAuthor) {
        beforePropertyWrite("hideAuthor", this.hideAuthor, hideAuthor);
        this.hideAuthor = hideAuthor;
    }

    public short getHideAuthor() {
        beforePropertyRead("hideAuthor");
        return this.hideAuthor;
    }

    public void setStageId(long stageId) {
        beforePropertyWrite("stageId", this.stageId, stageId);
        this.stageId = stageId;
    }

    public long getStageId() {
        beforePropertyRead("stageId");
        return this.stageId;
    }

    public void setSubmissionId(Long submissionId) {
        beforePropertyWrite("submissionId", this.submissionId, submissionId);
        this.submissionId = submissionId;
    }

    public Long getSubmissionId() {
        beforePropertyRead("submissionId");
        return this.submissionId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "locale":
                return this.locale;
            case "contextId":
                return this.contextId;
            case "sectionId":
                return this.sectionId;
            case "language":
                return this.language;
            case "citations":
                return this.citations;
            case "dateSubmitted":
                return this.dateSubmitted;
            case "lastModified":
                return this.lastModified;
            case "dateStatusModified":
                return this.dateStatusModified;
            case "status":
                return this.status;
            case "submissionProgress":
                return this.submissionProgress;
            case "pages":
                return this.pages;
            case "hideAuthor":
                return this.hideAuthor;
            case "stageId":
                return this.stageId;
            case "submissionId":
                return this.submissionId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "locale":
                this.locale = (String)val;
                break;
            case "contextId":
                this.contextId = val == null ? 0 : (long)val;
                break;
            case "sectionId":
                this.sectionId = (Long)val;
                break;
            case "language":
                this.language = (String)val;
                break;
            case "citations":
                this.citations = (String)val;
                break;
            case "dateSubmitted":
                this.dateSubmitted = (LocalDateTime)val;
                break;
            case "lastModified":
                this.lastModified = (LocalDateTime)val;
                break;
            case "dateStatusModified":
                this.dateStatusModified = (LocalDateTime)val;
                break;
            case "status":
                this.status = val == null ? 0 : (short)val;
                break;
            case "submissionProgress":
                this.submissionProgress = val == null ? 0 : (short)val;
                break;
            case "pages":
                this.pages = (String)val;
                break;
            case "hideAuthor":
                this.hideAuthor = val == null ? 0 : (short)val;
                break;
            case "stageId":
                this.stageId = val == null ? 0 : (long)val;
                break;
            case "submissionId":
                this.submissionId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.locale);
        out.writeLong(this.contextId);
        out.writeObject(this.sectionId);
        out.writeObject(this.language);
        out.writeObject(this.citations);
        out.writeObject(this.dateSubmitted);
        out.writeObject(this.lastModified);
        out.writeObject(this.dateStatusModified);
        out.writeShort(this.status);
        out.writeShort(this.submissionProgress);
        out.writeObject(this.pages);
        out.writeShort(this.hideAuthor);
        out.writeLong(this.stageId);
        out.writeObject(this.submissionId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.locale = (String)in.readObject();
        this.contextId = in.readLong();
        this.sectionId = (Long)in.readObject();
        this.language = (String)in.readObject();
        this.citations = (String)in.readObject();
        this.dateSubmitted = (LocalDateTime)in.readObject();
        this.lastModified = (LocalDateTime)in.readObject();
        this.dateStatusModified = (LocalDateTime)in.readObject();
        this.status = in.readShort();
        this.submissionProgress = in.readShort();
        this.pages = (String)in.readObject();
        this.hideAuthor = in.readShort();
        this.stageId = in.readLong();
        this.submissionId = (Long)in.readObject();
    }

}
