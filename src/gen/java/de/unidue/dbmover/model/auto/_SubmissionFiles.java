package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _SubmissionFiles was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _SubmissionFiles extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String FILE_ID_PK_COLUMN = "file_id";
    public static final String REVISION_PK_COLUMN = "revision";

    public static final Property<Long> SOURCE_FILE_ID = Property.create("sourceFileId", Long.class);
    public static final Property<Long> SOURCE_REVISION = Property.create("sourceRevision", Long.class);
    public static final Property<Long> SUBMISSION_ID = Property.create("submissionId", Long.class);
    public static final Property<String> FILE_TYPE = Property.create("fileType", String.class);
    public static final Property<Long> FILE_SIZE = Property.create("fileSize", Long.class);
    public static final Property<String> ORIGINAL_FILE_NAME = Property.create("originalFileName", String.class);
    public static final Property<Long> FILE_STAGE = Property.create("fileStage", Long.class);
    public static final Property<Short> VIEWABLE = Property.create("viewable", Short.class);
    public static final Property<LocalDateTime> DATE_UPLOADED = Property.create("dateUploaded", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_MODIFIED = Property.create("dateModified", LocalDateTime.class);
    public static final Property<Long> ASSOC_ID = Property.create("assocId", Long.class);
    public static final Property<Long> GENRE_ID = Property.create("genreId", Long.class);
    public static final Property<String> DIRECT_SALES_PRICE = Property.create("directSalesPrice", String.class);
    public static final Property<String> SALES_TYPE = Property.create("salesType", String.class);
    public static final Property<Long> USER_GROUP_ID = Property.create("userGroupId", Long.class);
    public static final Property<Long> UPLOADER_USER_ID = Property.create("uploaderUserId", Long.class);
    public static final Property<Long> ASSOC_TYPE = Property.create("assocType", Long.class);

    protected Long sourceFileId;
    protected Long sourceRevision;
    protected long submissionId;
    protected String fileType;
    protected long fileSize;
    protected String originalFileName;
    protected long fileStage;
    protected Short viewable;
    protected LocalDateTime dateUploaded;
    protected LocalDateTime dateModified;
    protected Long assocId;
    protected Long genreId;
    protected String directSalesPrice;
    protected String salesType;
    protected Long userGroupId;
    protected Long uploaderUserId;
    protected Long assocType;


    public void setSourceFileId(long sourceFileId) {
        beforePropertyWrite("sourceFileId", this.sourceFileId, sourceFileId);
        this.sourceFileId = sourceFileId;
    }

    public long getSourceFileId() {
        beforePropertyRead("sourceFileId");
        if(this.sourceFileId == null) {
            return 0;
        }
        return this.sourceFileId;
    }

    public void setSourceRevision(long sourceRevision) {
        beforePropertyWrite("sourceRevision", this.sourceRevision, sourceRevision);
        this.sourceRevision = sourceRevision;
    }

    public long getSourceRevision() {
        beforePropertyRead("sourceRevision");
        if(this.sourceRevision == null) {
            return 0;
        }
        return this.sourceRevision;
    }

    public void setSubmissionId(long submissionId) {
        beforePropertyWrite("submissionId", this.submissionId, submissionId);
        this.submissionId = submissionId;
    }

    public long getSubmissionId() {
        beforePropertyRead("submissionId");
        return this.submissionId;
    }

    public void setFileType(String fileType) {
        beforePropertyWrite("fileType", this.fileType, fileType);
        this.fileType = fileType;
    }

    public String getFileType() {
        beforePropertyRead("fileType");
        return this.fileType;
    }

    public void setFileSize(long fileSize) {
        beforePropertyWrite("fileSize", this.fileSize, fileSize);
        this.fileSize = fileSize;
    }

    public long getFileSize() {
        beforePropertyRead("fileSize");
        return this.fileSize;
    }

    public void setOriginalFileName(String originalFileName) {
        beforePropertyWrite("originalFileName", this.originalFileName, originalFileName);
        this.originalFileName = originalFileName;
    }

    public String getOriginalFileName() {
        beforePropertyRead("originalFileName");
        return this.originalFileName;
    }

    public void setFileStage(long fileStage) {
        beforePropertyWrite("fileStage", this.fileStage, fileStage);
        this.fileStage = fileStage;
    }

    public long getFileStage() {
        beforePropertyRead("fileStage");
        return this.fileStage;
    }

    public void setViewable(short viewable) {
        beforePropertyWrite("viewable", this.viewable, viewable);
        this.viewable = viewable;
    }

    public short getViewable() {
        beforePropertyRead("viewable");
        if(this.viewable == null) {
            return 0;
        }
        return this.viewable;
    }

    public void setDateUploaded(LocalDateTime dateUploaded) {
        beforePropertyWrite("dateUploaded", this.dateUploaded, dateUploaded);
        this.dateUploaded = dateUploaded;
    }

    public LocalDateTime getDateUploaded() {
        beforePropertyRead("dateUploaded");
        return this.dateUploaded;
    }

    public void setDateModified(LocalDateTime dateModified) {
        beforePropertyWrite("dateModified", this.dateModified, dateModified);
        this.dateModified = dateModified;
    }

    public LocalDateTime getDateModified() {
        beforePropertyRead("dateModified");
        return this.dateModified;
    }

    public void setAssocId(long assocId) {
        beforePropertyWrite("assocId", this.assocId, assocId);
        this.assocId = assocId;
    }

    public long getAssocId() {
        beforePropertyRead("assocId");
        if(this.assocId == null) {
            return 0;
        }
        return this.assocId;
    }

    public void setGenreId(long genreId) {
        beforePropertyWrite("genreId", this.genreId, genreId);
        this.genreId = genreId;
    }

    public long getGenreId() {
        beforePropertyRead("genreId");
        if(this.genreId == null) {
            return 0;
        }
        return this.genreId;
    }

    public void setDirectSalesPrice(String directSalesPrice) {
        beforePropertyWrite("directSalesPrice", this.directSalesPrice, directSalesPrice);
        this.directSalesPrice = directSalesPrice;
    }

    public String getDirectSalesPrice() {
        beforePropertyRead("directSalesPrice");
        return this.directSalesPrice;
    }

    public void setSalesType(String salesType) {
        beforePropertyWrite("salesType", this.salesType, salesType);
        this.salesType = salesType;
    }

    public String getSalesType() {
        beforePropertyRead("salesType");
        return this.salesType;
    }

    public void setUserGroupId(long userGroupId) {
        beforePropertyWrite("userGroupId", this.userGroupId, userGroupId);
        this.userGroupId = userGroupId;
    }

    public long getUserGroupId() {
        beforePropertyRead("userGroupId");
        if(this.userGroupId == null) {
            return 0;
        }
        return this.userGroupId;
    }

    public void setUploaderUserId(long uploaderUserId) {
        beforePropertyWrite("uploaderUserId", this.uploaderUserId, uploaderUserId);
        this.uploaderUserId = uploaderUserId;
    }

    public long getUploaderUserId() {
        beforePropertyRead("uploaderUserId");
        if(this.uploaderUserId == null) {
            return 0;
        }
        return this.uploaderUserId;
    }

    public void setAssocType(long assocType) {
        beforePropertyWrite("assocType", this.assocType, assocType);
        this.assocType = assocType;
    }

    public long getAssocType() {
        beforePropertyRead("assocType");
        if(this.assocType == null) {
            return 0;
        }
        return this.assocType;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "sourceFileId":
                return this.sourceFileId;
            case "sourceRevision":
                return this.sourceRevision;
            case "submissionId":
                return this.submissionId;
            case "fileType":
                return this.fileType;
            case "fileSize":
                return this.fileSize;
            case "originalFileName":
                return this.originalFileName;
            case "fileStage":
                return this.fileStage;
            case "viewable":
                return this.viewable;
            case "dateUploaded":
                return this.dateUploaded;
            case "dateModified":
                return this.dateModified;
            case "assocId":
                return this.assocId;
            case "genreId":
                return this.genreId;
            case "directSalesPrice":
                return this.directSalesPrice;
            case "salesType":
                return this.salesType;
            case "userGroupId":
                return this.userGroupId;
            case "uploaderUserId":
                return this.uploaderUserId;
            case "assocType":
                return this.assocType;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "sourceFileId":
                this.sourceFileId = (Long)val;
                break;
            case "sourceRevision":
                this.sourceRevision = (Long)val;
                break;
            case "submissionId":
                this.submissionId = val == null ? 0 : (long)val;
                break;
            case "fileType":
                this.fileType = (String)val;
                break;
            case "fileSize":
                this.fileSize = val == null ? 0 : (long)val;
                break;
            case "originalFileName":
                this.originalFileName = (String)val;
                break;
            case "fileStage":
                this.fileStage = val == null ? 0 : (long)val;
                break;
            case "viewable":
                this.viewable = (Short)val;
                break;
            case "dateUploaded":
                this.dateUploaded = (LocalDateTime)val;
                break;
            case "dateModified":
                this.dateModified = (LocalDateTime)val;
                break;
            case "assocId":
                this.assocId = (Long)val;
                break;
            case "genreId":
                this.genreId = (Long)val;
                break;
            case "directSalesPrice":
                this.directSalesPrice = (String)val;
                break;
            case "salesType":
                this.salesType = (String)val;
                break;
            case "userGroupId":
                this.userGroupId = (Long)val;
                break;
            case "uploaderUserId":
                this.uploaderUserId = (Long)val;
                break;
            case "assocType":
                this.assocType = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.sourceFileId);
        out.writeObject(this.sourceRevision);
        out.writeLong(this.submissionId);
        out.writeObject(this.fileType);
        out.writeLong(this.fileSize);
        out.writeObject(this.originalFileName);
        out.writeLong(this.fileStage);
        out.writeObject(this.viewable);
        out.writeObject(this.dateUploaded);
        out.writeObject(this.dateModified);
        out.writeObject(this.assocId);
        out.writeObject(this.genreId);
        out.writeObject(this.directSalesPrice);
        out.writeObject(this.salesType);
        out.writeObject(this.userGroupId);
        out.writeObject(this.uploaderUserId);
        out.writeObject(this.assocType);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.sourceFileId = (Long)in.readObject();
        this.sourceRevision = (Long)in.readObject();
        this.submissionId = in.readLong();
        this.fileType = (String)in.readObject();
        this.fileSize = in.readLong();
        this.originalFileName = (String)in.readObject();
        this.fileStage = in.readLong();
        this.viewable = (Short)in.readObject();
        this.dateUploaded = (LocalDateTime)in.readObject();
        this.dateModified = (LocalDateTime)in.readObject();
        this.assocId = (Long)in.readObject();
        this.genreId = (Long)in.readObject();
        this.directSalesPrice = (String)in.readObject();
        this.salesType = (String)in.readObject();
        this.userGroupId = (Long)in.readObject();
        this.uploaderUserId = (Long)in.readObject();
        this.assocType = (Long)in.readObject();
    }

}
