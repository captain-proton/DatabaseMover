package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _CompletedPayments was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _CompletedPayments extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String COMPLETED_PAYMENT_ID_PK_COLUMN = "completed_payment_id";

    public static final Property<LocalDateTime> TIMESTAMP = Property.create("timestamp", LocalDateTime.class);
    public static final Property<Long> PAYMENT_TYPE = Property.create("paymentType", Long.class);
    public static final Property<Long> CONTEXT_ID = Property.create("contextId", Long.class);
    public static final Property<Long> USER_ID = Property.create("userId", Long.class);
    public static final Property<Long> ASSOC_ID = Property.create("assocId", Long.class);
    public static final Property<Double> AMOUNT = Property.create("amount", Double.class);
    public static final Property<String> CURRENCY_CODE_ALPHA = Property.create("currencyCodeAlpha", String.class);
    public static final Property<String> PAYMENT_METHOD_PLUGIN_NAME = Property.create("paymentMethodPluginName", String.class);

    protected LocalDateTime timestamp;
    protected long paymentType;
    protected long contextId;
    protected Long userId;
    protected Long assocId;
    protected double amount;
    protected String currencyCodeAlpha;
    protected String paymentMethodPluginName;


    public void setTimestamp(LocalDateTime timestamp) {
        beforePropertyWrite("timestamp", this.timestamp, timestamp);
        this.timestamp = timestamp;
    }

    public LocalDateTime getTimestamp() {
        beforePropertyRead("timestamp");
        return this.timestamp;
    }

    public void setPaymentType(long paymentType) {
        beforePropertyWrite("paymentType", this.paymentType, paymentType);
        this.paymentType = paymentType;
    }

    public long getPaymentType() {
        beforePropertyRead("paymentType");
        return this.paymentType;
    }

    public void setContextId(long contextId) {
        beforePropertyWrite("contextId", this.contextId, contextId);
        this.contextId = contextId;
    }

    public long getContextId() {
        beforePropertyRead("contextId");
        return this.contextId;
    }

    public void setUserId(long userId) {
        beforePropertyWrite("userId", this.userId, userId);
        this.userId = userId;
    }

    public long getUserId() {
        beforePropertyRead("userId");
        if(this.userId == null) {
            return 0;
        }
        return this.userId;
    }

    public void setAssocId(long assocId) {
        beforePropertyWrite("assocId", this.assocId, assocId);
        this.assocId = assocId;
    }

    public long getAssocId() {
        beforePropertyRead("assocId");
        if(this.assocId == null) {
            return 0;
        }
        return this.assocId;
    }

    public void setAmount(double amount) {
        beforePropertyWrite("amount", this.amount, amount);
        this.amount = amount;
    }

    public double getAmount() {
        beforePropertyRead("amount");
        return this.amount;
    }

    public void setCurrencyCodeAlpha(String currencyCodeAlpha) {
        beforePropertyWrite("currencyCodeAlpha", this.currencyCodeAlpha, currencyCodeAlpha);
        this.currencyCodeAlpha = currencyCodeAlpha;
    }

    public String getCurrencyCodeAlpha() {
        beforePropertyRead("currencyCodeAlpha");
        return this.currencyCodeAlpha;
    }

    public void setPaymentMethodPluginName(String paymentMethodPluginName) {
        beforePropertyWrite("paymentMethodPluginName", this.paymentMethodPluginName, paymentMethodPluginName);
        this.paymentMethodPluginName = paymentMethodPluginName;
    }

    public String getPaymentMethodPluginName() {
        beforePropertyRead("paymentMethodPluginName");
        return this.paymentMethodPluginName;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "timestamp":
                return this.timestamp;
            case "paymentType":
                return this.paymentType;
            case "contextId":
                return this.contextId;
            case "userId":
                return this.userId;
            case "assocId":
                return this.assocId;
            case "amount":
                return this.amount;
            case "currencyCodeAlpha":
                return this.currencyCodeAlpha;
            case "paymentMethodPluginName":
                return this.paymentMethodPluginName;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "timestamp":
                this.timestamp = (LocalDateTime)val;
                break;
            case "paymentType":
                this.paymentType = val == null ? 0 : (long)val;
                break;
            case "contextId":
                this.contextId = val == null ? 0 : (long)val;
                break;
            case "userId":
                this.userId = (Long)val;
                break;
            case "assocId":
                this.assocId = (Long)val;
                break;
            case "amount":
                this.amount = val == null ? 0 : (double)val;
                break;
            case "currencyCodeAlpha":
                this.currencyCodeAlpha = (String)val;
                break;
            case "paymentMethodPluginName":
                this.paymentMethodPluginName = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.timestamp);
        out.writeLong(this.paymentType);
        out.writeLong(this.contextId);
        out.writeObject(this.userId);
        out.writeObject(this.assocId);
        out.writeDouble(this.amount);
        out.writeObject(this.currencyCodeAlpha);
        out.writeObject(this.paymentMethodPluginName);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.timestamp = (LocalDateTime)in.readObject();
        this.paymentType = in.readLong();
        this.contextId = in.readLong();
        this.userId = (Long)in.readObject();
        this.assocId = (Long)in.readObject();
        this.amount = in.readDouble();
        this.currencyCodeAlpha = (String)in.readObject();
        this.paymentMethodPluginName = (String)in.readObject();
    }

}
