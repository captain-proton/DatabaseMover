package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _StaticPages was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _StaticPages extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<String> PATH = Property.create("path", String.class);
    public static final Property<Long> CONTEXT_ID = Property.create("contextId", Long.class);
    public static final Property<Long> STATIC_PAGE_ID = Property.create("staticPageId", Long.class);

    protected String path;
    protected long contextId;
    protected Long staticPageId;


    public void setPath(String path) {
        beforePropertyWrite("path", this.path, path);
        this.path = path;
    }

    public String getPath() {
        beforePropertyRead("path");
        return this.path;
    }

    public void setContextId(long contextId) {
        beforePropertyWrite("contextId", this.contextId, contextId);
        this.contextId = contextId;
    }

    public long getContextId() {
        beforePropertyRead("contextId");
        return this.contextId;
    }

    public void setStaticPageId(Long staticPageId) {
        beforePropertyWrite("staticPageId", this.staticPageId, staticPageId);
        this.staticPageId = staticPageId;
    }

    public Long getStaticPageId() {
        beforePropertyRead("staticPageId");
        return this.staticPageId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "path":
                return this.path;
            case "contextId":
                return this.contextId;
            case "staticPageId":
                return this.staticPageId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "path":
                this.path = (String)val;
                break;
            case "contextId":
                this.contextId = val == null ? 0 : (long)val;
                break;
            case "staticPageId":
                this.staticPageId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.path);
        out.writeLong(this.contextId);
        out.writeObject(this.staticPageId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.path = (String)in.readObject();
        this.contextId = in.readLong();
        this.staticPageId = (Long)in.readObject();
    }

}
