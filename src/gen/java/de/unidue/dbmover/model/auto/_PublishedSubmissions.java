package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _PublishedSubmissions was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PublishedSubmissions extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> SUBMISSION_ID = Property.create("submissionId", Long.class);
    public static final Property<Long> ISSUE_ID = Property.create("issueId", Long.class);
    public static final Property<LocalDateTime> DATE_PUBLISHED = Property.create("datePublished", LocalDateTime.class);
    public static final Property<Double> SEQ = Property.create("seq", Double.class);
    public static final Property<Short> ACCESS_STATUS = Property.create("accessStatus", Short.class);
    public static final Property<Long> PUBLISHED_SUBMISSION_ID = Property.create("publishedSubmissionId", Long.class);

    protected long submissionId;
    protected long issueId;
    protected LocalDateTime datePublished;
    protected double seq;
    protected short accessStatus;
    protected Long publishedSubmissionId;


    public void setSubmissionId(long submissionId) {
        beforePropertyWrite("submissionId", this.submissionId, submissionId);
        this.submissionId = submissionId;
    }

    public long getSubmissionId() {
        beforePropertyRead("submissionId");
        return this.submissionId;
    }

    public void setIssueId(long issueId) {
        beforePropertyWrite("issueId", this.issueId, issueId);
        this.issueId = issueId;
    }

    public long getIssueId() {
        beforePropertyRead("issueId");
        return this.issueId;
    }

    public void setDatePublished(LocalDateTime datePublished) {
        beforePropertyWrite("datePublished", this.datePublished, datePublished);
        this.datePublished = datePublished;
    }

    public LocalDateTime getDatePublished() {
        beforePropertyRead("datePublished");
        return this.datePublished;
    }

    public void setSeq(double seq) {
        beforePropertyWrite("seq", this.seq, seq);
        this.seq = seq;
    }

    public double getSeq() {
        beforePropertyRead("seq");
        return this.seq;
    }

    public void setAccessStatus(short accessStatus) {
        beforePropertyWrite("accessStatus", this.accessStatus, accessStatus);
        this.accessStatus = accessStatus;
    }

    public short getAccessStatus() {
        beforePropertyRead("accessStatus");
        return this.accessStatus;
    }

    public void setPublishedSubmissionId(Long publishedSubmissionId) {
        beforePropertyWrite("publishedSubmissionId", this.publishedSubmissionId, publishedSubmissionId);
        this.publishedSubmissionId = publishedSubmissionId;
    }

    public Long getPublishedSubmissionId() {
        beforePropertyRead("publishedSubmissionId");
        return this.publishedSubmissionId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "submissionId":
                return this.submissionId;
            case "issueId":
                return this.issueId;
            case "datePublished":
                return this.datePublished;
            case "seq":
                return this.seq;
            case "accessStatus":
                return this.accessStatus;
            case "publishedSubmissionId":
                return this.publishedSubmissionId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "submissionId":
                this.submissionId = val == null ? 0 : (long)val;
                break;
            case "issueId":
                this.issueId = val == null ? 0 : (long)val;
                break;
            case "datePublished":
                this.datePublished = (LocalDateTime)val;
                break;
            case "seq":
                this.seq = val == null ? 0 : (double)val;
                break;
            case "accessStatus":
                this.accessStatus = val == null ? 0 : (short)val;
                break;
            case "publishedSubmissionId":
                this.publishedSubmissionId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.submissionId);
        out.writeLong(this.issueId);
        out.writeObject(this.datePublished);
        out.writeDouble(this.seq);
        out.writeShort(this.accessStatus);
        out.writeObject(this.publishedSubmissionId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.submissionId = in.readLong();
        this.issueId = in.readLong();
        this.datePublished = (LocalDateTime)in.readObject();
        this.seq = in.readDouble();
        this.accessStatus = in.readShort();
        this.publishedSubmissionId = (Long)in.readObject();
    }

}
