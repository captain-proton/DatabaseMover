package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _EmailTemplatesDefault was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _EmailTemplatesDefault extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<String> EMAIL_KEY = Property.create("emailKey", String.class);
    public static final Property<Short> CAN_DISABLE = Property.create("canDisable", Short.class);
    public static final Property<Short> CAN_EDIT = Property.create("canEdit", Short.class);
    public static final Property<Long> FROM_ROLE_ID = Property.create("fromRoleId", Long.class);
    public static final Property<Long> TO_ROLE_ID = Property.create("toRoleId", Long.class);
    public static final Property<Long> EMAIL_ID = Property.create("emailId", Long.class);

    protected String emailKey;
    protected short canDisable;
    protected short canEdit;
    protected Long fromRoleId;
    protected Long toRoleId;
    protected Long emailId;


    public void setEmailKey(String emailKey) {
        beforePropertyWrite("emailKey", this.emailKey, emailKey);
        this.emailKey = emailKey;
    }

    public String getEmailKey() {
        beforePropertyRead("emailKey");
        return this.emailKey;
    }

    public void setCanDisable(short canDisable) {
        beforePropertyWrite("canDisable", this.canDisable, canDisable);
        this.canDisable = canDisable;
    }

    public short getCanDisable() {
        beforePropertyRead("canDisable");
        return this.canDisable;
    }

    public void setCanEdit(short canEdit) {
        beforePropertyWrite("canEdit", this.canEdit, canEdit);
        this.canEdit = canEdit;
    }

    public short getCanEdit() {
        beforePropertyRead("canEdit");
        return this.canEdit;
    }

    public void setFromRoleId(long fromRoleId) {
        beforePropertyWrite("fromRoleId", this.fromRoleId, fromRoleId);
        this.fromRoleId = fromRoleId;
    }

    public long getFromRoleId() {
        beforePropertyRead("fromRoleId");
        if(this.fromRoleId == null) {
            return 0;
        }
        return this.fromRoleId;
    }

    public void setToRoleId(long toRoleId) {
        beforePropertyWrite("toRoleId", this.toRoleId, toRoleId);
        this.toRoleId = toRoleId;
    }

    public long getToRoleId() {
        beforePropertyRead("toRoleId");
        if(this.toRoleId == null) {
            return 0;
        }
        return this.toRoleId;
    }

    public void setEmailId(Long emailId) {
        beforePropertyWrite("emailId", this.emailId, emailId);
        this.emailId = emailId;
    }

    public Long getEmailId() {
        beforePropertyRead("emailId");
        return this.emailId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "emailKey":
                return this.emailKey;
            case "canDisable":
                return this.canDisable;
            case "canEdit":
                return this.canEdit;
            case "fromRoleId":
                return this.fromRoleId;
            case "toRoleId":
                return this.toRoleId;
            case "emailId":
                return this.emailId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "emailKey":
                this.emailKey = (String)val;
                break;
            case "canDisable":
                this.canDisable = val == null ? 0 : (short)val;
                break;
            case "canEdit":
                this.canEdit = val == null ? 0 : (short)val;
                break;
            case "fromRoleId":
                this.fromRoleId = (Long)val;
                break;
            case "toRoleId":
                this.toRoleId = (Long)val;
                break;
            case "emailId":
                this.emailId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.emailKey);
        out.writeShort(this.canDisable);
        out.writeShort(this.canEdit);
        out.writeObject(this.fromRoleId);
        out.writeObject(this.toRoleId);
        out.writeObject(this.emailId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.emailKey = (String)in.readObject();
        this.canDisable = in.readShort();
        this.canEdit = in.readShort();
        this.fromRoleId = (Long)in.readObject();
        this.toRoleId = (Long)in.readObject();
        this.emailId = (Long)in.readObject();
    }

}
