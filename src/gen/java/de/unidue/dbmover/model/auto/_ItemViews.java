package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _ItemViews was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ItemViews extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ASSOC_ID_PK_COLUMN = "assoc_id";
    public static final String ASSOC_TYPE_PK_COLUMN = "assoc_type";
    public static final String USER_ID_PK_COLUMN = "user_id";

    public static final Property<Long> ASSOC_TYPE = Property.create("assocType", Long.class);
    public static final Property<String> ASSOC_ID = Property.create("assocId", String.class);
    public static final Property<Long> USER_ID = Property.create("userId", Long.class);
    public static final Property<LocalDateTime> DATE_LAST_VIEWED = Property.create("dateLastViewed", LocalDateTime.class);

    protected long assocType;
    protected String assocId;
    protected long userId;
    protected LocalDateTime dateLastViewed;


    public void setAssocType(long assocType) {
        beforePropertyWrite("assocType", this.assocType, assocType);
        this.assocType = assocType;
    }

    public long getAssocType() {
        beforePropertyRead("assocType");
        return this.assocType;
    }

    public void setAssocId(String assocId) {
        beforePropertyWrite("assocId", this.assocId, assocId);
        this.assocId = assocId;
    }

    public String getAssocId() {
        beforePropertyRead("assocId");
        return this.assocId;
    }

    public void setUserId(long userId) {
        beforePropertyWrite("userId", this.userId, userId);
        this.userId = userId;
    }

    public long getUserId() {
        beforePropertyRead("userId");
        return this.userId;
    }

    public void setDateLastViewed(LocalDateTime dateLastViewed) {
        beforePropertyWrite("dateLastViewed", this.dateLastViewed, dateLastViewed);
        this.dateLastViewed = dateLastViewed;
    }

    public LocalDateTime getDateLastViewed() {
        beforePropertyRead("dateLastViewed");
        return this.dateLastViewed;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "assocType":
                return this.assocType;
            case "assocId":
                return this.assocId;
            case "userId":
                return this.userId;
            case "dateLastViewed":
                return this.dateLastViewed;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "assocType":
                this.assocType = val == null ? 0 : (long)val;
                break;
            case "assocId":
                this.assocId = (String)val;
                break;
            case "userId":
                this.userId = val == null ? 0 : (long)val;
                break;
            case "dateLastViewed":
                this.dateLastViewed = (LocalDateTime)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.assocType);
        out.writeObject(this.assocId);
        out.writeLong(this.userId);
        out.writeObject(this.dateLastViewed);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.assocType = in.readLong();
        this.assocId = (String)in.readObject();
        this.userId = in.readLong();
        this.dateLastViewed = (LocalDateTime)in.readObject();
    }

}
