package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Users was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Users extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String USER_ID_PK_COLUMN = "user_id";

    public static final Property<String> USERNAME = Property.create("username", String.class);
    public static final Property<String> PASSWORD = Property.create("password", String.class);
    public static final Property<String> SALUTATION = Property.create("salutation", String.class);
    public static final Property<String> FIRST_NAME = Property.create("firstName", String.class);
    public static final Property<String> MIDDLE_NAME = Property.create("middleName", String.class);
    public static final Property<String> LAST_NAME = Property.create("lastName", String.class);
    public static final Property<String> SUFFIX = Property.create("suffix", String.class);
    public static final Property<String> GENDER = Property.create("gender", String.class);
    public static final Property<String> INITIALS = Property.create("initials", String.class);
    public static final Property<String> EMAIL = Property.create("email", String.class);
    public static final Property<String> URL = Property.create("url", String.class);
    public static final Property<String> PHONE = Property.create("phone", String.class);
    public static final Property<String> MAILING_ADDRESS = Property.create("mailingAddress", String.class);
    public static final Property<String> BILLING_ADDRESS = Property.create("billingAddress", String.class);
    public static final Property<String> COUNTRY = Property.create("country", String.class);
    public static final Property<String> LOCALES = Property.create("locales", String.class);
    public static final Property<LocalDateTime> DATE_LAST_EMAIL = Property.create("dateLastEmail", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_REGISTERED = Property.create("dateRegistered", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_VALIDATED = Property.create("dateValidated", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_LAST_LOGIN = Property.create("dateLastLogin", LocalDateTime.class);
    public static final Property<Short> MUST_CHANGE_PASSWORD = Property.create("mustChangePassword", Short.class);
    public static final Property<Long> AUTH_ID = Property.create("authId", Long.class);
    public static final Property<String> AUTH_STR = Property.create("authStr", String.class);
    public static final Property<Short> DISABLED = Property.create("disabled", Short.class);
    public static final Property<String> DISABLED_REASON = Property.create("disabledReason", String.class);
    public static final Property<Short> INLINE_HELP = Property.create("inlineHelp", Short.class);

    protected String username;
    protected String password;
    protected String salutation;
    protected String firstName;
    protected String middleName;
    protected String lastName;
    protected String suffix;
    protected String gender;
    protected String initials;
    protected String email;
    protected String url;
    protected String phone;
    protected String mailingAddress;
    protected String billingAddress;
    protected String country;
    protected String locales;
    protected LocalDateTime dateLastEmail;
    protected LocalDateTime dateRegistered;
    protected LocalDateTime dateValidated;
    protected LocalDateTime dateLastLogin;
    protected Short mustChangePassword;
    protected Long authId;
    protected String authStr;
    protected short disabled;
    protected String disabledReason;
    protected Short inlineHelp;


    public void setUsername(String username) {
        beforePropertyWrite("username", this.username, username);
        this.username = username;
    }

    public String getUsername() {
        beforePropertyRead("username");
        return this.username;
    }

    public void setPassword(String password) {
        beforePropertyWrite("password", this.password, password);
        this.password = password;
    }

    public String getPassword() {
        beforePropertyRead("password");
        return this.password;
    }

    public void setSalutation(String salutation) {
        beforePropertyWrite("salutation", this.salutation, salutation);
        this.salutation = salutation;
    }

    public String getSalutation() {
        beforePropertyRead("salutation");
        return this.salutation;
    }

    public void setFirstName(String firstName) {
        beforePropertyWrite("firstName", this.firstName, firstName);
        this.firstName = firstName;
    }

    public String getFirstName() {
        beforePropertyRead("firstName");
        return this.firstName;
    }

    public void setMiddleName(String middleName) {
        beforePropertyWrite("middleName", this.middleName, middleName);
        this.middleName = middleName;
    }

    public String getMiddleName() {
        beforePropertyRead("middleName");
        return this.middleName;
    }

    public void setLastName(String lastName) {
        beforePropertyWrite("lastName", this.lastName, lastName);
        this.lastName = lastName;
    }

    public String getLastName() {
        beforePropertyRead("lastName");
        return this.lastName;
    }

    public void setSuffix(String suffix) {
        beforePropertyWrite("suffix", this.suffix, suffix);
        this.suffix = suffix;
    }

    public String getSuffix() {
        beforePropertyRead("suffix");
        return this.suffix;
    }

    public void setGender(String gender) {
        beforePropertyWrite("gender", this.gender, gender);
        this.gender = gender;
    }

    public String getGender() {
        beforePropertyRead("gender");
        return this.gender;
    }

    public void setInitials(String initials) {
        beforePropertyWrite("initials", this.initials, initials);
        this.initials = initials;
    }

    public String getInitials() {
        beforePropertyRead("initials");
        return this.initials;
    }

    public void setEmail(String email) {
        beforePropertyWrite("email", this.email, email);
        this.email = email;
    }

    public String getEmail() {
        beforePropertyRead("email");
        return this.email;
    }

    public void setUrl(String url) {
        beforePropertyWrite("url", this.url, url);
        this.url = url;
    }

    public String getUrl() {
        beforePropertyRead("url");
        return this.url;
    }

    public void setPhone(String phone) {
        beforePropertyWrite("phone", this.phone, phone);
        this.phone = phone;
    }

    public String getPhone() {
        beforePropertyRead("phone");
        return this.phone;
    }

    public void setMailingAddress(String mailingAddress) {
        beforePropertyWrite("mailingAddress", this.mailingAddress, mailingAddress);
        this.mailingAddress = mailingAddress;
    }

    public String getMailingAddress() {
        beforePropertyRead("mailingAddress");
        return this.mailingAddress;
    }

    public void setBillingAddress(String billingAddress) {
        beforePropertyWrite("billingAddress", this.billingAddress, billingAddress);
        this.billingAddress = billingAddress;
    }

    public String getBillingAddress() {
        beforePropertyRead("billingAddress");
        return this.billingAddress;
    }

    public void setCountry(String country) {
        beforePropertyWrite("country", this.country, country);
        this.country = country;
    }

    public String getCountry() {
        beforePropertyRead("country");
        return this.country;
    }

    public void setLocales(String locales) {
        beforePropertyWrite("locales", this.locales, locales);
        this.locales = locales;
    }

    public String getLocales() {
        beforePropertyRead("locales");
        return this.locales;
    }

    public void setDateLastEmail(LocalDateTime dateLastEmail) {
        beforePropertyWrite("dateLastEmail", this.dateLastEmail, dateLastEmail);
        this.dateLastEmail = dateLastEmail;
    }

    public LocalDateTime getDateLastEmail() {
        beforePropertyRead("dateLastEmail");
        return this.dateLastEmail;
    }

    public void setDateRegistered(LocalDateTime dateRegistered) {
        beforePropertyWrite("dateRegistered", this.dateRegistered, dateRegistered);
        this.dateRegistered = dateRegistered;
    }

    public LocalDateTime getDateRegistered() {
        beforePropertyRead("dateRegistered");
        return this.dateRegistered;
    }

    public void setDateValidated(LocalDateTime dateValidated) {
        beforePropertyWrite("dateValidated", this.dateValidated, dateValidated);
        this.dateValidated = dateValidated;
    }

    public LocalDateTime getDateValidated() {
        beforePropertyRead("dateValidated");
        return this.dateValidated;
    }

    public void setDateLastLogin(LocalDateTime dateLastLogin) {
        beforePropertyWrite("dateLastLogin", this.dateLastLogin, dateLastLogin);
        this.dateLastLogin = dateLastLogin;
    }

    public LocalDateTime getDateLastLogin() {
        beforePropertyRead("dateLastLogin");
        return this.dateLastLogin;
    }

    public void setMustChangePassword(short mustChangePassword) {
        beforePropertyWrite("mustChangePassword", this.mustChangePassword, mustChangePassword);
        this.mustChangePassword = mustChangePassword;
    }

    public short getMustChangePassword() {
        beforePropertyRead("mustChangePassword");
        if(this.mustChangePassword == null) {
            return 0;
        }
        return this.mustChangePassword;
    }

    public void setAuthId(long authId) {
        beforePropertyWrite("authId", this.authId, authId);
        this.authId = authId;
    }

    public long getAuthId() {
        beforePropertyRead("authId");
        if(this.authId == null) {
            return 0;
        }
        return this.authId;
    }

    public void setAuthStr(String authStr) {
        beforePropertyWrite("authStr", this.authStr, authStr);
        this.authStr = authStr;
    }

    public String getAuthStr() {
        beforePropertyRead("authStr");
        return this.authStr;
    }

    public void setDisabled(short disabled) {
        beforePropertyWrite("disabled", this.disabled, disabled);
        this.disabled = disabled;
    }

    public short getDisabled() {
        beforePropertyRead("disabled");
        return this.disabled;
    }

    public void setDisabledReason(String disabledReason) {
        beforePropertyWrite("disabledReason", this.disabledReason, disabledReason);
        this.disabledReason = disabledReason;
    }

    public String getDisabledReason() {
        beforePropertyRead("disabledReason");
        return this.disabledReason;
    }

    public void setInlineHelp(short inlineHelp) {
        beforePropertyWrite("inlineHelp", this.inlineHelp, inlineHelp);
        this.inlineHelp = inlineHelp;
    }

    public short getInlineHelp() {
        beforePropertyRead("inlineHelp");
        if(this.inlineHelp == null) {
            return 0;
        }
        return this.inlineHelp;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "username":
                return this.username;
            case "password":
                return this.password;
            case "salutation":
                return this.salutation;
            case "firstName":
                return this.firstName;
            case "middleName":
                return this.middleName;
            case "lastName":
                return this.lastName;
            case "suffix":
                return this.suffix;
            case "gender":
                return this.gender;
            case "initials":
                return this.initials;
            case "email":
                return this.email;
            case "url":
                return this.url;
            case "phone":
                return this.phone;
            case "mailingAddress":
                return this.mailingAddress;
            case "billingAddress":
                return this.billingAddress;
            case "country":
                return this.country;
            case "locales":
                return this.locales;
            case "dateLastEmail":
                return this.dateLastEmail;
            case "dateRegistered":
                return this.dateRegistered;
            case "dateValidated":
                return this.dateValidated;
            case "dateLastLogin":
                return this.dateLastLogin;
            case "mustChangePassword":
                return this.mustChangePassword;
            case "authId":
                return this.authId;
            case "authStr":
                return this.authStr;
            case "disabled":
                return this.disabled;
            case "disabledReason":
                return this.disabledReason;
            case "inlineHelp":
                return this.inlineHelp;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "username":
                this.username = (String)val;
                break;
            case "password":
                this.password = (String)val;
                break;
            case "salutation":
                this.salutation = (String)val;
                break;
            case "firstName":
                this.firstName = (String)val;
                break;
            case "middleName":
                this.middleName = (String)val;
                break;
            case "lastName":
                this.lastName = (String)val;
                break;
            case "suffix":
                this.suffix = (String)val;
                break;
            case "gender":
                this.gender = (String)val;
                break;
            case "initials":
                this.initials = (String)val;
                break;
            case "email":
                this.email = (String)val;
                break;
            case "url":
                this.url = (String)val;
                break;
            case "phone":
                this.phone = (String)val;
                break;
            case "mailingAddress":
                this.mailingAddress = (String)val;
                break;
            case "billingAddress":
                this.billingAddress = (String)val;
                break;
            case "country":
                this.country = (String)val;
                break;
            case "locales":
                this.locales = (String)val;
                break;
            case "dateLastEmail":
                this.dateLastEmail = (LocalDateTime)val;
                break;
            case "dateRegistered":
                this.dateRegistered = (LocalDateTime)val;
                break;
            case "dateValidated":
                this.dateValidated = (LocalDateTime)val;
                break;
            case "dateLastLogin":
                this.dateLastLogin = (LocalDateTime)val;
                break;
            case "mustChangePassword":
                this.mustChangePassword = (Short)val;
                break;
            case "authId":
                this.authId = (Long)val;
                break;
            case "authStr":
                this.authStr = (String)val;
                break;
            case "disabled":
                this.disabled = val == null ? 0 : (short)val;
                break;
            case "disabledReason":
                this.disabledReason = (String)val;
                break;
            case "inlineHelp":
                this.inlineHelp = (Short)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.username);
        out.writeObject(this.password);
        out.writeObject(this.salutation);
        out.writeObject(this.firstName);
        out.writeObject(this.middleName);
        out.writeObject(this.lastName);
        out.writeObject(this.suffix);
        out.writeObject(this.gender);
        out.writeObject(this.initials);
        out.writeObject(this.email);
        out.writeObject(this.url);
        out.writeObject(this.phone);
        out.writeObject(this.mailingAddress);
        out.writeObject(this.billingAddress);
        out.writeObject(this.country);
        out.writeObject(this.locales);
        out.writeObject(this.dateLastEmail);
        out.writeObject(this.dateRegistered);
        out.writeObject(this.dateValidated);
        out.writeObject(this.dateLastLogin);
        out.writeObject(this.mustChangePassword);
        out.writeObject(this.authId);
        out.writeObject(this.authStr);
        out.writeShort(this.disabled);
        out.writeObject(this.disabledReason);
        out.writeObject(this.inlineHelp);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.username = (String)in.readObject();
        this.password = (String)in.readObject();
        this.salutation = (String)in.readObject();
        this.firstName = (String)in.readObject();
        this.middleName = (String)in.readObject();
        this.lastName = (String)in.readObject();
        this.suffix = (String)in.readObject();
        this.gender = (String)in.readObject();
        this.initials = (String)in.readObject();
        this.email = (String)in.readObject();
        this.url = (String)in.readObject();
        this.phone = (String)in.readObject();
        this.mailingAddress = (String)in.readObject();
        this.billingAddress = (String)in.readObject();
        this.country = (String)in.readObject();
        this.locales = (String)in.readObject();
        this.dateLastEmail = (LocalDateTime)in.readObject();
        this.dateRegistered = (LocalDateTime)in.readObject();
        this.dateValidated = (LocalDateTime)in.readObject();
        this.dateLastLogin = (LocalDateTime)in.readObject();
        this.mustChangePassword = (Short)in.readObject();
        this.authId = (Long)in.readObject();
        this.authStr = (String)in.readObject();
        this.disabled = in.readShort();
        this.disabledReason = (String)in.readObject();
        this.inlineHelp = (Short)in.readObject();
    }

}
