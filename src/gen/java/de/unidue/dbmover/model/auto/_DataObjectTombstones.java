package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _DataObjectTombstones was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _DataObjectTombstones extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String TOMBSTONE_ID_PK_COLUMN = "tombstone_id";

    public static final Property<Long> DATA_OBJECT_ID = Property.create("dataObjectId", Long.class);
    public static final Property<LocalDateTime> DATE_DELETED = Property.create("dateDeleted", LocalDateTime.class);
    public static final Property<String> SET_SPEC = Property.create("setSpec", String.class);
    public static final Property<String> SET_NAME = Property.create("setName", String.class);
    public static final Property<String> OAI_IDENTIFIER = Property.create("oaiIdentifier", String.class);

    protected long dataObjectId;
    protected LocalDateTime dateDeleted;
    protected String setSpec;
    protected String setName;
    protected String oaiIdentifier;


    public void setDataObjectId(long dataObjectId) {
        beforePropertyWrite("dataObjectId", this.dataObjectId, dataObjectId);
        this.dataObjectId = dataObjectId;
    }

    public long getDataObjectId() {
        beforePropertyRead("dataObjectId");
        return this.dataObjectId;
    }

    public void setDateDeleted(LocalDateTime dateDeleted) {
        beforePropertyWrite("dateDeleted", this.dateDeleted, dateDeleted);
        this.dateDeleted = dateDeleted;
    }

    public LocalDateTime getDateDeleted() {
        beforePropertyRead("dateDeleted");
        return this.dateDeleted;
    }

    public void setSetSpec(String setSpec) {
        beforePropertyWrite("setSpec", this.setSpec, setSpec);
        this.setSpec = setSpec;
    }

    public String getSetSpec() {
        beforePropertyRead("setSpec");
        return this.setSpec;
    }

    public void setSetName(String setName) {
        beforePropertyWrite("setName", this.setName, setName);
        this.setName = setName;
    }

    public String getSetName() {
        beforePropertyRead("setName");
        return this.setName;
    }

    public void setOaiIdentifier(String oaiIdentifier) {
        beforePropertyWrite("oaiIdentifier", this.oaiIdentifier, oaiIdentifier);
        this.oaiIdentifier = oaiIdentifier;
    }

    public String getOaiIdentifier() {
        beforePropertyRead("oaiIdentifier");
        return this.oaiIdentifier;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "dataObjectId":
                return this.dataObjectId;
            case "dateDeleted":
                return this.dateDeleted;
            case "setSpec":
                return this.setSpec;
            case "setName":
                return this.setName;
            case "oaiIdentifier":
                return this.oaiIdentifier;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "dataObjectId":
                this.dataObjectId = val == null ? 0 : (long)val;
                break;
            case "dateDeleted":
                this.dateDeleted = (LocalDateTime)val;
                break;
            case "setSpec":
                this.setSpec = (String)val;
                break;
            case "setName":
                this.setName = (String)val;
                break;
            case "oaiIdentifier":
                this.oaiIdentifier = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.dataObjectId);
        out.writeObject(this.dateDeleted);
        out.writeObject(this.setSpec);
        out.writeObject(this.setName);
        out.writeObject(this.oaiIdentifier);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.dataObjectId = in.readLong();
        this.dateDeleted = (LocalDateTime)in.readObject();
        this.setSpec = (String)in.readObject();
        this.setName = (String)in.readObject();
        this.oaiIdentifier = (String)in.readObject();
    }

}
