package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _SubscriptionTypes was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _SubscriptionTypes extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> JOURNAL_ID = Property.create("journalId", Long.class);
    public static final Property<Double> COST = Property.create("cost", Double.class);
    public static final Property<String> CURRENCY_CODE_ALPHA = Property.create("currencyCodeAlpha", String.class);
    public static final Property<Short> NON_EXPIRING = Property.create("nonExpiring", Short.class);
    public static final Property<Short> DURATION = Property.create("duration", Short.class);
    public static final Property<Short> FORMAT = Property.create("format", Short.class);
    public static final Property<Short> INSTITUTIONAL = Property.create("institutional", Short.class);
    public static final Property<Short> MEMBERSHIP = Property.create("membership", Short.class);
    public static final Property<Short> DISABLE_PUBLIC_DISPLAY = Property.create("disablePublicDisplay", Short.class);
    public static final Property<Double> SEQ = Property.create("seq", Double.class);
    public static final Property<Long> TYPE_ID = Property.create("typeId", Long.class);

    protected long journalId;
    protected double cost;
    protected String currencyCodeAlpha;
    protected short nonExpiring;
    protected Short duration;
    protected short format;
    protected short institutional;
    protected short membership;
    protected short disablePublicDisplay;
    protected double seq;
    protected Long typeId;


    public void setJournalId(long journalId) {
        beforePropertyWrite("journalId", this.journalId, journalId);
        this.journalId = journalId;
    }

    public long getJournalId() {
        beforePropertyRead("journalId");
        return this.journalId;
    }

    public void setCost(double cost) {
        beforePropertyWrite("cost", this.cost, cost);
        this.cost = cost;
    }

    public double getCost() {
        beforePropertyRead("cost");
        return this.cost;
    }

    public void setCurrencyCodeAlpha(String currencyCodeAlpha) {
        beforePropertyWrite("currencyCodeAlpha", this.currencyCodeAlpha, currencyCodeAlpha);
        this.currencyCodeAlpha = currencyCodeAlpha;
    }

    public String getCurrencyCodeAlpha() {
        beforePropertyRead("currencyCodeAlpha");
        return this.currencyCodeAlpha;
    }

    public void setNonExpiring(short nonExpiring) {
        beforePropertyWrite("nonExpiring", this.nonExpiring, nonExpiring);
        this.nonExpiring = nonExpiring;
    }

    public short getNonExpiring() {
        beforePropertyRead("nonExpiring");
        return this.nonExpiring;
    }

    public void setDuration(short duration) {
        beforePropertyWrite("duration", this.duration, duration);
        this.duration = duration;
    }

    public short getDuration() {
        beforePropertyRead("duration");
        if(this.duration == null) {
            return 0;
        }
        return this.duration;
    }

    public void setFormat(short format) {
        beforePropertyWrite("format", this.format, format);
        this.format = format;
    }

    public short getFormat() {
        beforePropertyRead("format");
        return this.format;
    }

    public void setInstitutional(short institutional) {
        beforePropertyWrite("institutional", this.institutional, institutional);
        this.institutional = institutional;
    }

    public short getInstitutional() {
        beforePropertyRead("institutional");
        return this.institutional;
    }

    public void setMembership(short membership) {
        beforePropertyWrite("membership", this.membership, membership);
        this.membership = membership;
    }

    public short getMembership() {
        beforePropertyRead("membership");
        return this.membership;
    }

    public void setDisablePublicDisplay(short disablePublicDisplay) {
        beforePropertyWrite("disablePublicDisplay", this.disablePublicDisplay, disablePublicDisplay);
        this.disablePublicDisplay = disablePublicDisplay;
    }

    public short getDisablePublicDisplay() {
        beforePropertyRead("disablePublicDisplay");
        return this.disablePublicDisplay;
    }

    public void setSeq(double seq) {
        beforePropertyWrite("seq", this.seq, seq);
        this.seq = seq;
    }

    public double getSeq() {
        beforePropertyRead("seq");
        return this.seq;
    }

    public void setTypeId(Long typeId) {
        beforePropertyWrite("typeId", this.typeId, typeId);
        this.typeId = typeId;
    }

    public Long getTypeId() {
        beforePropertyRead("typeId");
        return this.typeId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "journalId":
                return this.journalId;
            case "cost":
                return this.cost;
            case "currencyCodeAlpha":
                return this.currencyCodeAlpha;
            case "nonExpiring":
                return this.nonExpiring;
            case "duration":
                return this.duration;
            case "format":
                return this.format;
            case "institutional":
                return this.institutional;
            case "membership":
                return this.membership;
            case "disablePublicDisplay":
                return this.disablePublicDisplay;
            case "seq":
                return this.seq;
            case "typeId":
                return this.typeId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "journalId":
                this.journalId = val == null ? 0 : (long)val;
                break;
            case "cost":
                this.cost = val == null ? 0 : (double)val;
                break;
            case "currencyCodeAlpha":
                this.currencyCodeAlpha = (String)val;
                break;
            case "nonExpiring":
                this.nonExpiring = val == null ? 0 : (short)val;
                break;
            case "duration":
                this.duration = (Short)val;
                break;
            case "format":
                this.format = val == null ? 0 : (short)val;
                break;
            case "institutional":
                this.institutional = val == null ? 0 : (short)val;
                break;
            case "membership":
                this.membership = val == null ? 0 : (short)val;
                break;
            case "disablePublicDisplay":
                this.disablePublicDisplay = val == null ? 0 : (short)val;
                break;
            case "seq":
                this.seq = val == null ? 0 : (double)val;
                break;
            case "typeId":
                this.typeId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.journalId);
        out.writeDouble(this.cost);
        out.writeObject(this.currencyCodeAlpha);
        out.writeShort(this.nonExpiring);
        out.writeObject(this.duration);
        out.writeShort(this.format);
        out.writeShort(this.institutional);
        out.writeShort(this.membership);
        out.writeShort(this.disablePublicDisplay);
        out.writeDouble(this.seq);
        out.writeObject(this.typeId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.journalId = in.readLong();
        this.cost = in.readDouble();
        this.currencyCodeAlpha = (String)in.readObject();
        this.nonExpiring = in.readShort();
        this.duration = (Short)in.readObject();
        this.format = in.readShort();
        this.institutional = in.readShort();
        this.membership = in.readShort();
        this.disablePublicDisplay = in.readShort();
        this.seq = in.readDouble();
        this.typeId = (Long)in.readObject();
    }

}
