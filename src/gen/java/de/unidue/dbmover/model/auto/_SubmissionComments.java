package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _SubmissionComments was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _SubmissionComments extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> COMMENT_TYPE = Property.create("commentType", Long.class);
    public static final Property<Long> ROLE_ID = Property.create("roleId", Long.class);
    public static final Property<Long> SUBMISSION_ID = Property.create("submissionId", Long.class);
    public static final Property<Long> ASSOC_ID = Property.create("assocId", Long.class);
    public static final Property<Long> AUTHOR_ID = Property.create("authorId", Long.class);
    public static final Property<String> COMMENT_TITLE = Property.create("commentTitle", String.class);
    public static final Property<String> COMMENTS = Property.create("comments", String.class);
    public static final Property<LocalDateTime> DATE_POSTED = Property.create("datePosted", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_MODIFIED = Property.create("dateModified", LocalDateTime.class);
    public static final Property<Short> VIEWABLE = Property.create("viewable", Short.class);
    public static final Property<Long> COMMENT_ID = Property.create("commentId", Long.class);

    protected Long commentType;
    protected long roleId;
    protected long submissionId;
    protected long assocId;
    protected long authorId;
    protected String commentTitle;
    protected String comments;
    protected LocalDateTime datePosted;
    protected LocalDateTime dateModified;
    protected Short viewable;
    protected Long commentId;


    public void setCommentType(long commentType) {
        beforePropertyWrite("commentType", this.commentType, commentType);
        this.commentType = commentType;
    }

    public long getCommentType() {
        beforePropertyRead("commentType");
        if(this.commentType == null) {
            return 0;
        }
        return this.commentType;
    }

    public void setRoleId(long roleId) {
        beforePropertyWrite("roleId", this.roleId, roleId);
        this.roleId = roleId;
    }

    public long getRoleId() {
        beforePropertyRead("roleId");
        return this.roleId;
    }

    public void setSubmissionId(long submissionId) {
        beforePropertyWrite("submissionId", this.submissionId, submissionId);
        this.submissionId = submissionId;
    }

    public long getSubmissionId() {
        beforePropertyRead("submissionId");
        return this.submissionId;
    }

    public void setAssocId(long assocId) {
        beforePropertyWrite("assocId", this.assocId, assocId);
        this.assocId = assocId;
    }

    public long getAssocId() {
        beforePropertyRead("assocId");
        return this.assocId;
    }

    public void setAuthorId(long authorId) {
        beforePropertyWrite("authorId", this.authorId, authorId);
        this.authorId = authorId;
    }

    public long getAuthorId() {
        beforePropertyRead("authorId");
        return this.authorId;
    }

    public void setCommentTitle(String commentTitle) {
        beforePropertyWrite("commentTitle", this.commentTitle, commentTitle);
        this.commentTitle = commentTitle;
    }

    public String getCommentTitle() {
        beforePropertyRead("commentTitle");
        return this.commentTitle;
    }

    public void setComments(String comments) {
        beforePropertyWrite("comments", this.comments, comments);
        this.comments = comments;
    }

    public String getComments() {
        beforePropertyRead("comments");
        return this.comments;
    }

    public void setDatePosted(LocalDateTime datePosted) {
        beforePropertyWrite("datePosted", this.datePosted, datePosted);
        this.datePosted = datePosted;
    }

    public LocalDateTime getDatePosted() {
        beforePropertyRead("datePosted");
        return this.datePosted;
    }

    public void setDateModified(LocalDateTime dateModified) {
        beforePropertyWrite("dateModified", this.dateModified, dateModified);
        this.dateModified = dateModified;
    }

    public LocalDateTime getDateModified() {
        beforePropertyRead("dateModified");
        return this.dateModified;
    }

    public void setViewable(short viewable) {
        beforePropertyWrite("viewable", this.viewable, viewable);
        this.viewable = viewable;
    }

    public short getViewable() {
        beforePropertyRead("viewable");
        if(this.viewable == null) {
            return 0;
        }
        return this.viewable;
    }

    public void setCommentId(Long commentId) {
        beforePropertyWrite("commentId", this.commentId, commentId);
        this.commentId = commentId;
    }

    public Long getCommentId() {
        beforePropertyRead("commentId");
        return this.commentId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "commentType":
                return this.commentType;
            case "roleId":
                return this.roleId;
            case "submissionId":
                return this.submissionId;
            case "assocId":
                return this.assocId;
            case "authorId":
                return this.authorId;
            case "commentTitle":
                return this.commentTitle;
            case "comments":
                return this.comments;
            case "datePosted":
                return this.datePosted;
            case "dateModified":
                return this.dateModified;
            case "viewable":
                return this.viewable;
            case "commentId":
                return this.commentId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "commentType":
                this.commentType = (Long)val;
                break;
            case "roleId":
                this.roleId = val == null ? 0 : (long)val;
                break;
            case "submissionId":
                this.submissionId = val == null ? 0 : (long)val;
                break;
            case "assocId":
                this.assocId = val == null ? 0 : (long)val;
                break;
            case "authorId":
                this.authorId = val == null ? 0 : (long)val;
                break;
            case "commentTitle":
                this.commentTitle = (String)val;
                break;
            case "comments":
                this.comments = (String)val;
                break;
            case "datePosted":
                this.datePosted = (LocalDateTime)val;
                break;
            case "dateModified":
                this.dateModified = (LocalDateTime)val;
                break;
            case "viewable":
                this.viewable = (Short)val;
                break;
            case "commentId":
                this.commentId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.commentType);
        out.writeLong(this.roleId);
        out.writeLong(this.submissionId);
        out.writeLong(this.assocId);
        out.writeLong(this.authorId);
        out.writeObject(this.commentTitle);
        out.writeObject(this.comments);
        out.writeObject(this.datePosted);
        out.writeObject(this.dateModified);
        out.writeObject(this.viewable);
        out.writeObject(this.commentId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.commentType = (Long)in.readObject();
        this.roleId = in.readLong();
        this.submissionId = in.readLong();
        this.assocId = in.readLong();
        this.authorId = in.readLong();
        this.commentTitle = (String)in.readObject();
        this.comments = (String)in.readObject();
        this.datePosted = (LocalDateTime)in.readObject();
        this.dateModified = (LocalDateTime)in.readObject();
        this.viewable = (Short)in.readObject();
        this.commentId = (Long)in.readObject();
    }

}
