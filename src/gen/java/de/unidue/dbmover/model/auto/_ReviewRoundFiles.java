package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _ReviewRoundFiles was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ReviewRoundFiles extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String FILE_ID_PK_COLUMN = "file_id";
    public static final String REVIEW_ROUND_ID_PK_COLUMN = "review_round_id";
    public static final String REVISION_PK_COLUMN = "revision";
    public static final String SUBMISSION_ID_PK_COLUMN = "submission_id";

    public static final Property<Long> SUBMISSION_ID = Property.create("submissionId", Long.class);
    public static final Property<Long> REVIEW_ROUND_ID = Property.create("reviewRoundId", Long.class);
    public static final Property<Short> STAGE_ID = Property.create("stageId", Short.class);
    public static final Property<Long> FILE_ID = Property.create("fileId", Long.class);
    public static final Property<Long> REVISION = Property.create("revision", Long.class);

    protected long submissionId;
    protected long reviewRoundId;
    protected short stageId;
    protected long fileId;
    protected long revision;


    public void setSubmissionId(long submissionId) {
        beforePropertyWrite("submissionId", this.submissionId, submissionId);
        this.submissionId = submissionId;
    }

    public long getSubmissionId() {
        beforePropertyRead("submissionId");
        return this.submissionId;
    }

    public void setReviewRoundId(long reviewRoundId) {
        beforePropertyWrite("reviewRoundId", this.reviewRoundId, reviewRoundId);
        this.reviewRoundId = reviewRoundId;
    }

    public long getReviewRoundId() {
        beforePropertyRead("reviewRoundId");
        return this.reviewRoundId;
    }

    public void setStageId(short stageId) {
        beforePropertyWrite("stageId", this.stageId, stageId);
        this.stageId = stageId;
    }

    public short getStageId() {
        beforePropertyRead("stageId");
        return this.stageId;
    }

    public void setFileId(long fileId) {
        beforePropertyWrite("fileId", this.fileId, fileId);
        this.fileId = fileId;
    }

    public long getFileId() {
        beforePropertyRead("fileId");
        return this.fileId;
    }

    public void setRevision(long revision) {
        beforePropertyWrite("revision", this.revision, revision);
        this.revision = revision;
    }

    public long getRevision() {
        beforePropertyRead("revision");
        return this.revision;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "submissionId":
                return this.submissionId;
            case "reviewRoundId":
                return this.reviewRoundId;
            case "stageId":
                return this.stageId;
            case "fileId":
                return this.fileId;
            case "revision":
                return this.revision;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "submissionId":
                this.submissionId = val == null ? 0 : (long)val;
                break;
            case "reviewRoundId":
                this.reviewRoundId = val == null ? 0 : (long)val;
                break;
            case "stageId":
                this.stageId = val == null ? 0 : (short)val;
                break;
            case "fileId":
                this.fileId = val == null ? 0 : (long)val;
                break;
            case "revision":
                this.revision = val == null ? 0 : (long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.submissionId);
        out.writeLong(this.reviewRoundId);
        out.writeShort(this.stageId);
        out.writeLong(this.fileId);
        out.writeLong(this.revision);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.submissionId = in.readLong();
        this.reviewRoundId = in.readLong();
        this.stageId = in.readShort();
        this.fileId = in.readLong();
        this.revision = in.readLong();
    }

}
