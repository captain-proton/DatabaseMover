package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _EmailLogUsers was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _EmailLogUsers extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> EMAIL_LOG_ID = Property.create("emailLogId", Long.class);
    public static final Property<Long> USER_ID = Property.create("userId", Long.class);

    protected long emailLogId;
    protected long userId;


    public void setEmailLogId(long emailLogId) {
        beforePropertyWrite("emailLogId", this.emailLogId, emailLogId);
        this.emailLogId = emailLogId;
    }

    public long getEmailLogId() {
        beforePropertyRead("emailLogId");
        return this.emailLogId;
    }

    public void setUserId(long userId) {
        beforePropertyWrite("userId", this.userId, userId);
        this.userId = userId;
    }

    public long getUserId() {
        beforePropertyRead("userId");
        return this.userId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "emailLogId":
                return this.emailLogId;
            case "userId":
                return this.userId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "emailLogId":
                this.emailLogId = val == null ? 0 : (long)val;
                break;
            case "userId":
                this.userId = val == null ? 0 : (long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.emailLogId);
        out.writeLong(this.userId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.emailLogId = in.readLong();
        this.userId = in.readLong();
    }

}
