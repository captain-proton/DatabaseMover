package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _ReviewObjectTypes was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ReviewObjectTypes extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> CONTEXT_ID = Property.create("contextId", Long.class);
    public static final Property<Short> IS_ACTIVE = Property.create("isActive", Short.class);
    public static final Property<String> TYPE_KEY = Property.create("typeKey", String.class);
    public static final Property<Integer> TYPE_ID = Property.create("typeId", Integer.class);

    protected long contextId;
    protected short isActive;
    protected String typeKey;
    protected Integer typeId;


    public void setContextId(long contextId) {
        beforePropertyWrite("contextId", this.contextId, contextId);
        this.contextId = contextId;
    }

    public long getContextId() {
        beforePropertyRead("contextId");
        return this.contextId;
    }

    public void setIsActive(short isActive) {
        beforePropertyWrite("isActive", this.isActive, isActive);
        this.isActive = isActive;
    }

    public short getIsActive() {
        beforePropertyRead("isActive");
        return this.isActive;
    }

    public void setTypeKey(String typeKey) {
        beforePropertyWrite("typeKey", this.typeKey, typeKey);
        this.typeKey = typeKey;
    }

    public String getTypeKey() {
        beforePropertyRead("typeKey");
        return this.typeKey;
    }

    public void setTypeId(Integer typeId) {
        beforePropertyWrite("typeId", this.typeId, typeId);
        this.typeId = typeId;
    }

    public Integer getTypeId() {
        beforePropertyRead("typeId");
        return this.typeId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "contextId":
                return this.contextId;
            case "isActive":
                return this.isActive;
            case "typeKey":
                return this.typeKey;
            case "typeId":
                return this.typeId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "contextId":
                this.contextId = val == null ? 0 : (long)val;
                break;
            case "isActive":
                this.isActive = val == null ? 0 : (short)val;
                break;
            case "typeKey":
                this.typeKey = (String)val;
                break;
            case "typeId":
                this.typeId = (Integer)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.contextId);
        out.writeShort(this.isActive);
        out.writeObject(this.typeKey);
        out.writeObject(this.typeId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.contextId = in.readLong();
        this.isActive = in.readShort();
        this.typeKey = (String)in.readObject();
        this.typeId = (Integer)in.readObject();
    }

}
