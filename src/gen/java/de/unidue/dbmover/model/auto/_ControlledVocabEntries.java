package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _ControlledVocabEntries was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _ControlledVocabEntries extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> CONTROLLED_VOCAB_ID = Property.create("controlledVocabId", Long.class);
    public static final Property<Double> SEQ = Property.create("seq", Double.class);
    public static final Property<Long> CONTROLLED_VOCAB_ENTRY_ID = Property.create("controlledVocabEntryId", Long.class);

    protected long controlledVocabId;
    protected Double seq;
    protected Long controlledVocabEntryId;


    public void setControlledVocabId(long controlledVocabId) {
        beforePropertyWrite("controlledVocabId", this.controlledVocabId, controlledVocabId);
        this.controlledVocabId = controlledVocabId;
    }

    public long getControlledVocabId() {
        beforePropertyRead("controlledVocabId");
        return this.controlledVocabId;
    }

    public void setSeq(double seq) {
        beforePropertyWrite("seq", this.seq, seq);
        this.seq = seq;
    }

    public double getSeq() {
        beforePropertyRead("seq");
        if(this.seq == null) {
            return 0;
        }
        return this.seq;
    }

    public void setControlledVocabEntryId(Long controlledVocabEntryId) {
        beforePropertyWrite("controlledVocabEntryId", this.controlledVocabEntryId, controlledVocabEntryId);
        this.controlledVocabEntryId = controlledVocabEntryId;
    }

    public Long getControlledVocabEntryId() {
        beforePropertyRead("controlledVocabEntryId");
        return this.controlledVocabEntryId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "controlledVocabId":
                return this.controlledVocabId;
            case "seq":
                return this.seq;
            case "controlledVocabEntryId":
                return this.controlledVocabEntryId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "controlledVocabId":
                this.controlledVocabId = val == null ? 0 : (long)val;
                break;
            case "seq":
                this.seq = (Double)val;
                break;
            case "controlledVocabEntryId":
                this.controlledVocabEntryId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.controlledVocabId);
        out.writeObject(this.seq);
        out.writeObject(this.controlledVocabEntryId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.controlledVocabId = in.readLong();
        this.seq = (Double)in.readObject();
        this.controlledVocabEntryId = (Long)in.readObject();
    }

}
