package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _PaypalTransactions was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _PaypalTransactions extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String TXN_ID_PK_COLUMN = "txn_id";

    public static final Property<String> TXN_TYPE = Property.create("txnType", String.class);
    public static final Property<String> PAYER_EMAIL = Property.create("payerEmail", String.class);
    public static final Property<String> RECEIVER_EMAIL = Property.create("receiverEmail", String.class);
    public static final Property<String> ITEM_NUMBER = Property.create("itemNumber", String.class);
    public static final Property<String> PAYMENT_DATE = Property.create("paymentDate", String.class);
    public static final Property<String> PAYER_ID = Property.create("payerId", String.class);
    public static final Property<String> RECEIVER_ID = Property.create("receiverId", String.class);

    protected String txnType;
    protected String payerEmail;
    protected String receiverEmail;
    protected String itemNumber;
    protected String paymentDate;
    protected String payerId;
    protected String receiverId;


    public void setTxnType(String txnType) {
        beforePropertyWrite("txnType", this.txnType, txnType);
        this.txnType = txnType;
    }

    public String getTxnType() {
        beforePropertyRead("txnType");
        return this.txnType;
    }

    public void setPayerEmail(String payerEmail) {
        beforePropertyWrite("payerEmail", this.payerEmail, payerEmail);
        this.payerEmail = payerEmail;
    }

    public String getPayerEmail() {
        beforePropertyRead("payerEmail");
        return this.payerEmail;
    }

    public void setReceiverEmail(String receiverEmail) {
        beforePropertyWrite("receiverEmail", this.receiverEmail, receiverEmail);
        this.receiverEmail = receiverEmail;
    }

    public String getReceiverEmail() {
        beforePropertyRead("receiverEmail");
        return this.receiverEmail;
    }

    public void setItemNumber(String itemNumber) {
        beforePropertyWrite("itemNumber", this.itemNumber, itemNumber);
        this.itemNumber = itemNumber;
    }

    public String getItemNumber() {
        beforePropertyRead("itemNumber");
        return this.itemNumber;
    }

    public void setPaymentDate(String paymentDate) {
        beforePropertyWrite("paymentDate", this.paymentDate, paymentDate);
        this.paymentDate = paymentDate;
    }

    public String getPaymentDate() {
        beforePropertyRead("paymentDate");
        return this.paymentDate;
    }

    public void setPayerId(String payerId) {
        beforePropertyWrite("payerId", this.payerId, payerId);
        this.payerId = payerId;
    }

    public String getPayerId() {
        beforePropertyRead("payerId");
        return this.payerId;
    }

    public void setReceiverId(String receiverId) {
        beforePropertyWrite("receiverId", this.receiverId, receiverId);
        this.receiverId = receiverId;
    }

    public String getReceiverId() {
        beforePropertyRead("receiverId");
        return this.receiverId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "txnType":
                return this.txnType;
            case "payerEmail":
                return this.payerEmail;
            case "receiverEmail":
                return this.receiverEmail;
            case "itemNumber":
                return this.itemNumber;
            case "paymentDate":
                return this.paymentDate;
            case "payerId":
                return this.payerId;
            case "receiverId":
                return this.receiverId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "txnType":
                this.txnType = (String)val;
                break;
            case "payerEmail":
                this.payerEmail = (String)val;
                break;
            case "receiverEmail":
                this.receiverEmail = (String)val;
                break;
            case "itemNumber":
                this.itemNumber = (String)val;
                break;
            case "paymentDate":
                this.paymentDate = (String)val;
                break;
            case "payerId":
                this.payerId = (String)val;
                break;
            case "receiverId":
                this.receiverId = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.txnType);
        out.writeObject(this.payerEmail);
        out.writeObject(this.receiverEmail);
        out.writeObject(this.itemNumber);
        out.writeObject(this.paymentDate);
        out.writeObject(this.payerId);
        out.writeObject(this.receiverId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.txnType = (String)in.readObject();
        this.payerEmail = (String)in.readObject();
        this.receiverEmail = (String)in.readObject();
        this.itemNumber = (String)in.readObject();
        this.paymentDate = (String)in.readObject();
        this.payerId = (String)in.readObject();
        this.receiverId = (String)in.readObject();
    }

}
