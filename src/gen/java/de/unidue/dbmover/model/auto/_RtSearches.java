package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _RtSearches was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _RtSearches extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String SEARCH_ID_PK_COLUMN = "search_id";

    public static final Property<Long> CONTEXT_ID = Property.create("contextId", Long.class);
    public static final Property<String> TITLE = Property.create("title", String.class);
    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<String> URL = Property.create("url", String.class);
    public static final Property<String> SEARCH_URL = Property.create("searchUrl", String.class);
    public static final Property<String> SEARCH_POST = Property.create("searchPost", String.class);
    public static final Property<Double> SEQ = Property.create("seq", Double.class);

    protected long contextId;
    protected String title;
    protected String description;
    protected String url;
    protected String searchUrl;
    protected String searchPost;
    protected double seq;


    public void setContextId(long contextId) {
        beforePropertyWrite("contextId", this.contextId, contextId);
        this.contextId = contextId;
    }

    public long getContextId() {
        beforePropertyRead("contextId");
        return this.contextId;
    }

    public void setTitle(String title) {
        beforePropertyWrite("title", this.title, title);
        this.title = title;
    }

    public String getTitle() {
        beforePropertyRead("title");
        return this.title;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setUrl(String url) {
        beforePropertyWrite("url", this.url, url);
        this.url = url;
    }

    public String getUrl() {
        beforePropertyRead("url");
        return this.url;
    }

    public void setSearchUrl(String searchUrl) {
        beforePropertyWrite("searchUrl", this.searchUrl, searchUrl);
        this.searchUrl = searchUrl;
    }

    public String getSearchUrl() {
        beforePropertyRead("searchUrl");
        return this.searchUrl;
    }

    public void setSearchPost(String searchPost) {
        beforePropertyWrite("searchPost", this.searchPost, searchPost);
        this.searchPost = searchPost;
    }

    public String getSearchPost() {
        beforePropertyRead("searchPost");
        return this.searchPost;
    }

    public void setSeq(double seq) {
        beforePropertyWrite("seq", this.seq, seq);
        this.seq = seq;
    }

    public double getSeq() {
        beforePropertyRead("seq");
        return this.seq;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "contextId":
                return this.contextId;
            case "title":
                return this.title;
            case "description":
                return this.description;
            case "url":
                return this.url;
            case "searchUrl":
                return this.searchUrl;
            case "searchPost":
                return this.searchPost;
            case "seq":
                return this.seq;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "contextId":
                this.contextId = val == null ? 0 : (long)val;
                break;
            case "title":
                this.title = (String)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "url":
                this.url = (String)val;
                break;
            case "searchUrl":
                this.searchUrl = (String)val;
                break;
            case "searchPost":
                this.searchPost = (String)val;
                break;
            case "seq":
                this.seq = val == null ? 0 : (double)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.contextId);
        out.writeObject(this.title);
        out.writeObject(this.description);
        out.writeObject(this.url);
        out.writeObject(this.searchUrl);
        out.writeObject(this.searchPost);
        out.writeDouble(this.seq);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.contextId = in.readLong();
        this.title = (String)in.readObject();
        this.description = (String)in.readObject();
        this.url = (String)in.readObject();
        this.searchUrl = (String)in.readObject();
        this.searchPost = (String)in.readObject();
        this.seq = in.readDouble();
    }

}
