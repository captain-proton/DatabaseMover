package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _NavigationMenus was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _NavigationMenus extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String NAVIGATION_MENU_ID_PK_COLUMN = "navigation_menu_id";

    public static final Property<Long> CONTEXT_ID = Property.create("contextId", Long.class);
    public static final Property<String> AREA_NAME = Property.create("areaName", String.class);
    public static final Property<String> TITLE = Property.create("title", String.class);

    protected long contextId;
    protected String areaName;
    protected String title;


    public void setContextId(long contextId) {
        beforePropertyWrite("contextId", this.contextId, contextId);
        this.contextId = contextId;
    }

    public long getContextId() {
        beforePropertyRead("contextId");
        return this.contextId;
    }

    public void setAreaName(String areaName) {
        beforePropertyWrite("areaName", this.areaName, areaName);
        this.areaName = areaName;
    }

    public String getAreaName() {
        beforePropertyRead("areaName");
        return this.areaName;
    }

    public void setTitle(String title) {
        beforePropertyWrite("title", this.title, title);
        this.title = title;
    }

    public String getTitle() {
        beforePropertyRead("title");
        return this.title;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "contextId":
                return this.contextId;
            case "areaName":
                return this.areaName;
            case "title":
                return this.title;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "contextId":
                this.contextId = val == null ? 0 : (long)val;
                break;
            case "areaName":
                this.areaName = (String)val;
                break;
            case "title":
                this.title = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.contextId);
        out.writeObject(this.areaName);
        out.writeObject(this.title);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.contextId = in.readLong();
        this.areaName = (String)in.readObject();
        this.title = (String)in.readObject();
    }

}
