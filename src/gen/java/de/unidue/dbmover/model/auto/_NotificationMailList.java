package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _NotificationMailList was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _NotificationMailList extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<String> EMAIL = Property.create("email", String.class);
    public static final Property<Short> CONFIRMED = Property.create("confirmed", Short.class);
    public static final Property<String> TOKEN = Property.create("token", String.class);
    public static final Property<Long> CONTEXT = Property.create("context", Long.class);
    public static final Property<Long> NOTIFICATION_MAIL_LIST_ID = Property.create("notificationMailListId", Long.class);

    protected String email;
    protected short confirmed;
    protected String token;
    protected long context;
    protected Long notificationMailListId;


    public void setEmail(String email) {
        beforePropertyWrite("email", this.email, email);
        this.email = email;
    }

    public String getEmail() {
        beforePropertyRead("email");
        return this.email;
    }

    public void setConfirmed(short confirmed) {
        beforePropertyWrite("confirmed", this.confirmed, confirmed);
        this.confirmed = confirmed;
    }

    public short getConfirmed() {
        beforePropertyRead("confirmed");
        return this.confirmed;
    }

    public void setToken(String token) {
        beforePropertyWrite("token", this.token, token);
        this.token = token;
    }

    public String getToken() {
        beforePropertyRead("token");
        return this.token;
    }

    public void setContext(long context) {
        beforePropertyWrite("context", this.context, context);
        this.context = context;
    }

    public long getContext() {
        beforePropertyRead("context");
        return this.context;
    }

    public void setNotificationMailListId(Long notificationMailListId) {
        beforePropertyWrite("notificationMailListId", this.notificationMailListId, notificationMailListId);
        this.notificationMailListId = notificationMailListId;
    }

    public Long getNotificationMailListId() {
        beforePropertyRead("notificationMailListId");
        return this.notificationMailListId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "email":
                return this.email;
            case "confirmed":
                return this.confirmed;
            case "token":
                return this.token;
            case "context":
                return this.context;
            case "notificationMailListId":
                return this.notificationMailListId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "email":
                this.email = (String)val;
                break;
            case "confirmed":
                this.confirmed = val == null ? 0 : (short)val;
                break;
            case "token":
                this.token = (String)val;
                break;
            case "context":
                this.context = val == null ? 0 : (long)val;
                break;
            case "notificationMailListId":
                this.notificationMailListId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.email);
        out.writeShort(this.confirmed);
        out.writeObject(this.token);
        out.writeLong(this.context);
        out.writeObject(this.notificationMailListId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.email = (String)in.readObject();
        this.confirmed = in.readShort();
        this.token = (String)in.readObject();
        this.context = in.readLong();
        this.notificationMailListId = (Long)in.readObject();
    }

}
