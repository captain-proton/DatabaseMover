package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _GroupMemberships was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _GroupMemberships extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String GROUP_ID_PK_COLUMN = "group_id";
    public static final String USER_ID_PK_COLUMN = "user_id";

    public static final Property<Long> USER_ID = Property.create("userId", Long.class);
    public static final Property<Long> GROUP_ID = Property.create("groupId", Long.class);
    public static final Property<Short> ABOUT_DISPLAYED = Property.create("aboutDisplayed", Short.class);
    public static final Property<Double> SEQ = Property.create("seq", Double.class);

    protected long userId;
    protected long groupId;
    protected short aboutDisplayed;
    protected double seq;


    public void setUserId(long userId) {
        beforePropertyWrite("userId", this.userId, userId);
        this.userId = userId;
    }

    public long getUserId() {
        beforePropertyRead("userId");
        return this.userId;
    }

    public void setGroupId(long groupId) {
        beforePropertyWrite("groupId", this.groupId, groupId);
        this.groupId = groupId;
    }

    public long getGroupId() {
        beforePropertyRead("groupId");
        return this.groupId;
    }

    public void setAboutDisplayed(short aboutDisplayed) {
        beforePropertyWrite("aboutDisplayed", this.aboutDisplayed, aboutDisplayed);
        this.aboutDisplayed = aboutDisplayed;
    }

    public short getAboutDisplayed() {
        beforePropertyRead("aboutDisplayed");
        return this.aboutDisplayed;
    }

    public void setSeq(double seq) {
        beforePropertyWrite("seq", this.seq, seq);
        this.seq = seq;
    }

    public double getSeq() {
        beforePropertyRead("seq");
        return this.seq;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "userId":
                return this.userId;
            case "groupId":
                return this.groupId;
            case "aboutDisplayed":
                return this.aboutDisplayed;
            case "seq":
                return this.seq;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "userId":
                this.userId = val == null ? 0 : (long)val;
                break;
            case "groupId":
                this.groupId = val == null ? 0 : (long)val;
                break;
            case "aboutDisplayed":
                this.aboutDisplayed = val == null ? 0 : (short)val;
                break;
            case "seq":
                this.seq = val == null ? 0 : (double)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.userId);
        out.writeLong(this.groupId);
        out.writeShort(this.aboutDisplayed);
        out.writeDouble(this.seq);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.userId = in.readLong();
        this.groupId = in.readLong();
        this.aboutDisplayed = in.readShort();
        this.seq = in.readDouble();
    }

}
