package de.unidue.dbmover.model.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Issues was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Issues extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<Long> JOURNAL_ID = Property.create("journalId", Long.class);
    public static final Property<Short> VOLUME = Property.create("volume", Short.class);
    public static final Property<String> NUMBER = Property.create("number", String.class);
    public static final Property<Short> YEAR = Property.create("year", Short.class);
    public static final Property<Short> PUBLISHED = Property.create("published", Short.class);
    public static final Property<Short> CURRENT = Property.create("current", Short.class);
    public static final Property<LocalDateTime> DATE_PUBLISHED = Property.create("datePublished", LocalDateTime.class);
    public static final Property<LocalDateTime> DATE_NOTIFIED = Property.create("dateNotified", LocalDateTime.class);
    public static final Property<LocalDateTime> LAST_MODIFIED = Property.create("lastModified", LocalDateTime.class);
    public static final Property<Short> ACCESS_STATUS = Property.create("accessStatus", Short.class);
    public static final Property<LocalDateTime> OPEN_ACCESS_DATE = Property.create("openAccessDate", LocalDateTime.class);
    public static final Property<Short> SHOW_VOLUME = Property.create("showVolume", Short.class);
    public static final Property<Short> SHOW_NUMBER = Property.create("showNumber", Short.class);
    public static final Property<Short> SHOW_YEAR = Property.create("showYear", Short.class);
    public static final Property<Short> SHOW_TITLE = Property.create("showTitle", Short.class);
    public static final Property<String> STYLE_FILE_NAME = Property.create("styleFileName", String.class);
    public static final Property<String> ORIGINAL_STYLE_FILE_NAME = Property.create("originalStyleFileName", String.class);
    public static final Property<Long> ISSUE_ID = Property.create("issueId", Long.class);

    protected long journalId;
    protected Short volume;
    protected String number;
    protected Short year;
    protected short published;
    protected short current;
    protected LocalDateTime datePublished;
    protected LocalDateTime dateNotified;
    protected LocalDateTime lastModified;
    protected short accessStatus;
    protected LocalDateTime openAccessDate;
    protected short showVolume;
    protected short showNumber;
    protected short showYear;
    protected short showTitle;
    protected String styleFileName;
    protected String originalStyleFileName;
    protected Long issueId;


    public void setJournalId(long journalId) {
        beforePropertyWrite("journalId", this.journalId, journalId);
        this.journalId = journalId;
    }

    public long getJournalId() {
        beforePropertyRead("journalId");
        return this.journalId;
    }

    public void setVolume(short volume) {
        beforePropertyWrite("volume", this.volume, volume);
        this.volume = volume;
    }

    public short getVolume() {
        beforePropertyRead("volume");
        if(this.volume == null) {
            return 0;
        }
        return this.volume;
    }

    public void setNumber(String number) {
        beforePropertyWrite("number", this.number, number);
        this.number = number;
    }

    public String getNumber() {
        beforePropertyRead("number");
        return this.number;
    }

    public void setYear(short year) {
        beforePropertyWrite("year", this.year, year);
        this.year = year;
    }

    public short getYear() {
        beforePropertyRead("year");
        if(this.year == null) {
            return 0;
        }
        return this.year;
    }

    public void setPublished(short published) {
        beforePropertyWrite("published", this.published, published);
        this.published = published;
    }

    public short getPublished() {
        beforePropertyRead("published");
        return this.published;
    }

    public void setCurrent(short current) {
        beforePropertyWrite("current", this.current, current);
        this.current = current;
    }

    public short getCurrent() {
        beforePropertyRead("current");
        return this.current;
    }

    public void setDatePublished(LocalDateTime datePublished) {
        beforePropertyWrite("datePublished", this.datePublished, datePublished);
        this.datePublished = datePublished;
    }

    public LocalDateTime getDatePublished() {
        beforePropertyRead("datePublished");
        return this.datePublished;
    }

    public void setDateNotified(LocalDateTime dateNotified) {
        beforePropertyWrite("dateNotified", this.dateNotified, dateNotified);
        this.dateNotified = dateNotified;
    }

    public LocalDateTime getDateNotified() {
        beforePropertyRead("dateNotified");
        return this.dateNotified;
    }

    public void setLastModified(LocalDateTime lastModified) {
        beforePropertyWrite("lastModified", this.lastModified, lastModified);
        this.lastModified = lastModified;
    }

    public LocalDateTime getLastModified() {
        beforePropertyRead("lastModified");
        return this.lastModified;
    }

    public void setAccessStatus(short accessStatus) {
        beforePropertyWrite("accessStatus", this.accessStatus, accessStatus);
        this.accessStatus = accessStatus;
    }

    public short getAccessStatus() {
        beforePropertyRead("accessStatus");
        return this.accessStatus;
    }

    public void setOpenAccessDate(LocalDateTime openAccessDate) {
        beforePropertyWrite("openAccessDate", this.openAccessDate, openAccessDate);
        this.openAccessDate = openAccessDate;
    }

    public LocalDateTime getOpenAccessDate() {
        beforePropertyRead("openAccessDate");
        return this.openAccessDate;
    }

    public void setShowVolume(short showVolume) {
        beforePropertyWrite("showVolume", this.showVolume, showVolume);
        this.showVolume = showVolume;
    }

    public short getShowVolume() {
        beforePropertyRead("showVolume");
        return this.showVolume;
    }

    public void setShowNumber(short showNumber) {
        beforePropertyWrite("showNumber", this.showNumber, showNumber);
        this.showNumber = showNumber;
    }

    public short getShowNumber() {
        beforePropertyRead("showNumber");
        return this.showNumber;
    }

    public void setShowYear(short showYear) {
        beforePropertyWrite("showYear", this.showYear, showYear);
        this.showYear = showYear;
    }

    public short getShowYear() {
        beforePropertyRead("showYear");
        return this.showYear;
    }

    public void setShowTitle(short showTitle) {
        beforePropertyWrite("showTitle", this.showTitle, showTitle);
        this.showTitle = showTitle;
    }

    public short getShowTitle() {
        beforePropertyRead("showTitle");
        return this.showTitle;
    }

    public void setStyleFileName(String styleFileName) {
        beforePropertyWrite("styleFileName", this.styleFileName, styleFileName);
        this.styleFileName = styleFileName;
    }

    public String getStyleFileName() {
        beforePropertyRead("styleFileName");
        return this.styleFileName;
    }

    public void setOriginalStyleFileName(String originalStyleFileName) {
        beforePropertyWrite("originalStyleFileName", this.originalStyleFileName, originalStyleFileName);
        this.originalStyleFileName = originalStyleFileName;
    }

    public String getOriginalStyleFileName() {
        beforePropertyRead("originalStyleFileName");
        return this.originalStyleFileName;
    }

    public void setIssueId(Long issueId) {
        beforePropertyWrite("issueId", this.issueId, issueId);
        this.issueId = issueId;
    }

    public Long getIssueId() {
        beforePropertyRead("issueId");
        return this.issueId;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "journalId":
                return this.journalId;
            case "volume":
                return this.volume;
            case "number":
                return this.number;
            case "year":
                return this.year;
            case "published":
                return this.published;
            case "current":
                return this.current;
            case "datePublished":
                return this.datePublished;
            case "dateNotified":
                return this.dateNotified;
            case "lastModified":
                return this.lastModified;
            case "accessStatus":
                return this.accessStatus;
            case "openAccessDate":
                return this.openAccessDate;
            case "showVolume":
                return this.showVolume;
            case "showNumber":
                return this.showNumber;
            case "showYear":
                return this.showYear;
            case "showTitle":
                return this.showTitle;
            case "styleFileName":
                return this.styleFileName;
            case "originalStyleFileName":
                return this.originalStyleFileName;
            case "issueId":
                return this.issueId;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "journalId":
                this.journalId = val == null ? 0 : (long)val;
                break;
            case "volume":
                this.volume = (Short)val;
                break;
            case "number":
                this.number = (String)val;
                break;
            case "year":
                this.year = (Short)val;
                break;
            case "published":
                this.published = val == null ? 0 : (short)val;
                break;
            case "current":
                this.current = val == null ? 0 : (short)val;
                break;
            case "datePublished":
                this.datePublished = (LocalDateTime)val;
                break;
            case "dateNotified":
                this.dateNotified = (LocalDateTime)val;
                break;
            case "lastModified":
                this.lastModified = (LocalDateTime)val;
                break;
            case "accessStatus":
                this.accessStatus = val == null ? 0 : (short)val;
                break;
            case "openAccessDate":
                this.openAccessDate = (LocalDateTime)val;
                break;
            case "showVolume":
                this.showVolume = val == null ? 0 : (short)val;
                break;
            case "showNumber":
                this.showNumber = val == null ? 0 : (short)val;
                break;
            case "showYear":
                this.showYear = val == null ? 0 : (short)val;
                break;
            case "showTitle":
                this.showTitle = val == null ? 0 : (short)val;
                break;
            case "styleFileName":
                this.styleFileName = (String)val;
                break;
            case "originalStyleFileName":
                this.originalStyleFileName = (String)val;
                break;
            case "issueId":
                this.issueId = (Long)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeLong(this.journalId);
        out.writeObject(this.volume);
        out.writeObject(this.number);
        out.writeObject(this.year);
        out.writeShort(this.published);
        out.writeShort(this.current);
        out.writeObject(this.datePublished);
        out.writeObject(this.dateNotified);
        out.writeObject(this.lastModified);
        out.writeShort(this.accessStatus);
        out.writeObject(this.openAccessDate);
        out.writeShort(this.showVolume);
        out.writeShort(this.showNumber);
        out.writeShort(this.showYear);
        out.writeShort(this.showTitle);
        out.writeObject(this.styleFileName);
        out.writeObject(this.originalStyleFileName);
        out.writeObject(this.issueId);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.journalId = in.readLong();
        this.volume = (Short)in.readObject();
        this.number = (String)in.readObject();
        this.year = (Short)in.readObject();
        this.published = in.readShort();
        this.current = in.readShort();
        this.datePublished = (LocalDateTime)in.readObject();
        this.dateNotified = (LocalDateTime)in.readObject();
        this.lastModified = (LocalDateTime)in.readObject();
        this.accessStatus = in.readShort();
        this.openAccessDate = (LocalDateTime)in.readObject();
        this.showVolume = in.readShort();
        this.showNumber = in.readShort();
        this.showYear = in.readShort();
        this.showTitle = in.readShort();
        this.styleFileName = (String)in.readObject();
        this.originalStyleFileName = (String)in.readObject();
        this.issueId = (Long)in.readObject();
    }

}
